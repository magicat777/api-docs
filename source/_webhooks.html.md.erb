# <span class="customTOCSectionHeading">Webhooks</span>

# Intro to Webhooks

<%= WEBHOOKS_INTRO %> 

At a high-level, it works like this:

<ol>
	<li><span class="customInstructionsHeading">Your application subscribes to <a href="#event-callbacks">callbacks</a>.</span><br/>First, subscribe to event notifications (callbacks) by creating one or more webhooks.  You can create a webhook manually via the API or have your application create a webhook dynamically.  Each webhook must specify:
		<ul>
			<li>Which Smartsheet object to monitor for events</li>
			<li>Which events in that object should trigger a callback</li>
			<li>The HTTPS URL (that is, "callback URL") where Smartsheet should send callbacks when any of the specified events occur within the scope of the specified Smartsheet object. (<b>NOTE:</b> Smartsheet webhooks do not support callbacks to servers using self-signed certificates)</li>
		</ul> 
		<br/>
		
		<b>Webhook examples in plain English:</b> 
		<ul>
			<li><i>"When any changes occur in Sheet_A, send a callback to https://www.myapp.com/abc"</i></li>
			<li><i>"When a new row is added to Sheet_B, send a callback to https://www.myapp.com/def"</i></li>
			<li><i>"When a cell value is changed in Sheet_C, send a callback to https://www.myapp.com/ghi"</i></li>
		</ul>
		<br/>
	</li>
	<li><span class="customInstructionsHeading">When any of the specified events occur within an object that is being monitored by a webhook, Smartsheet sends an <b>HTTP POST</b> (that is, "callback") to the callback URL that is associated with the webhook.</span><br/>
		<ul>
			<li><i>NOTE:</i> The callback payload is a "skinny" payload -- it indicates which objects changed and the type of events that occurred, but does not contain any data from the objects themselves.</li>
		</ul> 
		<br/>
	</li>
	<li><span class="customInstructionsHeading">Your application receives, acknowledges, and processes callbacks.</span><br/>Your application receives the <code>HTTP POST</code>, acknowledges the callback by responding with HTTP status 200, and processes the callback. 
	Because the callbacks are "skinny", make one or more requests to the Smartsheet API to retrieve the actual data associated with the change.
	</li>
</ol>

## Webhook Management

Webhooks are created and managed by using the Smartsheet API. See [Webhooks API Reference](#webhooks) for details about the related API operations. 

## Webhook Ownership & Access

Webhooks can be created and managed via [Direct API Access](#webhooks-reference) or by a [third-party app](#third-party-app-development). 

A webhook that is created via Direct API Access:

* is owned by the user who created it
* can be managed only by the user who created it
* is not affected if the access token that was used to create it is revoked, as long as the user remains active

A webhook that is created by a [third-party app](#third-party-app-development):

* is owned by the user who authorized the third-party app (and is associated with the third-party app)
* can be managed by the third-party app (as long as it maintains authorization) or by the user who owns it
* is permanently disabled if the third-party app's permissions are revoked

## Webhook Scope & Events

A webhook monitors the specified **scope** for the specified **events**. 

A [Webhook object's](#webhook-object) **scope** attribute indicates the scope of the subscription. It is specified when [creating a webhook](#create-webhook), and cannot subsequently be changed. 

* Currently, **sheet** is the only supported value for the **scope** attribute. However, you can set an array of columns as a **subscope** if you want to limit the webhook to specific columns. 

A [Webhook object's](#webhook-object) **event** attribute indicates the set of events that a webhook is subscribed to (that is, which events trigger a callback).

* Events are represented as a dot-separated string in the format "*object*.*event*", where an asterisk (&#42;) can be used to represent "all objects" or "all events".
* Currently, <b>&#42;.&#42;</b> is the only supported value for the **events** attribute. This indicates a subscription to all objects in the scope, and all events for those objects.

#### Example

Consider a [Webhook object](#webhook-object) with the following attribute values:

* **scopeObjectId** = 12345678901234
* **scope** = "sheet" 
* **events** = "&#42;.&#42;" 

This webhook monitors the specified sheet (id: 12345678901234) for all types of events. For example, if a row is added to the sheet, cell values are updated in the sheet, a column is deleted from the sheet, etc., a callback is sent to the webhook's **callbackUrl**.

# Creating a Webhook

An API client can create a webhook by using the [Create Webhook](#create-webhook) operation. A newly created webhook is disabled by default.
After successfully creating a webhook, the API client must subsequently initiate and complete the [verification process](#webhook-verification) before the webhook is enabled. 
The following diagram illustrates the process of creating and enabling a webhook. 

<img src="images/v4-CreateAndEnableWebhook.png" alt="Workflow to create a webhook" />

#### Step-by-Step:

The process occurs synchronously:

1. API client submits a [Create Webhook](#create-webhook) request.

2. Smartsheet creates the webhook, but does not initially enable the webhook (**enabled: false** and **status: "NEW_NOT_VERIFIED"**).

3. To initiate the verification process, the API client submits an [Update Webhook](#update-webhook) request to specify **enabled: true**. (**NOTE:** The API client does not receive a response to this request until the verification process (steps 4 and 5) has completed.)

4. When Smartsheet receives the request to enable the webhook, it sends a [verification request](#webhook-verification) to the subscriber (that is, to the **callbackUrl** that the API client specified in the Create Webhook request). 
The request specifies a unique random value in the **Smartsheet-Hook-Challenge** header and contains only **challenge** and **webhookId** in the request body. The **challenge** value is a repeat of the header value for API clients that don't interpret header values.

5. The subscriber responds to the verification request by echoing back the same unique random value in the **Smartsheet-Hook-Response** header of the response. For API clients that don't interpret header values, you can also send a JSON body with a **smartsheetHookResponse** attribute and the same value that would have been in the header. 

6. Once the subscriber has successfully acknowledged the verification request, Smartsheet enables the webhook and responds to the API client's Update Webhook request to confirm that the webhook has been enabled (**enabled: true** and **status: "ENABLED"**). 

## Webhook Verification

> Verification request (from Smartsheet):

```test
POST [callbackUrl]
Smartsheet-Hook-Challenge: d78dd1d3-01ce-4481-81de-92b4f3aa5ab1 
{ 
  "challenge": "d78dd1d3-01ce-4481-81de-92b4f3aa5ab1",
  "webhookId": 2674017481058180
}
```

> Verification response (by subscriber):

```test
HTTP status: 200 OK
Smartsheet-Hook-Response: d78dd1d3-01ce-4481-81de-92b4f3aa5ab1 
{
  "smartsheetHookResponse": "d78dd1d3-01ce-4481-81de-92b4f3aa5ab1"
}
```

When an API client attempts to enable a webhook, Smartsheet sends a verification request to the webhook's **callbackUrl** to verify that the subscriber expects and is able to successfully receive callbacks. 
The request specifies a unique random value in the **Smartsheet-Hook-Challenge** header and contains a JSON object in the request body with only **challenge** and **webhookId** attributes in the request body. The **challenge** attribute is a repeat of the header value for API clients that don't interpret header values.

* To verify the webhook, the subscriber's response to the verification request must return a 200 HTTP status code and must echo back the same unique random value in the **Smartsheet-Hook-Response** header of the response or with a JSON **smartsheetHookResponse** attribute. Once Smartsheet receives this verification response, the webhook is enabled (**enabled: true** and **status: "ENABLED"**).

* If the subscriber does not successfully respond to the verification request, the webhook remains disabled (**enabled: false** and **status: "DISABLED_VERIFICATION_FAILED"**).

When a webhook is initially [created through the API](#create-webhook), the response contains the webhook's Id.  If you wish to guarantee that your server only receives callbacks for webhooks that you created,
you can check the verification request's **webhookId** attribute against your list of created webhook Ids.  If the Id is not in the list, return a response with a non-200 status code (for example, 403 Forbidden),
and the webhook that initiated the verification request is disabled as described above.

<aside class="notice"><b>IMPORTANT:</b> ONGOING VERIFICATION. Once a webhook has been enabled, Smartsheet sends a verification request to the webhook's <b>callbackUrl</b> once every 100 callbacks. The subscriber should respond to the verification request as described above -- failure to do so results in the webhook being disabled (<b>enabled: false</b> and <b>status: "DISABLED_VERIFICATION_FAILED"</b>).</aside>

# Webhook Status

A [Webhook](#webhook-object) object's **enabled** attribute indicates whether a webhook is enabled or disabled, while the **status** attribute describes the *reason* that the webhook is enabled or disabled.

The following table lists all possible combinations of **enabled** and **status** attribute values.

Webhook.enabled | Webhook.status | Meaning | Notes
----- | ----- | ------ | -----
false  | **DISABLED_ADMINISTRATIVE** | Webhook has been disabled by Smartsheet support. | A webhook in this state can only be re-enabled by Smartsheet (contact <a href="mailto:api@smartsheet.com">api@smartsheet.com</a>).  Attempting to re-enable a webhook in this state results in error code 1154.
false  | **DISABLED_APP_REVOKED** | Webhook has been disabled because the third-party app associated with the webhook has had its access revoked. | This is a terminal state (that is, webhook in this state cannot be re-enabled, and attempts to do so result in error code 1153). If the third-party app's access is subsequently restored, it must create new webhooks.
false  | **DISABLED_BY_OWNER** | Webhook has been disabled by the owner. | Owner can re-enable the webhook by using the [Update Webhook](#update-webhook) operation to set **enabled** to **true**. Once the subscriber successfully acknowledges the [verification request](#webhook-verification), the webhook is enabled.
false  | **DISABLED_CALLBACK_FAILED** | Webhook has been disabled because callback was not successfully delivered to the callback URL. |  Owner can re-enable the webhook by using the [Update Webhook](#update-webhook) operation to set **enabled** to **true**. Once the subscriber successfully acknowledges the [verification request](#webhook-verification), the webhook is enabled.
false  | **DISABLED_SCOPE_INACCESSIBLE** | Webhook has been disabled because its owner lost access to the corresponding data in Smartsheet (either because the object was deleted or sharing permissions were revoked). | Webhook is automatically re-enabled if access to data is restored (for example, if deleted object is restored or sharing permissions are restored).
false  | **DISABLED_VERIFICATION_FAILED** | Webhook verification has failed. |  Owner can re-enable the webhook by using the [Update Webhook](#update-webhook) operation to set **enabled** to **true**. Once the subscriber successfully acknowledges the [verification request](#webhook-verification), the webhook is enabled.
true  | **ENABLED** | Webhook is active. | 
false | **NEW_NOT_VERIFIED** | Webhook has been created but is not enabled because it has not yet been verified. |  Owner can re-enable the webhook by using the [Update Webhook](#update-webhook) operation to set **enabled** to **true**. Once the subscriber successfully acknowledges the [verification request](#webhook-verification), the webhook is enabled.

<aside class="notice"><b>NOTES:</b><ul><li>When a Webhook object's <b>enabled</b> attribute is set to <b>true</b>, Smartsheet is monitoring for the specified events and sends a <a href="#event-callbacks">callback</a> to the <b>callbackUrl</b> when the events occur.</li><li>When a Webhook object's <b>enabled</b> attribute is set to <b>false</b>, Smartsheet is not monitoring for the specified events and does not send a callback to the <b>callbackUrl</b> when the events occur. Depending on the value of the <b>status</b> attribute, it may be possible to (re-)enable the webhook. (See below for details).</li></ul></aside>

# Webhook Callbacks

A callback is the notification that Smartsheet sends to a webhook's **callbackUrl**. There are two types of callbacks:

* [Event callback](#event-callbacks): Alerts the subscriber when the specified events have occurred in Smartsheet. This is the most common type of callback.

* [Status Change callback](#status-change-callbacks): Alerts the subscriber that a webhook has been automatically disabled due to loss of access or automatically re-enabled due to restoration of access.

A Subscriber has the ability to verify the integrity of a callback payload (that is, ensure that the message was not tampered with en route) and authenticate the identity of its sender (that is, ensure that the callback did indeed originate from Smartsheet). 
For more information, see [Authenticating Callbacks](#authenticating-callbacks-optional).

**NOTES:**

* Smartsheet webhooks do not support callbacks to servers using self-signed certificates. The callback server must be using a signed certificate from a certificate authority.
* The callbackURL cannot be a private IP address.
* The callbackURL must use one of the following ports: 443 (default for HTTPS), 8000, 8008, 8080, or 8443. 

## Event Callbacks

> Example: event callback (row created)

```json
{
  "nonce": "4b2ed20d-6f00-4b0c-8fac-082182aa9aac",
  "timestamp": "2015-10-27T17:04:23.795+0000",
  "webhookId": 4503604829677444,
  "scope": "sheet",
  "scopeObjectId": 4509506114742148,
  "events": [
    {
      "objectType": "sheet",
      "eventType": "updated",
      "id": 4509506114742148,
      "userId": 9007194052434043,
      "timestamp": "2015-10-27T17:03:15.000+0000"
    },
    {
      "objectType": "row",
      "eventType": "created",
      "id": 7129509179746180,
      "userId": 9007194052434043,
      "timestamp": "2015-10-27T17:03:15.000+0000"
    }
  ]
}
```

Smartsheet sends an event callback to notify the subscriber when the specified events occur in Smartsheet.

<aside class="warning">Any events that occur while a webhook is disabled are not communicated via callback if/when webhook is enabled.</aside>

### Callback Acknowledgement

The subscriber must respond to an event callback with a 200 [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#2xx_Success) to acknowledge that the callback was received. 

### Retry Logic

If the subscriber fails to respond with a 200 status, depending on the response, Smartsheet may retry delivery up to 14 times. (The first 7 retry attempts occur with a frequency that's determined using exponential backoff; thereafter, retry attempts occur once every three hours until all retries have been exhausted.)

Subscriber response | Is retried?
----- | -----
HTTP 201 through 299 | No
HTTP 309 through 399 | No
HTTP 400 through 499 (except 410) | Yes
HTTP 410 | No
HTTP 500 through 599 | Yes
Any other HTTP status | No
Request timeout | Yes

If the response is not retriable or retry attempts have been exhausted, the webhook is disabled (**enabled: false** and **status: "DISABLED_CALLBACK_FAILED"**).
A webhook in this state can be re-enabled if the subscriber completes the verification process. (See [Webhook Status](#webhook-status) for details.)

## Status Change Callbacks

> Status change callback (access lost):

```json
{
  "nonce" : "20d4d741-6224-446f-b9c4-bf7802326192",
  "timestamp" : "2015-10-27T14:48:40.214+0000",
  "webhookId": 2674017481058180,
  "scope" : "sheet",
  "scopeObjectId" : 3407658024757124,
  "newWebhookStatus" : "DISABLED_SCOPE_INACCESSIBLE"
}
```

> Status change callback (access restored):

```json
{
  "nonce" : "20d4d741-6224-446f-b9c4-bf7802326192",
  "timestamp" : "2015-10-27T14:48:40.214+0000",
  "webhookId": 2674017481058180,
  "scope" : "sheet",
  "scopeObjectId" : 3407658024757124,
  "newWebhookStatus" : "ENABLED"
}
```

If a webhook's owner loses access to the object that a webhook is monitoring (either because the object was deleted or the webhook owner's access to the object was revoked in Smartsheet), 
Smartsheet automatically disables the webhook and sends a status change callback to alert the subscriber of this change in status. 
The **newWebhookStatus** attribute indicates that the webhook is now disabled (because the scope is inaccessible).

If the webhook owner's access to the object is subsequently restored, 
Smartsheet automatically re-enables the webhook and sends a status change callback to alert the subscriber of this change in status. 
The **newWebhookStatus** attribute indicates that the webhook is now enabled.

## Authenticating Callbacks (optional)

> Calculating an HMAC

```shell
# See programming language tabs for language-specific examples.
```

```javascript
// Not yet implemented
```

```csharp
// Not yet implemented
```

```java
private static final String HMAC_SHA256_ALGORITHM="HmacSHA256";
private static final int HMAC_RADIX=16;

private String calculateHmac(String sharedSecret, String callbackBody)throws GeneralSecurityException{
  Mac mac = Mac.getInstance(HMAC_SHA256_ALGORITHM));
  mac.init( new SecretKeySpec(sharedSecret.getBytes(), HMAC_SHA256_ALGORITHM));

  byte[]rawHmac = mac.doFinal(callbackBody.getBytes());
  return new BigInteger(1, rawHmac).toString(HMAC_RADIX);
}
```

```python
# Not yet implemented
```

```ruby
# Not yet implemented
```

A subscriber has the ability to verify the integrity of a callback payload (that is, ensure that the message was not tampered with en route) and authenticate the identity of its sender (that is, ensure that the callback did indeed originate from Smartsheet).

When you create a new [webhook](#webhook-object), it is assigned a randomly generated **sharedSecret** value.  The shared secret is used by Smartsheet to sign callback payloads, and should not be shared with any third parties.

To authenticate a callback request:

1. Calculate the [HMAC](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code) of the webhook's **sharedSecret** and the request body.  This must be done using the [SHA-256](https://en.wikipedia.org/wiki/SHA-2) cryptographic hash algorithm.

2. Format the calculated value as a string in base 16.

3. Compare your result with the value of the **Smartsheet-Hmac-SHA256** header of the request.

If the values match, you can be sure the request originated from Smartsheet and that the data has not been tampered with.

<aside class="notice">For maximum security, you may also choose to <a href="#reset-shared-secret">reset your webhook's shared secret</a> at periodic intervals.</aside>

# Preventing Infinite Loops

> Example request: Smartsheet-Change-Agent header

```shell
// Not yet implemented
```

```javascript
// Not yet implemented
```

```csharp
// Not yet implemented
```

```java
// Not yet implemented
```

```python
smartsheet_client.with_change_agent('MyChangeAgent')
```

```ruby
# Specify updated cell values
body = {
  id: 4293147074291588,   # row Id
  cells: [
    column_id: 7036894123976580,
    value: 'new value'
  ]
}

# Update row
response = smartsheet.sheets.rows.update(
  sheet_id: 2068827774183300,
  body: body,
  header_overrides: {'Smartsheet-Change-Agent': 'MyChangeAgent'}
)
```

It's possible that an application which subscribes to callbacks (using webhooks) might react to those callbacks by using the API to make additional changes in Smartsheet. 
But, consider the following scenario:

1. **App1** creates a webhook to monitor **Sheet-A** for changes, specifying an **App-1** URL as the **callbackUrl** for the webhook.

2. **App-1** updates **Sheet-A** using the API.

3. Smartsheet detects that **Sheet-A** has changed and sends a callback to **App-1** (as the webhook specified).

4. **App-1** processes the callback, and in the course of doing so, updates **Sheet-A** again using the API.

5. Return to Step 3.

To protect against infinite loops like the one outlined above, Smartsheet introduced support for a new header that an API client can include with any API request that adds, updates, or deletes data in Smartsheet. 
Here's how it works:

* An API client includes the **Smartsheet-Change-Agent** header in any API request that adds, updates, or deletes data in Smartsheet.
  * The header value should be set to a string that the API client recognizes as identifying itself.
* If any [event callbacks](#event-callbacks) fire as a result of an API request that contains the **Smartsheet-Change-Agent** header, the value of the **Smartsheet-Change-Agent** header is included in the [callback](#callbackevent-object) in the value of the **changeAgent** attribute.
* If a webhook subscriber receives a [callback](#callbackevent-object) that contains the **changeAgent** attribute, it should evaluate the attribute value:
  * If the attribute value's comma-delimited list contains the subscriber API client's change agent value, this indicates that the change which triggered the callback *was* caused by the subscriber itself, and the subscriber can choose to ignore the callback, thus preventing an infinite loop.
  * Else, the change which triggered the callback was *not* caused by the subscriber itself, and if the subscriber is going to subsequently react to the callback by making a change in Smartsheet (via API request), the API client should append a comma and its own identifier to the original attribute value, and pass that value through using the **Smartsheet-Change-Agent** header of the API request. Doing so protects against cross-system infinite loops.

<aside class="notice">The <b>Smartsheet-Change-Agent</b> header value has a maximum length of 512 characters. If its length exceeds 512 characters, the excess is trimmed from the front of the string, so that the most recent agent information remains.</aside>

# Webhook Errors
 
The following table specifies the recommended action for each Smartsheet-specific error code. 
Use this information to implement error handling logic according to the following guidelines:

* If the error code indicates a permanent error condition, do not retry the request.
* If the error code indicates a problem that can be fixed, do not retry the request until the problem has been fixed.
* If the error code indicates a problem that could be overcome by retrying the request after a period of time, retry the request using exponential backoff.

HTTP status code | Smartsheet errorCode | Smartsheet message | Recommended Action |
-----|-----|-----|-----|
400 | 1151 | Scope '{0}', object id {1} was not found. | Do not retry without fixing the problem.
400 | 1152 | Only URLs with a protocol of 'https' are supported for attribute '{0}'. | Do not retry without fixing the problem.
403 | 1153 | This webhook cannot be enabled because access was revoked for the application that created it. | <span class="doNotRetry">Do not retry.</span>
403 | 1154 | Please contact api@smartsheet.com in order to enable this webhook. | <span class="doNotRetry">Do not retry.</span>

# <span class="customTOCSectionHeading">Webhooks Reference</span>

<%= WEBHOOKS_INTRO %>

For more information, see [Intro to Webhooks](#intro-to-webhooks).

# <%= OBJECTS %>

## Callback Object

     |     |     |
-----|-----|-----|
**scopeObjectId** | number | Id of the object that corresponds to **scope**
**webhookId** | number | Id of the corresponding webhook
**events** | [CallbackEvent](#callbackevent-object)[] | Array of CallbackEvent objects
**newWebhookStatus** | string | New status of the corresponding webhook <br/>Only returned for webhook status change [callbacks](#webhook-callbacks) (null for event callbacks).
**nonce** | string | Random value that is distinct for each callback
**scope** | string | Scope of the webhook. Currently, the only supported value is **sheet**.
**timestamp** | timestamp | Time that the callback was generated

## CallbackEvent Object

     |     |     |
-----|-----|-----|
**id** | number | Id of the object that corresponds to **objectType**. Omitted if **objectType** is **cell**. 
**columnId** | number | Only present if **objectType** is **cell**. The Id of the column where the cell is located.
**rowId** | number | Only present if **objectType** is **cell**. The Id of the row where the cell is located.
**userId** | number | The user Id of the person who caused this event.
**objectType** | string | Type of object for which event occurred. One of the following values:<ul><li>**attachment**</li><li>**cell**</li><li>**column**</li><li>**comment**</li><li>**discussion**</li><li>**row**</li><li>**sheet**</li></ul>
**changeAgent** | string | A comma-delimited list of values that uniquely identify the agents responsible for making the changes that caused the callback to occur. Only present if the change agent included the **Smartsheet-Change-Agent** header in the API request that changed data in Smartsheet. For more information, see [Preventing Infinite Loops](#preventing-infinite-loops). 
**eventType** | string | Type of event that occurred. One of the following values: **created**, **deleted**, **updated**
**timestamp** | timestamp | Time that this event occurred. A callback may contain events with different timestamps, as multiple separate events may be aggregated into a single callback request.

## ColumnIds Object

|     |     |
-----|-----|-----|
**columnIds** | number | Ids of the columns to monitor that corresponds to **subscope**

## SharedSecret Object

     |     |     |
-----|-----|-----|
**sharedSecret** | string | New value for the shared secret

## Webhook Object

> Example: Webhook object

```
{
  "id": 8444254503626628, 
  "name": "Webhook #4",
  "callbackUrl": "https://www.myApp.com/webhooks",
  "scope": "sheet",
  "scopeObjectId": 3285357287499652,
  "events": ["*.*"],
  "version": 1,
  "subscope": {
    "columnIds": [7318427511613316, 7318427511613123],
  }
}
```

     |     |     |
-----|-----|-----|
**id** | number | Webhook Id
**apiClientId** | string | API client Id corresponding to third-party app that created the webhook. Read-only. Only present if webhook was created by third-party app.
**scopeObjectId** | number | Id of the object that is subscribed to. Specified when a webhook is created and cannot be changed.
**apiClientName** | string | API client name corresponding to third-party app that created the webhook. Read-only. Only present if webhook was created by third-party app.
**callbackUrl** | string | HTTPS URL where callbacks are sent.<br/><br/>**NOTES:**<br/><br/>Smartsheet webhooks do not support callbacks to servers using self-signed certificates. The callback server must be using a signed certificate from a certificate authority.<br/><br/>The callbackURL must use one of the following ports: 443 (default for HTTPS), 8000, 8008, 8080, or 8443. 
**createdAt** | timestamp | Time of creation. Read-only.
**disabledDetails** | string | Details about the reason the webhook was disabled. Read-only. Only present when **enabled=false**.
**enabled** | Boolean | Indicates whether the webhook is on (**true**) or off (**false**)
**events** | string[] | Array of the events that are subscribed to. Currently, must be an array of size 1 that contains the string value "&#42;.&#42;", which means "all objects" and "all events".
**modifiedAt** | timestamp | Time of last modification. Read-only.
**name** | string | Webhook name
**scope** | string | Scope of the subscription. Currently, the only supported value is **sheet**. Specified when a webhook is created and cannot be changed.
**sharedSecret** | string | Shared secret for this webhook, randomly generated by Smartsheet. Read-only. See [Authenticating Callbacks](#authenticating-callbacks-optional) for details about how this value can be used.
**stats** | [WebhookStats](#webhookstats-object) | Useful statistics for this webhook.  Only returned once this webhook has performed a callback attempt.  Read-only.
**status** | string | Webhook status. Read-only. See [Webhook Status](#webhook-status) for list of possible values.
**subscope** | [columnIds](#columnIds-object)[] | Array of columns if you want to limit the subscription to a subscope. Specified when a webhook is created and cannot be changed.
**version** | number | Webhook version. Currently, the only supported value is 1. This attribute is intended to ensure backward compatibility as new webhook functionality is released. For example, a webhook with a version of 1 is guaranteed to always be sent callback objects that are compatible with the version 1 release of webhooks.

## WebhookStats Object

     |     |     |
-----|-----|-----|
**lastCallbackAttempt** | timestamp | When this webhook last made a callback attempt.
**lastCallbackAttemptRetryCount** | number | The number of retries the webhook had performed as of the last callback attempt.
**lastSuccessfulCallback** | timestamp | When this webhook last made a successful callback.

# Create Webhook

> Example request: create webhook

```shell
curl https://api.smartsheet.com/2.0/webhooks \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{	"name": "Webhook #4", "callbackUrl": "https://www.myApp.com/webhooks", "scope": "sheet", "scopeObjectId": 3285357287499652, "events": ["*.*"], "version": 1, "subscope": {"columnIds": [7318427511613316, 7318427511613123]}}'
```

```javascript
// Specify webhook details
var body = {
  name: "Webhook #4",
  callbackUrl: "https://www.myApp.com/webhooks",
  scope: "sheet",
  scopeObjectId: 3285357287499652,
  events: ["*.*"],
  version: 1,
};

// Set options
var options = {
  body: body,
};

// Create webhook
smartsheet.webhooks.createWebhook(options)
  .then(function(newWebhook) {
    console.log(newWebhook);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Webhook specification
Webhook webhook = new Webhook
{
  Name = "Webhook #4",
  CallbackUrl = "https://www.myApp.com/webhooks",
  Scope = "sheet",
  ScopeObjectId = 3285357287499652,
  Events = new string[] { "*.*" },
  Version = 1
};

// Create Webhook
Webhook newWebhook = smartsheet.WebhookResources.CreateWebhook(
  webhook
);
```

```java
// Webhook specification
Webhook webhook = new Webhook();
webhook.setCallbackUrl("https://www.myApp.com/webhooks")
  .setScope("sheet")
  .setScopeObjectId(3285357287499652L)
  .setEvents(Arrays.asList("*.*"))
  .setVersion(1)
  .setName("Webhook #4");

// Create Webhook
Webhook newWebhook = smartsheet.webhookResources().createWebhook(
  webhook
);
```

```python
Webhook = smartsheet_client.Webhooks.create_webhook(
  smartsheet.models.Webhook({
    'name': 'Webhook #4',
    'callbackUrl': 'https://www.myApp.com/webhooks',
    'scope': 'sheet',
    'scopeObjectId': 3285357287499652,
    'events': ['*.*'],
    'version': 1}))
```

```ruby
# Webhook specification
body = {
  name: 'Webhook #4',
  callback_url: 'https://www.myApp.com/webhooks',
  scope: 'sheet',
  scope_object_id: 3285357287499652,
  events: [
    '*.*'
  ],
  version: 1
}

response = smartsheet.webhooks.create(
  body: body
)
new_webhook = response[:result]
```

> Example response

```json
{
  "message": "SUCCESS",    
  "resultCode": 0,
  "result": {
    "id": 8444254503626628,
    "name": "Webhook #4",
    "scope": "sheet",
    "scopeObjectId": 3285357287499652,
    "events": [	"*.*" ],
    "callbackUrl": "http://www.myApp.com/webhooks",
    "sharedSecret": "3qo29mvjou6xt5fujukjtwzhj0",
    "enabled": false,
    "status": "NEW_NOT_VERIFIED",
    "version": 1,
    "subscope": {
      "columnIds": [7318427511613316, 7318427511613123]
    },
    "createdAt": "2015-11-03T22:25:51Z",
    "modifiedAt": "2015-11-03T22:25:51Z"
  }
}
```

`POST /webhooks`

Creates a new webhook. 

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Webhook object](#webhook-object), limited to the following attributes:<ul><li>**callbackUrl** (required)</li><li>**events** (required)</li><li>**name** (required)</li><li>**scope** (required)</li><li>**scopeObjectId** (required)</li><li>**subscope** (optional): limits the subscription to the specified columns</li><li>**version** (required)</li></ul>
<%= RETURNS %> | [Result object](#result-object), containing a [Webhook object](#webhook-object) for the newly created webhook
<%= SCOPE %> | ADMIN_WEBHOOKS

<aside class="notice">A webhook is not enabled by default when it is created. Once you've created a webhook, you can enable it by using the <a href="#update-webhook">Update Webhook</a> operation to set <b>enabled</b> to <b>true</b>.</aside>

# Delete Webhook

> Example request: delete webhook

```shell
curl https://api.smartsheet.com/2.0/webhooks/{webhookId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  webhookId: 401090454808452
};

// Delete webhook
smartsheet.webhooks.deleteWebhook(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.WebhookResources.DeleteWebhook(
  401090454808452     // long webhookId
);
```

```java
smartsheet.webhookResources().deleteWebhook(
  401090454808452L     // long webhookId
);
```

```python
smartsheet_client.Webhooks.delete_webhook(
  401090454808452)       # webhook_id
```

```ruby
smartsheet.webhooks.delete(
  webhook_id: 2674017481058180
)
```

> Example response

```json
{
  "message": "SUCCESS",    
  "resultCode": 0
}
```

`DELETE /webhooks/{webhookId}`

Deletes the webhook specified in the URL.

<aside class="notice">Using this operation permanently deletes the specified webhook. To temporarily disable a webhook, use the <a href="#update-webhook">Update Webhook</a> operation to set <b>enabled</b> to <b>false</b>.</aside>

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)
<%= SCOPE %> | ADMIN_WEBHOOKS

# Get Webhook

> Example request: get webhook

```shell
curl https://api.smartsheet.com/2.0/webhooks/{webhookId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  webhookId: 401090454808452
};

// Get webhook
smartsheet.webhooks.getWebhook(options)
  .then(function(webhook) {
    console.log(webhook);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
Webhook webhook = smartsheet.WebhookResources.GetWebhook(
  401090454808452     // long webhookId
);
```

```java
Webhook webhook = smartsheet.webhookResources().getWebhook(
  401090454808452L     // long webhookId
);
```

```python
Webhook = smartsheet_client.Webhooks.get_webhook(
  401090454808452)       # webhook_id
```

```ruby
Webhook = smartsheet.webhooks.get(
  webhook_id: 2674017481058180
)
```

> Example response

```json
{
	"id": 401090454808452,
	"name": "Webhook #5",
	"scope": "sheet",
	"scopeObjectId": 6761855684241284,
	"events": [ "*.*" ],
	"callbackUrl": "http://www.myApp.com/webhooks",
	"sharedSecret": "216ejjzdnq17mq1q8xs7d4hu8b",
	"enabled": false,
	"status": "NEW_NOT_VERIFIED",
	"version": 1,
	"createdAt": "2015-11-03T22:25:51Z",
	"modifiedAt": "2015-11-04T20:12:42Z" 
}
```

`GET /webhooks/{webhookId}`

Gets the webhook specified in the URL.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Webhook object](#webhook-object)
<%= SCOPE %> | ADMIN_WEBHOOKS

# List Webhooks

> Example request: list webhooks

```shell
curl https://api.smartsheet.com/2.0/webhooks \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  };

// List webhooks
smartsheet.webhooks.listWebhooks(options)
  .then(function(webhookList) {
    console.log(webhookList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Webhook> webhooks = smartsheet.WebhookResources.ListWebhooks(
  null            // PaginationParameters
);
```

```java
// Omit pagination parameters
PagedResult<Webhook> webhooks = smartsheet.webhookResources().listWebhooks(
  null            // PaginationParameters
);
```

```python
IndexResult = smartsheet_client.Webhooks.list_webhooks(
  page_size=100,
  page=1,
  include_all=False)
```

```ruby
response = smartsheet.webhooks.list
webhooks = response[:data]
```

> Example response

```json
{
	"pageNumber": 1,
	"pageSize": 100,
	"totalPages": 1,
	"totalCount": 1,
    "data": 
    [{
      "id": 4503604829677444,
      "name": "Webhook #5",
      "scope": "sheet",
      "scopeObjectId": 6761855684241284,
      "events": [ "*.*" ],
      "callbackUrl": "http://www.myApp.com/webhooks",
      "sharedSecret": "216ejjzfoo17mq1q8xs7d4hu8b",
      "enabled": true,
      "status": "ENABLED",
      "version": 1,
      "createdAt": "2015-11-03T14:52:21Z",
      "modifiedAt": "2015-11-04T19:05:40Z"
    }]
}
```

`GET /webhooks`

Gets the list of all webhooks that the user owns (if a [user-generated token](#authentication-and-access-tokens) was used to make the request) 
or the list of all webhooks associated with the third-party app (if a [third-party app](#third-party-app-development) made the request). 
Items in the response are ordered by API cient name > webhook name > creation date.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Webhook objects](#webhook-object)
<%= SCOPE %> | ADMIN_WEBHOOKS

# Reset Shared Secret

> Example request: reset shared secret

```shell
curl https://api.smartsheet.com/2.0/webhooks/{webhookId}/resetsharedsecret \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST
```

```javascript
// Get options
var options = {
  webhookId: 401090454808452
};

// Reset shared secret
smartsheet.webhooks.resetSharedSecret(options)
  .then(function(newSecret) {
    console.log(newSecret);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
WebhookSharedSecret newSecret = smartsheet.WebhookResources.ResetSharedSecret(
  401090454808452     // long webhookId
);
```
            
```java
WebhookSharedSecret newSecret = smartsheet.webhookResources().ResetSharedSecret(
  401090454808452L     // long webhookId
);
```

```python
Webhook = smartsheet_client.Webhooks.reset_shared_secret(
  401090454808452)       # webhook_id
```

```ruby
response = smartsheet.webhooks.reset_shared_secret(
  webhook_id: 401090454808452
)
updated_secret = response[:result]
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": { "sharedSecret": "5nua69a5foo57qdr9barbcg8f3" }
}
```

`POST /webhooks/{webhookId}/resetsharedsecret`

Resets the shared secret for the specified webhook. For more information about how a shared secret is used, see [Authenticating Callbacks](#authenticating-callbacks-optional).

This operation can be used to rotate an API client's webhooks' shared secrets at periodic intervals to provide additional security.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>  
<%= REQUEST %> | The request body should be empty.
<%= RETURNS %> | [Result object](#result-object) containing the [SharedSecret object](#sharedsecret-object)
<%= SCOPE %> | ADMIN_WEBHOOKS

# Update Webhook

> Example request: update webhook

```shell
curl https://api.smartsheet.com/2.0/webhooks/{webhookId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '{ "enabled": true }'
```

```javascript
// Specify changed values
var body = {
  enabled: true
};

// Set options
var options = {
  webhookId: 8444254503626628,
  body: body
};

// Update webhook
smartsheet.webhooks.updateWebhook(options)
  .then(function(updatedWebhook) {
    console.log(updatedWebhook);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Webhook specification
Webhook webhook = new Webhook
{
  Id = 8444254503626628,
  CallbackUrl = "https://www.myApp.com/webhooks",
  Version = 1,
  Enabled = true
}

// Update Webhook
Webhook updatedWebhook = smartsheet.WebhookResources.UpdateWebhook(
  webhook
);
```

```java
// Webhook specification
Webhook webhook = new Webhook();
webhook.setCallbackUrl("https://www.myApp.com/webhooks")
  .setVersion(1)
  .setEnabled(true)
  .setId(8444254503626628L);

// Update Webhook
Webhook updatedWebhook = smartsheet.webhookResources().updateWebhook(
  webhook
);
```

```python
Webhook = smartsheet_client.Webhooks.update_webhook(
  8444254503626628,       # webhook_id
  smartsheet_client.models.Webhook({
    'enabled': True}))
```

```ruby
# Webhook specification
body = {
  name: 'Webhook #4',
  callback_url: 'https://www.myApp.com/webhooks/nouveau',
  events: [
    '*.*'
  ],
  enabled: true,
  version: 1
}

# Update Webhook
response = smartsheet.webhooks.update(
  webhook_id: 8444254503626628,
  body: body
)
updated_webhook = response[:result]
```

> Example response

```json
{
  "message": "SUCCESS",    
  "resultCode": 0,
  "result": {
    "id": 8444254503626628,
    "name": "Webhook #4",
    "scope": "sheet",
    "scopeObjectId": 2258256056870788,
      "events": [
        "*.*"
    ],
    "callbackUrl": "http://www.myApp.com/webhooks",
    "sharedSecret": "3qo29mvjou6xt5fujukjtwzhj0",
    "enabled": true,
    "status": "ENABLED",
    "version": 1,
    "createdAt": "2015-11-03T14:52:21Z",
    "modifiedAt": "2015-11-04T19:05:40Z"
  }
}
```

`PUT /webhooks/{webhookId}`

Updates the webhook specified in the URL.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Webhook object](#webhook-object), limited to the following attributes:<ul><li>**callbackUrl** (optional)</li><li>**enabled** (optional)</li><li>**events** (optional)</li><li>**name** (optional)</li><li>**version** (optional)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the [Webhook object](#webhook-object) for the updated webhook
<%= SCOPE %> | ADMIN_WEBHOOKS

<aside class="notice"><b>Enabling a webhook</b><br/><br/>When setting a webhook's <b>enabled</b> to <b>true</b> using this operation, the behavior and result depend on the webhook's <b>status</b> and may result in a webhook <a href="#webhook-verification">verification</a> being triggered, or in some cases, an error being returned.  See <a href="#webhook-status">Webhook Status</a> for more details.</aside>

<!--aside class="notice"><b>Enabling a webhook</b><ul><li>If <b>Webhook.enabled</b>=<code>false</code> and <a href="#webhook-status"><b>Webhook.status</b></a> is any value other than "DISABLED_APP_REVOKED", "DISABLED_SCOPE_INACCESSIBLE", or "DISABLED_ADMINISTRATIVE", using this operation to set <b>Webhook.enabled</b>=<code>true</code> triggers the <a href="#webhook-verification">verification</a> process.</li><li>Verification must be successfully completed in order for the webhook to become enabled.</li></ul></aside-->

