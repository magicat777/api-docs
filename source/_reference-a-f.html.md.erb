# <span class="customTOCSectionHeading">API Reference</span>

# Attachments

Attachments can exist on a [comment](#comments) (that is, within a discussion), on a [row](#rows), or on a [sheet](#sheets).

## <%= OBJECTS %>

### Attachment Object

> Example: Attachment object

```json
{
  "id": 4539352454850436,
  "name": "at3.pdf",
  "url": "https://www.example.com",
  "attachmentType": "FILE",
  "mimeType": "application/pdf",
  "urlExpiresInMillis": 120000,
  "sizeInKb": 56,
  "createdBy": {
    "name": "Jane Roe",
    "email": "jane.roe@company.com"
  },
  "createdAt": "2017-06-09T17:41:05Z"
}
```

     |     |     |
-----|-----|-----|
id | number | Attachment Id
attachmentSubType | string | Attachment sub type, valid only for the following:<ul><li><b>EGNYTE</b> values: <b>FOLDER</b></li><li><b>GOOGLE_DRIVE</b> values: <b>DOCUMENT</b>, <b>DRAWING</b>, <b>PDF</b>, <b>PRESENTATION</b>, or <b>SPREADSHEET</b></li></ul>
attachmentType | string | Attachment type (one of <b>BOX_COM</b>, <b>DROPBOX</b>, <b>EGNYTE</b>, <b>EVERNOTE</b>, <b>FILE</b>, <b>GOOGLE_DRIVE</b>, <b>LINK</b>, or <b>ONEDRIVE</b>)
createdAt | timestamp | A timestamp of when the attachment was originally added
createdBy | [User](#user-object) | User object containing name and email of the creator of this attachment
mimeType | string | Attachment MIME type (PNG, etc.)
name | string | Attachment name
parentId | number | The Id of the parent 
parentType | string | The type of object the attachment belongs to (one of <b>COMMENT</b>, <b>ROW</b>, or <b>SHEET</b>)
sizeInKb | number | The size of the file, if the attachmentType is <b>FILE</b>  
url | string | Attachment temporary URL (files only)
urlExpiresInMillis | number | Attachment temporary URL time to live (files only) 

## Post an Attachment

Like the Smartsheet app, the Smartsheet API allows uploading files to sheets, rows, and comments. 
You can upload a file by performing either a simple upload or a multipart upload.

A [simple upload](#simple-uploads) allows you to add a single file attachment to the specified object. 
For example, you can perform a simple upload to [attach a file to a sheet](#attach-file-to-sheet), [attach a file to a row](#attach-file-to-row), or [attach a file to a comment](#attach-file-to-comment). 

A [multipart upload](#multipart-uploads) allows you to add a single file attachment to the specified object (that is, attach a file to a sheet, row, or comment), or to create an object and attach a file using a single request. 
For example, you can perform a multipart upload to [add a new comment](#add-comment) that contains a single file attachment or to [add a new discussion to a sheet](#create-discussion-on-sheet) that contains a single file attachment.

The max file size for uploads through the API is limited to 30mb.

<aside class="notice">Posting an attachment is a resource-intensive operation and incurs 10 additional requests against the rate limit.</aside>

### Multipart Uploads

A multipart upload request must include the following HTTP headers:

     |     |
-----|-----|
Content-Length | The length of the request payload.
Content-Type | Must be set to **multipart/form-data**, and include the boundary string that separates the parts in the request payload.

The request body of a multipart upload request contains one or more parts, each part containing either JSON or a file to upload. 
The request body must contain at least one part. 
Each part must start with the boundary string specified in the **Content-Type** request header, and must contain the following part headers:

     |     |
-----|-----|
Content-Disposition | Contains the following semicolon-delimited items:<ul><li>**form-data**</li><li>**name="*partname*"**</li><li>**filename="*filename*"** (only required for file parts)</li></ul>NOTE: Values specified in the Content-Disposition header must be URL-encoded.
Content-Type | The content type of the part: **application/json** for JSON objects, or the applicable MIME type for file parts

The last part in the request must be followed by the boundary string, followed by two hyphens.

The documentation for each operation that supports multipart uploads specifies the number and names of parts that are expected for the operation. 
File parts must have the part name "file", and documentation for operations which allow for JSON object parts specify the required part name for the JSON part.

The following example shows a multipart upload request that creates a comment containing the specified text and file attachment:

`POST https://api.smartsheet.com/2.0/sheets/4509093797881732/discussions/2889925487028100/comments`  
`Authorization: Bearer ll352u9jujauoqz4gstvsae05`  
`Content-Length: 29008`  
`Content-Type: multipart/form-data; boundary=----gU8h01zAAp3LagBr`  

`------gU8h01zAAp3LagBr`  
`Content-Disposition: form-data; name="comment"`  
`Content-Type: application/json`  

`{ "text": "Please review the attached image." }`  
`------gU8h01zAAp3LagBr`  
`Content-Disposition: form-data; name="file"; filename="picture.jpg"`  
`Content-Type: image/jpeg`  

*< Binary content for file >*  
`------gU8h01zAAp3LagBr--`

<aside class="notice">Most programming languages have libraries that can be used to assemble multipart requests.</aside>

### Simple Uploads

To perform this kind of upload, you must set specific headers to tell Smartsheet about the file. The following three headers are required: 

     |     |
-----|-----|
Content-Disposition | **attachment** to tell the API that a file is in the body of the `POST` request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes
Content-Length | Must be set to the size of the file, in bytes. For example to determine file size using in UNIX: <p>`$ ls -l ProgressReport.docx`<br/>`5463 ProgressReport.docx`</p>
Content-Type | Can be left blank if it is not known (but must be present); Smartsheet makes its best guess based on the extension of the file. 

The following example request shows a simple upload that adds a file attachment to a sheet:

`POST https://api.smartsheet.com/2.0/sheets/4509093797881732/attachments`  
`Authorization: Bearer ll352u9jujauoqz4gstvsae05`  
`Content-Disposition: attachment; filename="ProgressReport.docx"`  
`Content-Type: application/msword`  
`Content-Length: 5463`  

*< Binary content for file >*  

As shown in this example, the contents of the file is included in the body of the `POST` request. In most programming languages, this is done by reading the file from an input stream and writing it out to the output stream of the HTTP request. 

## Attach File to Comment

> Example request: attach file to comment

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/comments/{commentId}/attachments \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/msword" \
-H 'Content-Disposition: attachment; filename="ProgressReport.docx"' \
-H "Content-Length: FILE_SIZE" \
-X POST \
--data-binary @ProgressReport.docx
```

```javascript
// Enable FileStream
var fs = require("fs")

// Set options
var options = {
  sheetId: 1696803624483716,
  commentId: 7722333183016324,
  fileSize: 20765,
  fileName: "ProgressReport.docx",
  fileStream: fs.createReadStream("/Users/jdoe/Documents/ProgressReport.docx")
};

// Attach file to comment
smartsheet.sheets.addCommentFileAttachment(options)
  .then(function(attachment) {
      console.log(attachment);
  })
  .catch(function(error) {
      console.log(error);
  });
```

```csharp
Attachment attachment = smartsheet.SheetResources.CommentResources.AttachmentResources.AttachFile(
  9283173393803140,           // long sheetId
  1234567890234568,           // long commentId
  filePath,
  "application/msword"
);
```

```java
// Specify file to be attached
File file = new File("/Users/jdoe/Documents/ProgressReport.docx");

// Attach file to comment
Attachment attachment = smartsheet.sheetResources().commentResources().attachmentResources().attachFile(
  9283173393803140L,       // long sheetId
  1234567890234568L,       // long commentId
  file,
  "application/msword"
);
```

```python
updated_attachment = ss_client.Attachments.attach_file_to_comment(
  9283173393803140,       # sheet_id
  1234567890234568,       # comment_id
  ('ProgressReport.docx', 
    open('/path/to/ProgressReport.docx', 'rb'), 
    'application/msword')
)
```

```ruby
# Sample 1: attach file from path
response = smartsheet.sheets.comments.attachments.attach_file_from_path(
  sheet_id: 4583173393803140,
  comment_id: 4293147074291588,
  path: '/Users/jdoe/Documents/ProgressReport.docx'
)
new_attachment = response[:result]

# Sample 2: attach file
filename = '/Users/jdoe/Documents/ProgressReport.docx'
file = File.open(filename)
file_length = File.size(filename)

response = smartsheet.sheets.comments.attachments.attach_file(
  sheet_id: 4583173393803140,
  comment_id: 4293147074291588,
  file: file,
  filename: filename,
  file_length: file_length
)
new_attachment = response[:result]
```

> Example response

<%= partial "snippets/attachFile_response.md.erb" %>

`POST /sheets/{sheetId}/comments/{commentId}/attachments`

Attaches a file to the comment. <%= SUPPORTS_MULTIPART %>

<%= NEW_ATTACHMENT %>

<%= partial "snippets/attachFile_table.md.erb" %>

## Attach File to Row

> Example request: attach file to row

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/attachments \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/msword" \
-H 'Content-Disposition: attachment; filename="ProgressReport.docx"' \
-H "Content-Length: FILE_SIZE" \
-X POST \
--data-binary @ProgressReport.docx
```

```javascript
// Enable FileStream
var fs = require("fs")

// Set options
var options = {
  sheetId: 1696803624483716,
  rowId: 1049041355358596,
  fileSize: 20765,
  fileName: "ProgressReport.docx",
  fileStream: fs.createReadStream("/Users/jdoe/Documents/ProgressReport.docx")
};

// Attach file to row
smartsheet.sheets.addRowFileAttachment(options)
  .then(function(attachment) {
      console.log(attachment);
  })
  .catch(function(error) {
      console.log(error);
  });
```
	
```csharp
Attachment attachment = smartsheet.SheetResources.RowResources.AttachmentResources.AttachFile(
  9283173393803140,           // long sheetId
  0123456789012345,           // long rowId
  filePath,
  "application/msword"
);
```

```java
// Specify file to be attached
File file = new File("/Users/jdoe/Documents/ProgressReport.docx");

// Attach file to row
Attachment attachment = smartsheet.sheetResources().rowResources().attachmentResources().attachFile(
  9283173393803140L,       // long sheetId
  0123456789012345L,       // long rowId
  file,
  "application/msword"
);
```

```python
updated_attachment = ss_client.Attachments.attach_file_to_row(
  9283173393803140,       # sheet_id
  0123456789012345,       # row_id
  ('ProgressReport.docx', 
    open('/path/to/ProgressReport.docx', 'rb'), 
    'application/msword')
)
```

```ruby
# Sample 1: Attach file from path
response = smartsheet.sheets.rows.attachments.attach_file_from_path(
  sheet_id: 4583173393803140,
  row_id: 4293147074291588,
  path: '/Users/jdoe/Documents/ProgressReport.docx'
)
new_attachment = response[:result]

# Sample 2: Attach file
filename = '/Users/jdoe/Documents/ProgressReport.docx'
file = File.open(filename)
file_length = File.size(filename)

response = smartsheet.sheets.rows.attachments.attach_file(
  sheet_id: 4583173393803140,
  row_id: 4293147074291588,
  file: file,
  filename: filename,
  file_length: file_length
)
new_attachment = response[:result]
```

> Example response

<%= partial "snippets/attachFile_response.md.erb" %>

`POST /sheets/{sheetId}/rows/{rowId}/attachments`

Attaches a file to the row. <%= SUPPORTS_MULTIPART %>

<%= NEW_ATTACHMENT %>

<%= partial "snippets/attachFile_table.md.erb" %>

## Attach File to Sheet 

> Example request: attach file to sheet

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/msword" \
-H 'Content-Disposition: attachment; filename="ProgressReport.docx"' \
-H "Content-Length: FILE_SIZE" \
-X POST \
--data-binary @ProgressReport.docx
```

```javascript
// Enable FileStream
var fs = require("fs")

// Set options
var options = {
  sheetId: 1694401624483716,
  fileSize: 20765,
  fileName: "ProgressReport.docx",
  fileStream: fs.createReadStream("/Users/jdoe/Documents/ProgressReport.docx")
};

// Attach file to sheet
smartsheet.sheets.addFileAttachment(options)
  .then(function(attachment) {
      console.log(attachment);
  })
  .catch(function(error) {
      console.log(error);
  });
```

```csharp
Attachment attachment = smartsheet.SheetResources.AttachmentResources.AttachFile(
  9283173393803140,           // long sheetId
  filePath,
  "application/msword"
);
```

```java
// Specify file to be attached
File file = new File("/Users/jdoe/Documents/ProgressReport.docx");

// Attach file to sheet
Attachment attachment = smartsheet.sheetResources().attachmentResources().attachFile(
  9283173393803140L,       // long sheetId
  file,
  "application/msword"
);
```

```python
updated_attachment = ss_client.Attachments.attach_file_to_sheet(
  9283173393803140,       # sheet_id
  ('ProgressReport.docx', 
    open('/path/to/ProgressReport.docx', 'rb'), 
    'application/msword')
)
```

```ruby
# Sample 1: Attach file from path
response = smartsheet.sheets.attachments.attach_file_from_path(
  sheet_id: 4583173393803140,
  path: '/Users/jdoe/Documents/ProgressReport.docx'
)
new_attachment = response[:result]

# Sample 2: Attach file
filename = '/Users/jdoe/Documents/ProgressReport.docx'
file = File.open(filename)
file_length = File.size(filename)

response = smartsheet.sheets.attachments.attach_file(
  sheet_id: 4583173393803140,
  file: file,
  filename: filename,
  file_length: file_length
)
new_attachment = response[:result]
```

> Example response

<%= partial "snippets/attachFile_response.md.erb" %>

`POST /sheets/{sheetId}/attachments`

Attaches a file to the sheet. <%= SUPPORTS_MULTIPART %>

<%= NEW_ATTACHMENT %>

<%= partial "snippets/attachFile_table.md.erb" %>

## Attach URL to Comment

> Example request: attach URL to comment

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/comments/{commentId}/attachments \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"Search Engine", "attachmentType":"LINK", "url":"http://www.google.com"}'
```

```javascript
// Specify URL attachment
var attachment = {
  "name": "Search Engine",
  "attachmentType": "LINK",
  "url": "http://www.google.com"
};

// Set options
var options = {
  sheetId: 2252168947361668,
  commentId: 4445024629876612,
  body: attachment
};

// Attach URL to comment
smartsheet.sheets.addCommentAttachment(options)
  .then(function(updatedAttachment) {
    console.log(updatedAttachment);
  })
  .catch(function(error) {
    console.log(error);
  });
```
	
```csharp
// Create attachment
Attachment attachmentSpecification = new Attachment
{
  Url = "http://www.google.com",
  AttachmentType = AttachmentType.LINK,
  Name = "Search Engine"
};

// Attach URL to comment
Attachment updatedAttachment = smartsheet.SheetResources.CommentResources.AttachmentResources.AttachUrl(
  9283173393803140,           // long sheetId
  0123456789012345,           // long commentId
  attachmentSpecification
);
```

```java
// Create attachment
Attachment attachmentSpecification = new Attachment();
attachmentSpecification.setAttachmentType(AttachmentType.LINK)
  .setUrl("http://www.google.com")
  .setName("Search Engine");

// Attach URL to comment
Attachment updatedAttachment = smartsheet.sheetResources().commentResources().attachmentResources().attachUrl(
  9283173393803140L,       // long sheetId
  0123456789012345L,       // long commentId
  attachmentSpecification
);
```

```python
# Create URL attachment
url_spec = ss_client.models.Attachment({
  'name': 'Search Engine',
  'attachment_type': 'LINK',
  'url': 'http://www.google.com'
})

# Attach URL to comment
updated_attachment = ss_client.Attachments.attach_url_to_comment(
  9283173393803140,       # sheet_id
  0123456789012345,       # comment_id
  url_spec)
```

```ruby
# Specify options
body = {
  name: 'A URL',
  url: 'https://google.com',
  attachment_type: 'LINK'
}

# Attach URL to comment
response = smartsheet.sheets.comments.attachments.attach_url(
  sheet_id: 4583173393803140,
  comment_id: 4293147074291588,
  body: body
)
new_attachment = response[:result]
```

> Example response

<%= partial "snippets/attachURL_response.md.erb" %>

`POST /sheets/{sheetId}/comments/{commentId}/attachments`

Attaches a URL to the comment.

<%= partial "snippets/attachURL_table.md.erb" %>

## Attach URL to Row

> Example request: attach URL to row

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/attachments \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"Search Engine", "description": "A popular search engine", "attachmentType":"LINK", "url":"http://www.google.com"}'
```

```javascript
// Specify URL attachment
var attachment = {
  "name": "Search Engine",
  "description": "A popular search engine",
  "attachmentType": "LINK",
  "url": "http://www.google.com"
};

// Set options
var options = {
  sheetId: 2252168947361668,
  rowId: 4293147074291588,
  body: attachment
};

// Attach URL to row
smartsheet.sheets.addRowAttachment(options)
  .then(function(updatedAttachment) {
    console.log(updatedAttachment);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Create attachment
Attachment attachmentSpecification = new Attachment
{
  Url = "http://www.google.com",
  AttachmentType = AttachmentType.LINK,
  Name = "Search Engine"
};

// Attach URL to row
Attachment updatedAttachment = smartsheet.SheetResources.RowResources.AttachmentResources.AttachUrl(
  9283173393803140,           // long sheetId
  0123456789012345,           // long rowId
  attachmentSpecification
);
```

```java
// Create attachment
Attachment attachmentSpecification = new Attachment();
attachmentSpecification.setAttachmentType(AttachmentType.LINK)
  .setUrl("http://www.google.com")
  .setDescription("A popular search engine")
  .setName("Search Engine");

// Attach URL to row
Attachment updatedAttachment = smartsheet.sheetResources().rowResources().attachmentResources().attachUrl(
  9283173393803140L,       // long sheetId
  0123456789012345L,       // long rowId
  attachmentSpecification
);
```

```python
# Create URL attachment
url_spec = ss_client.models.Attachment({
  'name': 'Search Engine',
  'description': 'A popular search engine.'
  'attachment_type': 'LINK',
  'url': 'http://www.google.com'
})

# Attach URL to row
updated_attachment = ss_client.Attachments.attach_url_to_row(
  9283173393803140,       # sheet_id
  0123456789012345,       # row_id
  url_spec)
```

```ruby
# Specify options
body = {
  name: 'Search here',
  description: 'A search engine',
  url: 'https://google.com',
  attachment_type: 'LINK'
}

# Attach URL to row
response = smartsheet.sheets.rows.attachments.attach_url(
  sheet_id: 4583173393803140,
  row_id: 4293147074291588,
  body: body
)
new_attachment = response[:result]
```

> Example response

<%= partial "snippets/attachURL_response.md.erb" %>

`POST /sheets/{sheetId}/rows/{rowId}/attachments`

Attaches a URL to the row.

<%= partial "snippets/attachURL_table.md.erb" %>

## Attach URL to Sheet

> Example request: attach URL to sheet

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name":"Search Engine", "description": "A popular search engine", "attachmentType":"LINK", "url":"http://www.google.com"}'
```

```javascript
// Specify URL attachment
var attachment = {
  "name": "Search Engine",
  "description": "A popular search engine",
  "attachmentType": "LINK",
  "url": "http://www.google.com"
};

// Set options
var options = {
  sheetId: 2252168947361668,
  body: attachment
};

// Attach URL to sheet
smartsheet.sheets.addAttachment(options)
  .then(function(updatedAttachment) {
      console.log(updatedAttachment);
  })
  .catch(function(error) {
      console.log(error);
  });
```

```csharp
// Create attachment
Attachment attachmentSpecification = new Attachment
{
  Url = "http://www.google.com",
  AttachmentType = AttachmentType.LINK,
  Name = "Search Engine",
  Description = "A popular search engine"
};

// Attach URL to sheet
Attachment updatedAttachment = smartsheet.SheetResources.AttachmentResources.AttachUrl(
  9283173393803140,           // long sheetId
  attachmentSpecification
);
```

```java
// Create attachment
Attachment attachmentSpecification = new Attachment();
attachmentSpecification.setAttachmentType(AttachmentType.LINK)
  .setUrl("http://www.google.com")
  .setDescription("A popular search engine")
  .setName("Search Engine");

// Attach URL to sheet
Attachment updatedAttachment = smartsheet.sheetResources().attachmentResources().attachUrl(
  9283173393803140L,       // long sheetId
  attachmentSpecification
);
```

```python
# Create URL attachment
url_spec = ss_client.models.Attachment({
  'name': 'Search Engine',
  'description': 'A popular search engine.',
  'attachment_type': 'LINK',
  'url': 'http://www.google.com'
})

# Attach URL to sheet
updated_attachment = ss_client.Attachments.attach_url_to_sheet(
  9283173393803140,       # sheet_id
  url_spec)
```

```ruby
# Specify options
body = {
  name: 'Search Engine',
  description: 'A popular search engine.',
  url: 'http://www.google.com',
  attachment_type: 'LINK'
}

# Attach URL to sheet
response = smartsheet.sheets.attachments.attach_url(
  sheet_id: 4583173393803140,
  body: body
)
new_attachment = response[:result]
```

> Example response

<%= partial "snippets/attachURL_response.md.erb" %>

`POST /sheets/{sheetId}/attachments`

Attaches a URL to the sheet.

<%= partial "snippets/attachURL_table.md.erb" %>

## Delete Attachment

> Example request: delete attachment

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  sheetId: 2252168947361668,
  attachmentId: 7169782752536452,
};

// Delete attachment
smartsheet.sheets.deleteAttachment(options)
  .then(function(results) {
      console.log(results);
  })
  .catch(function(error) {
      console.log(error);
  });
```

```csharp
smartsheet.SheetResources.AttachmentResources.DeleteAttachment(
  9283173393803140,           // long sheetId
  7169782752536452            // long attachmentId
);
```

```java
smartsheet.sheetResources().attachmentResources().deleteAttachment(
  9283173393803140L,       // long sheetId
  7169782752536452L        // sheetAttachmentId
);
```

```python
ss_client.Attachments.delete_attachment(
  9283173393803140,       # sheet_id
  7169782752536452)       # attachment_id
```

```ruby
smartsheet.sheets.attachments.delete(
  sheet_id: 4583173393803140,
  attachment_id: 7169782752536452
)
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0
}
```

`DELETE /sheets/{sheetId}/attachments/{attachmentId}`

Deletes the attachment specified in the URL.  

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)
<%= SCOPE %> | WRITE_SHEETS

<aside class="notice">If the attachment has multiple versions, this deletes only the version specified by the attachmentId (each version has a different attachmentId).</aside>

## Get Attachment

> Example request: get attachment

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 9283173393803140,
  attachmentId: 4583173393803140
};

// Get attachment
smartsheet.sheets.getAttachment(options)
  .then(function(attachment) {
      console.log(attachment);
  })
  .catch(function(error) {
      console.log(error);
  });
```

```csharp
Attachment attachment = smartsheet.SheetResources.AttachmentResources.GetAttachment(
  9283173393803140,               // long sheetId
  4583173393803140                // long attachmentId
);
```

```java
Attachment attachment = smartsheet.sheetResources().attachmentResources().getAttachment(
  9283173393803140L,       // long sheetId
  4583173393803140L        // long attachmentId
);
```

```python
attachment = ss_client.Attachments.get_attachment(
  9283173393803140,       # sheet_id
  4583173393803140)       # attachment_id
```

```ruby
attachment = smartsheet.sheets.attachments.get(
  sheet_id: 9283173393803140,
  attachment_id: 4583173393803140
)
```

> Example response

```json
{
  "name": "expense_report_sample.png",
  "url": "https://api.smartsheet.com/download/aa402974cdb74cb58d9",
  "attachmentType": "FILE",
  "mimeType": "image/png",
  "id": 4583173393803140,
  "urlExpiresInMillis": 120000
}
```

`GET /sheets/{sheetId}/attachments/{attachmentId}`

Fetches a temporary URL that allows you to download an attachment. The **urlExpiresInMillis** attribute tells you how long the URL is valid.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Attachment object](#attachment-object). For file attachments, this includes a temporary URL for downloading the file.<br/><br/>Currently, the temporary URL is set to expire in 120000 milliseconds, or 2 minutes.
<%= SCOPE %> | READ_SHEETS

## List Attachments

> Example request: list attachments

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 9283173393803140
};

// List attachments
smartsheet.sheets.listAttachments(options)
  .then(function(attachmentsList) {
    console.log(attachmentsList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Attachment> attachments = smartsheet.SheetResources.AttachmentResources.ListAttachments(
  9283173393803140,           // long sheetId
  null                        // PaginationParameters
);
```

```java
// Omit pagination
PagedResult<Attachment> attachments = smartsheet.sheetResources().attachmentResources().listAttachments(
  9283173393803140L,               // long sheetId
  null                             // PaginationParameters
);
```

```python
# Sample 1: List All
response = ss_client.Attachments.list_all_attachments(
  9283173393803140,       # sheet_id
  include_all=True)
attachments = response.data

# Sample 2: Paginate the list of attachments
response = ss_client.Attachments.list_all_attachments(
  9283173393803140,       # sheet_id
  page_size=10, 
  page=1)
pages = response.total_pages
attachments = response.data
```

```ruby
response = smartsheet.sheets.attachments.list(
  sheet_id: 9283173393803140
)
attachments = response[:data]
```

> Example response

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 2,
	"data": [
		{
			"name": "att3.png",
			"attachmentType": "FILE",
			"mimeType": "image/png",
			"id": 4583173393803140,
			"parentType" : "SHEET",
			"parentId" : 341847495283
		},
		{
			"name": "att4.png",
			"attachmentType": "FILE",
			"mimeType": "image/png",
			"id": 7993173393803140,
			"parentType" : "ROW",
			"parentId" : 684956754834557
		}
	]
}
```

`GET /sheets/{sheetId}/attachments`

Gets a list of all attachments that are on the sheet, including sheet, row, and discussion-level attachments. 

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Attachment objects](#attachment-object)
<%= SCOPE %> | READ_SHEETS

## List Discussion Attachments

> Example request: list discussion attachments

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId}/attachments \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 2252168947361668,
  discussionId: 3962273862576004
};

// List discussion attachments
smartsheet.sheets.listDiscussionAttachments(options)
  .then(function(attachmentsList) {
      console.log(attachmentsList);
  })
  .catch(function(error) {
      console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Attachment> attachments = smartsheet.SheetResources.DiscussionResources.AttachmentResources.ListAttachments(
  9283173393803140,               // long sheetId
  1234567890123456,               // long discussionId
  null                            // PaginationParameters
);
```

```java
// Omit pagination
PagedResult<Attachment> attachments = smartsheet.sheetResources().discussionResources().attachmentResources().getAttachments(
  9283173393803140L,       // long sheetId
  1234567890123456L,       // long discussionId
  null                     // PaginationParameters
);
```

```python
# Sample 1: List All
response = ss_client.Attachments.list_discussion_attachments(
  9283173393803140,       # sheet_id 
  1234567890123456,       # discussion_id 
  include_all=True)
attachments = response.data

# Sample 2: Paginate the list
response = ss_client.Attachments.list_discussion_attachments(
  9283173393803140,       # sheet_id
  1234567890123456,       # discussion_id 
  page_size=10, 
  page=1)
pages = response.total_pages
attachments = response.data
```

```ruby
response = smartsheet.sheets.discussions.attachments.list(
  sheet_id: 9283173393803140,
  discussion_id: 1234567890123456
)
attachments = response[:data]
```

> Example response

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 2,
	"data": [
		{
			"name": "att3.png",
			"attachmentType": "FILE",
			"mimeType": "image/png",
			"id": 4583173393803140,
			"parentType" : "COMMENT",
			"parentId" : 341847495283
		},
		{
			"name": "att4.png",
			"attachmentType": "FILE",
			"mimeType": "image/png",
			"id": 7993173393803140,
			"parentType" : "COMMENT",
			"parentId" : 684956754834557
		}
	]
}
```

`GET /sheets/{sheetId}/discussions/{discussionId}/attachments`

Gets a list of all attachments that are in the discussion.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Attachment objects](#attachment-object)
<%= SCOPE %> | READ_SHEETS

## List Row Attachments

> Example request: list row attachments

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/attachments \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 2252168947361668,
  rowId: 4293147074291588
};

// List row attachments
smartsheet.sheets.getRowAttachments(options)
  .then(function(attachmentsList) {
      console.log(attachmentsList);
  })
  .catch(function(error) {
      console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Attachment> attachments = smartsheet.SheetResources.RowResources.AttachmentResources.ListAttachments(
  2252168947361668,               // long sheetId
  4293147074291588,               // long rowId
  null                            // PaginationParameters
);
```

```java
// Omit pagination
PagedResult<Attachment> attachments = smartsheet.sheetResources().rowResources().attachmentResources().getAttachments(
  2252168947361668L,       // long sheetId
  4293147074291588L,       // long rowId
  null                     // PaginationParameters
);
```

```python
# Sample 1: List all
response = ss_client.Attachments.list_row_attachments(
  2252168947361668,       # sheet_id 
  4293147074291588,       # row_id 
  include_all=True)
attachments = response.data

# Sample 2: Paginate the list
response = ss_client.Attachments.list_row_attachments(
  2252168947361668,       # sheet_id 
  4293147074291588,       # row_id 
  page_size=10, 
  page=1)
pages = response.total_pages
attachments = response.data
```

```ruby
response = smartsheet.sheets.rows.attachments.list(
  sheet_id: 2252168947361668,
  row_id: 4293147074291588
)
attachments = response[:data]
```

> Example response

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 2,
	"data": [
		{
			"name": "att3.png",
			"attachmentType": "FILE",
			"mimeType": "image/png",
			"id": 4583173393803140,
			"parentType" : "ROW",
			"parentId" : 341847495283
		},
		{
			"name": "att4.png",
			"attachmentType": "FILE",
			"mimeType": "image/png",
			"id": 7993173393803140,
			"parentType" : "COMMENT",
			"parentId" : 684956754834557
		}
	]
}
```

`GET /sheets/{sheetId}/rows/{rowId}/attachments`

Gets a list of all attachments that are on the row, including row and discussion-level attachments.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Attachment objects](#attachment-object)
<%= SCOPE %> | READ_SHEETS

## Versioning 

### Attach New Version

> Example request: attach new version

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId}/versions \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/msword" \
-H 'Content-Disposition: attachment; filename="ProgressReport.docx"' \
-H "Content-Length: FILE_SIZE" \
-X POST \
--data-binary @ProgressReport.docx
```

```javascript
// Enable FileStream
var fs = require("fs")

// Set options
var options = {
  sheetId: 9283173393803140,
  attachmentId: 0123456789123456,
  fileSize: 17291,
  fileName: "ProgressReport.docx",
  fileStream: fs.createReadStream("/Users/jdoe/Documents/ProgressReport.docx")
};

// Attach new version
smartsheet.sheets.attachNewVersion(options)
  .then(function(updatedAttachment) {
    console.log(updatedAttachment);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
Attachment attachment = smartsheet.SheetResources.AttachmentResources.VersioningResources.AttachNewVersion(
  9283173393803140,               // long sheetId
  0123456789123456,               // long attachmentId
  filePath,
  "application/msword"
);
```

```java
// Specify the new file to be attached
File file = new File("/Users/jdoe/Documents/ProgressReport.docx");

// Attach new version of the file
Attachment attachment = smartsheet.sheetResources().attachmentResources().versioningResources().attachNewVersion(
  9283173393803140L,       // long sheetId
  0123456789123456L,       // long attachmentId
  file,
  "application/msword"
);
```

```python
response = ss_client.Attachments.attach_new_version(
  9283173393803140,       # sheet_id
  0123456789123456,       # attachment_id
  ('ProgressReport.docx',
    open('/path/to/ProgressReport.docx', 'rb'),
    'application/msword')
)

updated_attachment = response.result
```

```ruby
# Sample 1: Attach new version from path
response = smartsheet.sheets.attachments.attach_new_version_from_path(
  sheet_id: 9283173393803140,
  attachment_id: 0123456789123456,
  path: '/Users/jdoe/Documents/ProgressReport.docx'
)
updated_attachment = response[:result]

# Sample 2: Attach new version
filename = '/Users/jdoe/Documents/ProgressReport.docx'
file = File.open(filename)
file_length = File.size(filename)

response = smartsheet.sheets.attachments.attach_new_version(
  sheet_id: 9283173393803140,
  attachment_id: 0123456789123456,
  file: file,
  filename: filename,
  file_length: file_length
)
updated_attachment = response[:result]
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": {
    "id": 4583173393803140,    
    "name": "ProgressReport.docx",
    "attachmentType": "FILE",
    "mimeType": "application/msword",
    "createdAt": "2013-02-28T21:04:56-08:00"
  },
  "version": 12
}
```

`POST /sheets/{sheetId}/attachments/{attachmentId}/versions`

Uploads a new version of a file to a sheet or row. <%= SUPPORTS_MULTIPART %>

<aside class="notice">Uploading new versions is not supported for URL attachments.</aside>

<%= partial "snippets/attachFile_table.md.erb" %>

### Delete All Versions

> Example request: delete all versions

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId}/versions \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  sheetId: 2252168947361668,
  attachmentId: 5510069950408580
};

// Delete all versions of the attachment
smartsheet.sheets.deleteAllAttachmentVersions(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.SheetResources.AttachmentResources.VersioningResources.DeleteAllVersions(
  9283173393803140,               // long sheetId
  0123456789123456                // long attachmentId
);
```

```java
smartsheet.sheetResources().attachmentResources().versioningResources().deleteAllVersions(
  9283173393803140L,       // long sheetId
  0123456789123456L        // long attachmentId
);
```

```python
ss_client.Attachments.delete_attachment_versions(
  9283173393803140,       # sheet_id
  0123456789123456)       # attachment_id
```

```ruby
smartsheet.sheets.attachments.delete_all_versions(
  sheet_id: 9283173393803140,
  attachment_id: 0123456789123456
)
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "version": 12
}
```

`DELETE /sheets/{sheetId}/attachments/{attachmentId}/versions`

Deletes all versions of the attachment corresponding to the specified attachmentId.  For attachments with multiple versions, this effectively deletes the attachment from the object that it’s attached to.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)
<%= SCOPE %> | WRITE_SHEETS

### List Versions

> Example request: list versions

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId}/versions \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 2252168947361668,
  attachmentId: 5510069950408580
};

// List versions of the attachment
smartsheet.sheets.listAttachmentVersions(options)
  .then(function(versionList) {
    console.log(versionList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Attachment> attachments = smartsheet.SheetResources.AttachmentResources.VersioningResources.ListVersions(
  2252168947361668,               // long sheetId
  5510069950408580,               // long attachmentId
  null                            // PaginationParameters
);
```

```java
// Omit pagination
PagedResult<Attachment> attachments = smartsheet.sheetResources().attachmentResources().versioningResources().listAllVersions(
  2252168947361668L,       // long sheetId
  5510069950408580L,       // long attachmentId
  null                     // PaginationParameters
);
```

```python
# Sample 1: List all
response = ss_client.Attachments.list_attachment_versions(
  2252168947361668,       # sheet_id 
  5510069950408580,       # attachment_id
  include_all=True)
versions = response.data

# Sample 2: Paginate the list
response = ss_client.Attachments.list_attachment_versions(
  2252168947361668,       # sheet_id  
  5510069950408580,       # attachment_id 
  page_size=5, 
  page=1)
pages = response.total_pages
versions = response.data
```

```ruby
response = smartsheet.sheets.attachments.list_versions(
  sheet_id: 4583173393803140,
  attachment_id: 5510069950408580
)
versions = response[:data]
```

> Example response

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 2,
	"data": [
		{
			"id": 4583173393803140,
			"name": "at3.png",
			"attachmentType": "file",
			"mimeType": "image/png",
			"createdAt": "2014-03-28T18:13:20-07:00"
		},
		{
			"id": 642523719853956,
			"name": "at3.png",
			"attachmentType": "file",
			"mimeType": "image/png",
			"createdAt": "2014-03-27T18:11:11-07:00"
		}
	]
}
```

`GET /sheets/{sheetId}/attachments/{attachmentId}/versions`

Gets a list of all versions of the given attachmentId in order from newest to oldest.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Attachment objects](#attachment-object)
<%= SCOPE %> | READ_SHEETS

<aside class="notice">To retrieve a download URL for a file attachment, use the Get Attachment operation for the specific version you want to download.</aside>

# Automation Rules

*Automation* is a catch-all term for approvals, notifications, and update requests. You can delete, update, or retrieve various automation settings through the API. You cannot create new automation rules programmatically. 

## <%= OBJECTS %>

### AutomationRule Object

> Example: AutomationRule object

```json
{
  "id": 789994550205316,
  "name": "Approval Request",
  "enabled": true,
  "createdBy": {
    "email": "john.doe@smartsheet.com"
  },
  "createdAt": "2017-12-14T18:31:55Z",
  "modifiedBy": {
    "email": "john.doe@smartsheet.com"
  },
  "modifiedAt": "2017-12-14T18:31:55Z",
  "userCanModify": true,
  "action": {
    "type": "APPROVAL_REQUEST_ACTION",
    "recipients": [
      {
        "email": "jane.roe@smartsheet.com"
      }
    ],
    "frequency": "IMMEDIATELY",
    "includeAllColumns": true,
    "includeAttachments": true,
    "includeDiscussions": true,
    "notifyAllSharedUsers": false
  }
}
```

     |     |     |
-----|-----|-----|
id | number | AutomationRule Id
action | [AutomationAction](#automationaction-object) | AutomationAction object containing information for this rule, such as type, recipients, and frequency.
createdAt | timestamp | A timestamp of when the rule was originally added.
createdBy | [User](#user-object) | User object containing name and email of the creator of this rule.
disabledReason | string | Machine-readable reason a rule is disabled. See table of [Disabled Reasons](#disabled-reasons-for-automation-rules). 
disabledReasonText | string | Descriptive reason a rule is disabled.
enabled | Boolean | If **true**, indicates that the rule is active.
modifiedAt | timestamp | The datetime for when the change was made to the rule.
modifiedBy | [User](#user-object) | User object containing the name and email of the user that made the change.
name | string | Rule name as shown in the UI.
userCanModify | Boolean | If **true**, indicates that the current user can modify the rule.

### AutomationAction Object

> Example: AutomationAction object

```json
{
  "type": "APPROVAL_REQUEST_ACTION",
  "recipients": [
    {
      "email": "jane.roe@smartsheet.com"
    }
  ],
  "frequency": "IMMEDIATELY",
  "includeAllColumns": true,
  "includeAttachments": true,
  "includeDiscussions": true,
  "notifyAllSharedUsers": false
}
```

     |     |     |
-----|-----|-----|
frequency | string | Must be one of the following values: **DAILY**, **HOURLY**, **IMMEDIATELY**, or **WEEKLY**.
includeAllColumns | Boolean | If **true** (default), all columns are included in email contents.
includeAttachments | Boolean | If **true**, includes attachments.
includedColumnIds | long[] | Specifies which columns to include in message.
includeDiscussions | Boolean | If **true**, includes discussions.
message | string | Email body.
notifyAllSharedUsers | Boolean | If **true**, notifications are sent to all users shared to the sheet. 
recipientColumnIds | long[] | Array of column Ids from which to collect email recipients.
recipients | [Recipient](#recipient-object) | Array of Recipient objects that contains one or more [Email objects](#email-object).
subject | string | Email subject line.
type | string | One of three types: **APPROVAL_REQUEST_ACTION**, **NOTIFICATION_ACTION**, or **UPDATE_REQUEST_ACTION**.

<aside class="notice">Either <b>recipientColumns</b>, <b>recipientEmails</b>, or <b>notifyAllSharedUsers</b> may be specified, but not more than one per AutomationRule object.</aside>

## Delete an Automation Rule

> Example request: delete an automation rule

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/automationrules/{automationRuleId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  sheetId: 9283173393803140,
  automationRuleId: 789004550205316
};

// Delete automation rule
smartsheet.sheets.deleteAutomationRule(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```
	
```csharp
// Not yet implemented
```

```java
// Not yet implemented
```

```python
# Not yet implemented
```

```ruby
smartsheet.sheets.automation_rules.delete(
  sheet_id: 9283173393803140,
  automation_rule_id: 789004550205316
)
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0
}
```

`DELETE /sheets/{sheetId}/automationrules/{automationRuleId}`

Deletes an automation rule.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)
<%= SCOPE %> | WRITE_SHEETS

## Get an Automation Rule

> Example request: get an automation rule

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/automationrules/{automationRuleId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 9283173393803140,
  automationRuleId: 789994550205316
};

// Get automation rule
smartsheet.sheets.getAutomationRule(options)
  .then(function(automationRule) {
    console.log(automationRule);
  })
  .catch(function(error) {
    console.log(error);
  });
```
	
```csharp
// Not yet implemented
```

```java
// Not yet implemented
```

```python
# Not yet implemented
```

```ruby
rule = smartsheet.sheets.automation_rules.get(
  sheet_id: 9283173393803140,
  automation_rule_id: 789994550205316
)
```

> Example response

```json
{
  "id": 789994550205316,
  "name": "Approval Request",
  "enabled": true,
  "createdBy": {
    "email": "john.doe@smartsheet.com"
  },
  "createdAt": "2017-12-14T18:31:55Z",
  "modifiedBy": {
    "email": "john.doe@smartsheet.com"
  },
  "modifiedAt": "2017-12-14T18:31:55Z",
  "userCanModify": true,
  "action": {
    "type": "APPROVAL_REQUEST_ACTION",
    "recipients": [
      {
        "email": "jane.roe@smartsheet.com"
      }
    ],
    "frequency": "IMMEDIATELY",
    "includeAllColumns": true,
    "includeAttachments": true,
    "includeDiscussions": true,
    "notifyAllSharedUsers": false
  }
}
```

`GET /sheets/{sheetId}/automationrules/{automationRuleId}`

Returns the specified automation rule, including any action values.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [AutomationRule object](#automationrule-object).
<%= SCOPE %> | READ_SHEETS

## List All Automation Rules

> Example request: list all automation rules

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/automationrules \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 9283173393803140
};

// List automation rules
smartsheet.sheets.listAutomationRules(options)
  .then(function(automationRulesList) {
    console.log(automationRulesList);
  })
  .catch(function(error) {
    console.log(error);
  });
```
	
```csharp
// Not yet implemented
```

```java
// Not yet implemented
```

```python
# Not yet implemented
```

```ruby
response = smartsheet.sheets.automation_rules.list(
  sheet_id: 9283173393803140
)
rules = response[:data]
```

> Example response

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 2,
  "data": [
    {
      "id": 789994550205316,
      "name": "Approval Request",
      "enabled": true,
      "createdBy": {
        "email": "john.doe@smartsheet.com"
      },
      "createdAt": "2017-12-14T18:31:55Z",
      "modifiedBy": {
        "email": "john.doe@smartsheet.com"
      },
      "modifiedAt": "2017-12-14T18:31:55Z",
      "userCanModify": true,
      "action": {
        "type": "APPROVAL_REQUEST_ACTION",
        "recipients": [
          {
            "email": "jane.roe@smartsheet.com"
          }
        ],
        "frequency": "IMMEDIATELY",
        "includeAllColumns": true,
        "includeAttachments": true,
        "includeDiscussions": true,
        "notifyAllSharedUsers": false
      }
    },
    {
      "id": 3377755522834820,
      "name": "Notification",
      "enabled": true,
      "createdBy": {
        "email": "john.doe@smartsheet.com"
      },
      "createdAt": "2017-12-14T18:31:37Z",
      "modifiedBy": {
        "email": "john.doe@smartsheet.com"
      },
      "modifiedAt": "2017-12-14T18:31:37Z",
      "userCanModify": true,
      "action": {
        "type": "NOTIFICATION_ACTION",
        "recipients": [
          {
            "email": "jane.roe@smartsheet.com"
          }
        ],
        "frequency": "DAILY",
        "includeAllColumns": true,
        "includeAttachments": true,
        "includeDiscussions": true,
        "notifyAllSharedUsers": false
      }
    }
  ]
}
```

`GET /sheets/{sheetId}/automationrules`

Returns all automation rules associated with the specified sheet. 

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [AutomationRule objects](#automationrule-object).
<%= SCOPE %> | READ_SHEETS

## Update an Automation Rule

> Example request: update an automation rule

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/automationrules/{automationRuleId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X PUT \
-d '{
	"action": {
		"type": "APPROVAL_REQUEST_ACTION",
		"recipients": [{
			"email": "jane.roe@smartsheet.com"
		}],
		"frequency": "WEEKLY"
	}
}'
```

```javascript
// Specify the changes
var body = {
  "name": "Approval Request",
  "action": {
    "type": "APPROVAL_REQUEST_ACTION",
    "recipients": [
      {
        "email": "jane.roe@smartsheet.com"
      }
    ],
    "frequency": "WEEKLY",
    "includeAllColumns": true,
    "includeAttachments": true,
    "includeDiscussions": true,
    "notifyAllSharedUsers": false
  }
};

// Set options
var options = {
  sheetId: 4583173393803140,
  automationRuleId: 789994550205316,
  body: body
  };

// Update the automation rule
smartsheet.sheets.updateAutomationRule(options)
  .then(function(updatedAutomationRule) {
    console.log(updatedAutomationRule);
  })
  .catch(function(error) {
    console.log(error);
  });
```
	
```csharp
// Not yet implemented
```

```java
// Not yet implemented
```

```python
# Not yet implemented
```

```ruby
smartsheet.sheets.automation_rules.update(
  sheet_id: 4583173393803140,
  automation_rule_id: 789994550205316,
  body: {
    name: 'Approval Request',
    enabled: true,
    action: {
      type: 'APPROVAL_REQUEST_ACTION',
      recipients: [
        {
            email: 'jane.roe@smartsheet.com'
        }
      ],
      frequency: 'WEEKLY',
      include_all_columns: true,
      include_attachments: true,
      include_discussions: true,
      notify_all_shared_users: false
    }
})
```

> Example response

```json
{
  "id": 789994550205316,
  "name": "Approval Request",
  "enabled": true,
  "createdBy": {
    "email": "john.doe@smartsheet.com"
  },
  "createdAt": "2017-12-14T18:31:55Z",
  "modifiedBy": {
    "email": "john.doe@smartsheet.com"
  },
  "modifiedAt": "2017-12-14T18:47:36Z",
  "userCanModify": true,
  "action": {
    "type": "APPROVAL_REQUEST_ACTION",
    "recipients": [
      {
        "email": "jane.roe@smartsheet.com"
      }
    ],
    "frequency": "WEEKLY",
    "includeAllColumns": true,
    "includeAttachments": true,
    "includeDiscussions": true,
    "notifyAllSharedUsers": false
  }
}
```

`PUT /sheets/{sheetId}/automationrules/{automationRuleId}`

Updates an existing automation rule.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | An [AutomationRule object](#automationrule-object). When sending an AutomationRule, you must always specify **action.type** and it must match the existing rule type.
<%= RETURNS %> | [Result object](#result-object) containing the updated [AutomationRule object](#automationrule-object)
<%= SCOPE %> | WRITE_SHEETS

## <%= RELATED %>

### Disabled Reasons for Automation Rules

     |     |
-----|-----|
APPROVAL_COLUMN_MISSING | This rule's approval status column has been deleted.
APPROVAL_COLUMN_WRONG_TYPE | The approval column must be a dropdown column.
AUTOMATION_NOT_ENABLED_FOR_ORG | To create or edit automated actions, you need to upgrade your account to a Business or Enterprise plan.
COLUMN_MISSING | A column referenced by this rule has been deleted.
COLUMN_TYPE_INCOMPATIBLE | A column referenced by this rule has been changed to an incompatible column type.
NO_POTENTIAL_RECIPIENTS | This rule has no recipients that will be able to receive notifications based on this sheet's permission settings or this account's approved domain sharing list.
NO_VALID_SELECTED_COLUMNS | All selected columns for this rule have been deleted.

# Cells

A collection of cells comprises each row in a sheet.

## <%= OBJECTS %>

### Cell Object

> Example: Cell object

```json
{
  "columnType": "TEXT_NUMBER",
  "value": "Revision 1",
  "displayValue": "Revision 1",
  "columnId": 4583173393803140
}
```

     |     |     |
-----|-----|-----|
columnId | number | The Id of the column that the cell is located in
columnType | string | See **type** definition on the [Column object](#column-object).<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **columnType**.
conditionalFormat | string | The format descriptor describing this cell's conditional format (see [Formatting](#formatting)).<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **format** and this cell has a conditional format applied.
displayValue | string | Visual representation of cell contents, as presented to the user in the UI.  See [Cell Reference](#cell-reference).
format | string | The format descriptor (see [Formatting](#formatting))<br/>Only returned if the [**include**](#row-include-flags) query string parameter contains **format** and this cell has a non-default format applied.
formula | string | The  formula for a cell, if set. NOTE: calculation errors or problems with a formula do not cause the API call to return an error code. Instead, the response contains the same value as in the UI, such as cell.value = "#CIRCULAR REFERENCE".
hyperlink | [Hyperlink](#hyperlink-object) | A hyperlink to a URL, sheet, or report
image | [Image](#image-object) | The image that the cell contains.<br/>Only returned if the cell contains an image.
linkInFromCell | [CellLink](#celllink-object) | An inbound link from a cell in another sheet.  This cell's value mirrors the linked cell's value.
linksOutToCells | [CellLink](#celllink-object)[] | An array of [CellLink objects](#celllink-object).  Zero or more outbound links from this cell to cells in other sheets whose values mirror this cell's value.
objectValue | [ObjectValue](#objectvalue-object) | [Optionally included](#row-include-flags) object representation of the cell's value. Used for updating predecessor cell values.
overrideValidation | Boolean | (Admin only) Indicates whether the cell value can contain a value outside of the validation limits (value = **true**). When using this parameter, you must also set **strict** to **false** to bypass value type checking. This property is honored for `POST` or `PUT` actions that update rows.
strict | Boolean | Set to **false** to enable lenient parsing. Defaults to **true**. <%= REQUEST_ONLY_ATTRIBUTE %> See [Cell Value Parsing](#cell-value-parsing) for more information about using this attribute. 
value | string,<br/>number,<br/>or Boolean | A string, a number, or a Boolean value -- depending on the cell type and the data in the cell.  Cell values larger than 4000 characters are silently truncated. An empty cell returns no value. See [Cell Reference](#cell-reference).

### Cell History Object

Extends the [Cell object](#cell-object).

     |     |     |
-----|-----|-----|
modifiedAt | timestamp | The datetime for when the change was made to the cell
modifiedBy | [User](#user-object) | User object containing the name and email of the user that made the change

### CellLink Object

Represents a link to a cell in a different sheet.

     |     |     |
-----|-----|-----|
columnId | number | Column Id of the linked cell
rowId | number | Row Id of the linked cell
sheetId | number | Sheet Id of the sheet that the linked cell belongs to
sheetName | string | Sheet name of the linked cell
status | string | One of the following values:<ul><li>**OK**: the link is in a good state</li><li>**BROKEN**: the row or sheet linked to was deleted</li><li>**INACCESSIBLE**: the sheet linked to cannot be viewed by this user</li><li>Several other values indicating unusual error conditions: **BLOCKED**, **CIRCULAR**, **DISABLED**, **INVALID**, or **NOT_SHARED**.</li></ul>

<aside class="notice">If status is not "OK" (for example, there is a problem with the link), any or all of the following attributes may be null: <b>columnId</b>, <b>rowId</b>, or <b>sheetId</b>.</aside>

### Duration Object

Extends the [ObjectValue object](#objectvalue-object).

In a project sheet, represents a value in a duration cell, or a lag value of a predecessor.

     |     |     |
-----|-----|-----|
days | number | The number of days for this duration.
elapsed | Boolean | If true, indicates this duration represents elapsed time, which ignores non-working time.
hours | number | The number of hours for this duration.
milliseconds | number | The number of milliseconds for this duration.
minutes | number | The number of minutes for this duration.
negative | Boolean | When used as a predecessor's lag value, indicates whether the lag is negative (if **true**), or positive (**false**). The individual duration values themselves (for example, **days**, **hours**, or **minutes**) is always positive.
objectType | string | **DURATION**
seconds | number | The number of seconds for this duration.
weeks | number | The number of weeks for this duration.

### Hyperlink Object

Represents a hyperlink to a URL, a sheet, a report, or a Sight.

     |     |     |
-----|-----|-----|
reportId | number | If non-null, this hyperlink is a link to the report with this Id.
sheetId | number | If non-null, this hyperlink is a link to the sheet with this Id.
sightId | number | If non-null, this hyperlink is a link to the Sight with this Id.
url | string | When the hyperlink is a URL link, this property contains the URL value.<br/><br/>When the hyperlink is a sheet/report/Sight link (that is, **sheetId**, **reportId**, or **sightId** is non-null), this property contains the permalink to the sheet, report, or Sight.

<aside class="notice">If the sheet, report, or Sight that is linked to was deleted, this object may be empty (that is, all values null).</aside>

### ObjectValue Object

The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object.
This object itself is not used directly.

     |     |     |
-----|-----|-----|
objectType | string | One of ABSTRACT_DATETIME, CONTACT, DATE, DATETIME, DURATION, or PREDECESSOR_LIST

### Predecessor Object

     |     |     |
-----|-----|-----|
inCriticalPath | Boolean | True if this predecessor is in the critical path. Read-only.
invalid | Boolean | True if the row referenced by **rowId** is not a valid row in this sheet, or there is a circular reference (displayed in the Smartsheet app as "#REF"). Read-only. Omitted if false.
lag | [Duration](#duration-object) | The lag value of this predecessor. Omitted if there is no lag.
rowId | number| The Id of the predecessor row
rowNumber | number | The row number of the predecessor row. Omitted if **invalid** is **true**. Read-only.
type | string | The type of the predecessor. One of **FF**, **FS**, **SF**, or **SS**.

### PredecessorList Object

> Example request: update row for a predecessor cell

```shell
curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/rows?include=objectValue' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '[{"id": "6572427401553796", "cells": [{"columnId": 7518312134403972,"objectValue": {"objectType": "PREDECESSOR_LIST","predecessors": [{"rowId": 567735454328708,"type": "FS","lag": {"objectType": "DURATION","days": 2,"hours": 4}}]}}]}]'
```

> Example response

```json
{
  "message": "SUCCESS",
  "result": [{
    "id": 6572427401553796,
    "rowNumber": 2,
    "expanded": true,
    "createdAt": "2015-01-09T11:41:55-08:00",
    "modifiedAt": "2015-02-23T15:36:07-08:00",
    "cells": [{
      "columnId": 7518312134403972,
      "value": "1FS +2d 4h",
      "objectValue": {
        "objectType": "PREDECESSOR_LIST",
        "predecessors": [{
          "rowId": 567735454328708,
          "rowNumber": 1,
          "type": "FS",
          "lag": {
            "objectType": "DURATION",
            "days": 2,
            "hours": 4
          }
        }]
      },
      "displayValue": "1FS +2d 4h"
    }]
  }]
}
```

Extends the [ObjectValue object](#objectvalue-object).

In a project sheet with dependencies enabled, the **objectValue** attribute for predecessor cells is an object of this type, which represents the predecessors for the row.

     |     |     |
-----|-----|-----|
objectType | string | PREDECESSOR_LIST
predecessors | [Predecessor](#predecessor-object)[] | Array of [Predecessor objects](#predecessor-object).

## Get Cell History

> Example request: get cell history

```shell
curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/columns/{columnId}/history?include=columnType' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 9283173393803140,
  rowId: 0123456789012345,
  columnId: 4567890123456789
};

// Get cell history
smartsheet.sheets.getCellHistory(options)
  .then(function(history) {
      console.log(history);
  })
  .catch(function(error) {
      console.log(error);
  });
```

```csharp
// Sample 1: Omit 'include' parameter and pagination parameters
PaginatedResult<CellHistory> results = smartsheet.SheetResources.RowResources.CellResources.GetCellHistory(
  9283173393803140,               // long sheetId
  0123456789012345,               // long rowId
  4567890123456789,               // long columnId
  null,                           // IEnumerable<CellInclusion> includes
  null                            // PaginationParameters
);

// Sample 2: Specify 'include' parameter with value of "COLUMN_TYPE" and 'includeAll' parameter with value of 'true'
PaginatedResult<CellHistory> results = smartsheet.SheetResources.RowResources.CellResources.GetCellHistory(
  9283173393803140,               // long sheetId
  0123456789012345,               // long rowId
  4567890123456789,               // long columnId
  new CellInclusion[] { CellInclusion.COLUMN_TYPE },
  new PaginationParameters(
    true,                       // Boolean includeAll
    null,                       // int pageSize
    null)                       // int page
);
```

```java
// Omit pagination
PagedResult<CellHistory> cellHistory = smartsheet.sheetResources().rowResources().cellResources().getCellHistory(
  9283173393803140L,       // long sheetId
  0123456789012345L,       // long rowId
  4567890123456789L,       // long columnId
  null                     // PaginationParameters
);
```

```python
# Sample 1: Get history
response = ss_client.Cells.get_cell_history(
  9283173393803140,       # sheet_id
  0123456789012345,       # row_id
  4567890123456789,       # column_id
  include_all=True)
revisions = response.data

# Sample 2: Paginate the list
response = ss_client.Cells.get_cell_history(
  9283173393803140,       # sheet_id
  0123456789012345,       # row_id
  4567890123456789,       # column_id
  page_size=5,
  page=1)
pages = response.total_pages
revisions = response.data
```

```ruby
response = smartsheet.sheets.cells.get_history(
  sheet_id: 9283173393803140,
  row_id: 0123456789012345,
  column_id: 4567890123456789
)
revisions = response[:data]
```

> Example response

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 3,
	"data": [
		{
			"columnId":4567890123456789,
			"displayValue": "Revision 3",
			"columnType": "TEXT_NUMBER",
			"value": "Revision 3",
			"modifiedAt": "2013-06-24T00:10:18Z",
			"modifiedBy" : {
				"name" : "Jane Smart",
				"email" : "jane.smart@smartsheet.com"
			}
		},
		{
			"columnId":4567890123456789,
			"displayValue": "Revision 2",
			"columnType": "TEXT_NUMBER",
			"value": "Revision 2",
			"modifiedAt": "2013-06-23T00:10:18Z",
			"modifiedBy" : {
				"name" : "Joe Smart",
				"email" : "joe.smart@smartsheet.com"
			}
		},
		{
			"columnId":4567890123456789,
			"displayValue": "Revision 1",
			"columnType": "TEXT_NUMBER",
			"value": "Revision 1",
			"modifiedAt": "2013-06-22T00:10:18Z",
			"modifiedBy" : {
				"name" : "Joe Smart",
				"email" : "joe.smart@smartsheet.com" 
			}
		}
	]
}
```

`GET /sheets/{sheetId}/rows/{rowId}/columns/{columnId}/history`

Gets the cell modification history. 

<aside class="notice">This is a resource-intensive operation and incurs 10 additional requests against the rate limit.</aside>

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional): when specified with a value of **columnType**, response includes the **columnType** attribute for each [Cell object](#cell-object)
 | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Cell History objects](#cell-history-object). For more details, see [Cell Reference](#cell-reference).
<%= SCOPE %> | READ_SHEETS

## Update Cells

To update the cells in a sheet, use the [Update Rows](#update-rows) operation.

## <%= RELATED %>

### Cell Links

Creating or updating cell links via the **cell.linkInFromCell** attribute is a special operation. 
A given row or cell update operation may contain only link updates, or no link updates. 
Attempting to mix row/cell updates with cell link updates results in error code 1115. 
Additionally, a [CellLink object](#celllink-object) can only be added to an existing cell, so the **cell.linkInFromCell** attribute is not allowed when POSTing a new row to a sheet.
 
When creating a cell link, **cell.value** must be null (the data is pulled from the linked cell).
 
A cell may not contain both a hyperlink and a cell link, so **hyperlink** and **linkInFromCell** may never both be non-null at the same time.

### Cell Reference

#### Cell Value Representation

[Cell objects](#cell-object) retrieved through the Smartsheet APIs have two main attributes representing cell values: **Cell.value**, and
**Cell.displayValue**.  A third attribute, **Cell.objectValue** is currently used only for adding and updating predecessors.
An empty cell returns no value.

**Cell.displayValue** is always a string and is only returned for certain column types (see below).  It represents the formatted value as it should
be displayed to an end-user.  For example, if a TEXT_NUMBER column is formatted as a US Dollar currency, its **value** may be a number
like 1234.5678, but its **displayValue** is "$1,234.57".

**Cell.value** represents a cell's raw value and can be one of the following primitive JSON types: string, number, or Boolean,
depending on the column type.  An empty cell returns no value. Complex types are represented as strings, formatted as described below:

<% PROJECT_COLUMN_HELP_URL = "https://help.smartsheet.com/articles/765737-project-sheet-columns-start-date-end-date-duration-complete-and-predecessors" %>

Column Type | Possible Types for Cell.value | Returns Cell.displayValue?
------------|-------------------------------|---------------------------
ABSTRACT_DATETIME | string: a project date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, or a free-form text value.<br/>number: see [Dates and Times](#dates-and-times) for how to request dates to be returned as numbers. | No.
CHECKBOX | Boolean: **true** if the checkbox is checked, **false** if unchecked, no value if the cell hasn't been touched yet.<br/>string: a free-form text value. | No.
CONTACT_LIST | string: an email address representing a contact, or a free-form text value. | Yes: same as **value** for free-form strings; for contacts, the contact's name if any, else their email address.
DATE | string: a date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, or a free-form text value.<br/>number: see [Dates and Times](#dates-and-times) for how to request dates to be returned as numbers. | No.
DURATION | string: a duration value such as "4d 6h 30m" in the user's locale, or a free-form text value.<br/>See the [Help Center](<%= PROJECT_COLUMN_HELP_URL %>) for more information on durations. | Yes: same as **value**
PICKLIST | string: one of the picklist's column options, or a free-form text value.<br/>number: numeric values | Yes: same as **value** for strings; for number values, the number with formatting applied.
PREDECESSOR	| string: a comma-delimited predecessor list such as "12FS +3d 4h, 14SS", or a free-form text value.<br/>See the [Help Center](<%= PROJECT_COLUMN_HELP_URL %>) for more information on predecessors. | Yes: same as **value**
TEXT_NUMBER	| string: free-form text values<br/>number: numeric values | Yes: same as **value** for strings; for number values, the number with formatting applied.

**Cell.objectValue** is an object representation of a cell's value and is currently used for adding or updating predecessor cell values.
It provides a more "programmer friendly" format for assembling predecessors. To update a cell's predecessors, set **objectValue** to a
[PredecessorList object](#predecessorlist-object) containing [Predecessor objects](#predecessor-object).

#### Cell Value Parsing

The flexibility in cell value data types is a powerful feature in the Smartsheet application; however, it poses a challenge
for an API in terms of parsing. Being too flexible might result in unexpected behavior. For instance, if you write code
to post a Date value to a Smartsheet and the API operation succeeds, you might assume that the date value you sent was interpreted
as date. What happens if you posted your date in the wrong format? Do you really want Smartsheet to keep the malformed date
as a string value? Probably not.
 
To address this problem, the Smartsheet API employs a simple scheme to indicate whether you want a more predictable and strict
interface or a more flexible one. By default, a cell value is expected to conform to "strict" rules for the type of the cell's column.
If an input value doesn't conform, the API returns [error code 1042](#400-level-error-codes).

If, however, you want the same flexibility as the Smartsheet Web app, you can disable the strict rules, and we’ll do our best to make
sense of it. To enable lenient parsing simply include **"strict": false** in the [Cell object](#cell-object) in your request body.

<aside class="notice">How does strict cell value parsing compare to cell validation settings? Strict cell value parsing determines how string values are parsed. It is set on a per-call basis. In contrast, cell validation is part of the column definition. The **overrideValidation** property is restricted to sheet admins and does *not* override strict parsing.</aside>

The parsing rules for the various column types are as follows:

**ABSTRACT_DATETIME**

     |     |
-----|-----|
Lenient | Smartsheet attempts to convert the string value to date using ISO 8601 date format, as well as several locale-specific date formats. If the value is a parsable date format, Smartsheet recognizes the date and stores it as such. All other values are simply text values.
Strict | The value must be a string value and a valid ISO 8601 date (YYYY-MM-DD). Alternatively, if Unix time (also known as epoch time) is used, you can use the query parameter of **numericDates** set to **true** to have Smartsheet convert epoch time to human readable dates. See [Dates and Times](#dates-and-times) for more information.

**CHECKBOX**

     |     |
-----|-----|
Lenient | Boolean values and string values of **true** and **false** are handled the same as **strict**. All other values are saved as text values.
Strict | Only Boolean values (true or false) are valid.

**CONTACT_LIST**

     |     |
-----|-----|
Lenient | If the value is a valid email address, Smartsheet handles it the same as **strict**. If not, Smartsheet saves the value as a text value.
Strict | The value must be a valid email address. If **displayValue** is set, Smartsheet uses that as the name; otherwise, if Smartsheet finds a match among the the access token owner's contacts, Smartsheet associates this cell with that existing contact.

<aside class="notice">See <a href="#contact-list-columns">Contact List Columns</a> for more information.</aside>

**DATE**

     |     |
-----|-----|
Lenient | Smartsheet attempts to convert the string value to date using ISO 8601 date format, as well as several locale-specific date formats. If the value is a parsable date format, Smartsheet recognizes the date and stores it as such. All other values are simply text values.
Strict | The value must be a string value and a valid ISO 8601 date (YYYY-MM-DD). Alternatively, if Unix time (also known as epoch time) is used, you can use the query parameter of **numericDates** set to **true** to have Smartsheet convert epoch time to human readable dates. See [Dates and Times](#dates-and-times) for more information. 

**DURATION**

     |     |
-----|-----|
Lenient | Numeric values are treated as duration values in days. String values which are valid duration strings in the user's locale are treated as durations, and any other values are treated as free-form text values.
Strict | Only valid duration strings in the user's locale are valid. Information on duration strings can be found in [Help Center](<%= PROJECT_COLUMN_HELP_URL %>).

<aside class="notice">You may use the query string parameter <b>projectParseLocale</b> with a <a href="#server-information">supported locale string</a> to force parsing in the specified locale (for example, using <b>en_US</b> lets you send in English values regardless of the user's locale).</aside>

**PICKLIST**

     |     |
-----|-----|
Lenient | All numeric and text values are valid. Formatted numbers are parsed like TEXT_NUMBER formatted numbers.
Strict | The value must be a string and must be one of the options for the picklist.

**PREDECESSOR**

     |     |
-----|-----|
N/A | Set using the **objectValue** attribute for the Cell object, which is inherently strict. See [Cell Reference](#cell-reference).

**TEXT_NUMBER**

     |     |
-----|-----|
Lenient | All numeric and text values are valid. Formatted numbers passed as text values, such as currencies ("$5,000"), percentages ("50%"), or decimals ("100.5") are parsed to their numeric equivalents, based on the locale of the access token owner,  with the proper formatting enabled for the cell.
Strict | All numeric and text values are valid and are interpreted literally.

<aside class="notice">The Smartsheet application only supports numeric values in the range -9007199254740992 to 9007199254740992. If using strict parsing, any numeric value outside that range results in <a href="#complete-error-code-list">error code 1148</a>. If using lenient parsing, the value is silently converted to text.</aside>

#### Contact List Columns

With columns of type **CONTACT_LIST**, the cell attributes **value** and **displayValue** are treated independently. 
The contact’s email address is represented by **value**, while the contact’s name (and the value displayed in the cell in the Smartsheet app) is represented by **displayValue**.
 
When creating or updating cells for a contact list column, the **displayValue** attribute works as follows:

* If **displayValue** is non-null and non-empty, the Smartsheet cell displays the value provided.
* If **displayValue** is an empty string, the Smartsheet cell displays the email address.
* If **displayValue** is null or absent, Smartsheet makes a best guess effort at filling it in with a contact’s name based on the email address.

### Hyperlinks

You can create and modify [hyperlinks](#hyperlink-object) by using any API operation that creates or updates cell data. 
When creating or updating a hyperlink, **cell.value** may be set to a string value or null. 
If null, the cell's value is derived from the hyperlink: 

* If the hyperlink is a URL link, the cell's value is set to the URL itself.
* If the hyperlink is a sheet, report, or Sight link, the cell's value is set to the sheet, report, or Sight name.

### Images in Cells

For details about working with images in cells, see [Cell Images](#cell-images).

# Cell Images

A cell image is an image that has been uploaded to a cell within a sheet.

## <%= OBJECTS %>

### Image Object

     |     |     |
-----|-----|-----|
id | string | Image Id
altText | string | Alternate text for the image
height | number | Original height (in pixels) of the uploaded image
width | number | Original width (in pixels) of the uploaded image

### ImageUrl Object

> Example: ImageUrl object

```json
{
  "imageId": "e1znCxhuZo_soEJtUmmX_A",
  "url": "https://urltoimage1.com?qs1=foo"
}
```

     |     |     |
-----|-----|-----|
imageId | string | Image Id
error | [Error object](#error-object) | Present in the [Get All Image URLs](#list-image-urls) response only if an error occurred retrieving the image.
height | number | Image height (in pixels).<br/>In the [Get All Image URLs](#list-image-urls) request, this (optional) attribute represents requested height; in the response, it represents actual height of the image returned. (See [List Image URLs](#list-image-urls).) 
url | string | Temporary URL that can be used to retrieve the image. This attribute can be present in a response but is never specified in a request.
width | number | Image width (in pixels).<br/>In the [Get All Image URLs](#list-image-urls) request, this (optional) attribute represents requested width; in the response, it represents actual width of the image returned. (See [List Image URLs](#list-image-urls).) 

### ImageUrlMap Object

     |     |     |
-----|-----|-----|
imageUrls | [ImageUrl](#imageurl-object)[] | Array of ImageUrl objects
urlExpiresInMillis | number | Milliseconds before the URLs within **imageUrls** expire

## Add Image to Cell

> Example request: add image to cell

```shell
curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/columns/{columnId}/cellimages?altText=my%20image' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: image/jpeg" \
-H 'Content-Disposition: attachment; filename="picture.jpg"' \
-H "Content-Length: FILE_SIZE" \
-X POST \
--data-binary @picture.jpg
```

```javascript
// Enable FileStream
var fs = require("fs")

// Set options
var options = {
  sheetId: 1696831624483716,
  rowId: 1049441315358596,
  columnId: 74761903175665540,
  fileSize: 458,    // Must be exact bytes; no rounding
  fileName: "img_pl_decisionshapesHold.png",
  fileStream: fs.createReadStream("/Users/jroe/Documents/images/img_pl_decisionshapesHold.png"),
  queryParameters: {
    "altText": "Caution sign",
    "overrideValidation": true
  }
 };
 
 // Add image to cell
 smartsheet.sheets.addImageToCell(options)
  .then(function(image) {
    console.log(image);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Set options
Image image = new Image
  { 
    AltText = "Caution Sign",
    Height = 16,
    Width = 16
  };

smartsheet.SheetResources.RowResources.CellResources.AddImageToCell(
  1696831624483716, // sheetId
  1049441315358596, // rowId
  74761903175665540, // columnId
  "/Users/jdoe/Documents/images/img_pl_decisionshapesHold.png",
  "image"
);
```

```java
// Set options
Image image = new Image()
  .setAltText("Caution sign")
  .setHeight(16L)
  .setWidth(16L);

smartsheet.sheetResources().rowResources().cellResources().addImageToCell(
  1639534409607044L,      // sheetId
  1049441315358596L,      // rowId
  74761903175665540L,      // columnId
  "/Users/jdoe/Documents/images/img_pl_decisionshapesHold.png",
  "image"
);
```

```python
sheet_id = 1696831624483716
column_id = 74761903175665540
row_id = 1049441315358596
caution_pic = "/Users/jdoe/Documents/images/img_pl_decisionshapesHold.png"
file_type = "png"
ss_client.Cells.add_image_to_cell(sheet_id, row_id, column_id, caution_pic, file_type)
```

```ruby
# Sample 1: Add image from path
response = smartsheet.sheets.cells.add_image_from_path(
  sheet_id: 1696831624483716,
  row_id: 1049441315358596,
  column_id: 74761903175665540,
  path: '/Users/jdoe/Documents/images/img_pl_decisionshapesHold.png'
)
new_image = response[:result]

# Sample 2: Add image
filename = '/Users/jdoe/Documents/images/img_pl_decisionshapesHold.png'
file = File.open(filename)
file_length = File.size(filename)

response = smartsheet.sheets.cells.add_image(
  sheet_id: 1696831624483716,
  row_id: 1049441315358596,
  column_id: 74761903175665540,
  file: file,
  filename: filename,
  file_length: file_length
)
new_image = response[:result]
```

> Example response

```json
{
	"message": "SUCCESS",
	"resultCode": 0,
	"result": [{
		"id": 6039340093597572,
		"rowNumber": 6,
		"siblingId": 1535740466227076,
		"expanded": true,
		"createdAt": "2017-08-28T21:29:16Z",
		"modifiedAt": "2017-08-30T08:10:47Z",
		"cells": []
	}],
	"version": 19
}
```

`POST /sheets/{sheetId}/rows/{rowId}/columns/{columnId}/cellimages`

Uploads an image to the specified cell within a sheet. 

     |     |
-----|-----|
<%= HEADERS %> | See [Simple Uploads](#simple-uploads) for information about required headers.
<%= PARAMETERS %> | **altText** (optional): url-encoded alternate text for the image<BR><%= PARAMETER_OVERRIDE_VALIDATION %>
<%= REQUEST %> | Binary content for the file
<%= RETURNS %> | [Result object](#result-object)
<%= SCOPE %> | WRITE_SHEETS

## Download Cell Image

> Example request: download cell image

```shell
// Steps 1 and 2: Locate the cell and obtain the imageId
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \

// In the response, note the columnId and ImageId
// You might also save the altText for Step 4
{
	"cells": [{
		"columnId": 6800865311909764,
		"image": {
			"id": "nQCn-Bm2ncwqsw_FX1XI_w",
			"height": 932,
			"width": 1562,
			"altText": "stanley hotel.png"
		}
	}]
}

// Step 3: Obtain a temporary image URL
curl https://api.smartsheet.com/2.0/imageurls \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"imageId": "nQCn-Bm2ncwqsw_FX1XI_w","height":40,"width": 20}]'

// In the response, note the URL and its expiration time
{
  "urlExpiresInMillis": 1800000,
  "imageUrls": [
    {
      "imageId": "nQCn-Bm2ncwqsw_FX1XI_w",
      "url": "https://aws.smartsheet.com/storageProxy/image/images/OMB9hAConFbhUdJMQ5czQEkwAj1-ErW-sXz3Dr4nDfE?expirationDate=2017-07-25T22%3A13%3A07%2B0000&height=40&width=20&hmac=e%2BfIb0ffUK%2BZeA2hbGx%2Fj8YcWUY%3D"
    }
  ]
}

// Step 4: Download the image
curl -o "stanley_hotel.png" "https://aws.smartsheet.com/storageProxy/image/images/OMB9hAConFbhUdJMQ5czQEkwAj1-ErW-sXz3Dr4nDfE?expirationDate=2017-07-25T22%3A01%3A33%2B0000&height=40&width=20&hmac=5t%2FHs9%2BXTk5cNhyDax9ZgcbepKI%3D"
```

```javascript
// [todo]
```

```csharp
long sheetId = 1639534409607044;
long rowId = 3344087179913092;
long columnId = 1735559124150148;

//  Step 1: Identify the cell that contains an image
Row row = smartsheet.SheetResources.RowResources.GetRow(
  sheetId,
  rowId,
  null,
  null);
Cell cell = row.Cells.First(c => c.ColumnId == columnId);

// Step 2: Get image info from cell
Image image = cell.Image;
string imageId = image.Id;
string localFileName = image.AltText;

// Step 3: Build list of image urls
ImageUrl[] imageUrls = new ImageUrl[] { new ImageUrl { ImageId = imageId } };

string temporaryUrl = smartsheet.ImageUrlResources.GetImageUrls(imageUrls).ImageUrls[0].Url;

// Step 4: Download the image
System.Net.WebClient client = new System.Net.WebClient();
client.DownloadFile(temporaryUrl, localFileName);
```

```java
long sheetId = 5670346721388420L;
long rowId = 3344087179913092L;
long columnId = 1735559124150148L;

//  Step 1: Identify the cell that contains an image
Row row = smartsheet.sheetResources().rowResources().getRow(
  sheetId,
  rowId,
  null,
  null);
Cell cell = row.getCells().stream().filter(c -> c.getColumnId() == columnId).findFirst().orElse(null);

// Step 2: Get image info from cell
Image image = cell.getImage();
String imageId = image.getId();
String localFileName = image.getAltText();

// Step 3: Build list of image urls
ImageUrl imageUrl = new ImageUrl();
imageUrl.setImageId(imageId);
List<ImageUrl> imageUrls = Arrays.asList(imageUrl);

String temporaryUrl = smartsheet.imageUrlResources().getImageUrls(imageUrls).getImageUrls().get(0).getUrl();

// Step 4: Download the image
CloseableHttpClient httpclient = HttpClients.createDefault();
HttpGet httpget = new HttpGet(temporaryUrl);
CloseableHttpResponse response = httpclient.execute(httpget);
HttpEntity entity = response.getEntity();
FileOutputStream fos = new FileOutputStream(localFileName);
entity.writeTo(fos);
fos.close();
```

```python
sheetId = 1639534409607044
rowId = 3344087179913092
columnId = 1735559124150148

# Steps 1 and 2: Locate the cell and obtain the imageId
row = ss_client.Sheets.get_row(sheet_id, row_id)
cell = row.get_column(column_id)
image = cell.image
image_id = image.id

# Automate using Alt Text as the file name
filename = getattr(image, 'alt_text', default_filename)

# Step 3: Obtain a temporary image URL
imageUrl = ss_client.models.ImageUrl( { "imageId": image_id } )
response = ss_client.Images.get_image_urls([imageUrl])
url = response.image_urls[0].url

# Step 4: Download the image
import requests
response = requests.get(url)
if response.status_code == 200:
  with open(filename, 'wb') as f:
    f.write(response.content)
```

```ruby
require 'open-uri'

sheet_id = 1639534409607044
row_id = 3344087179913092
column_id = 1735559124150148
default_filename = 'my_image.png'

# Steps 1 and 2: Locate the cell and obtain the imageId
row = smartsheet.sheets.rows.get(sheet_id: sheet_id, row_id: row_id)
cell = row[:cells].select { |cell| cell[:column_id] == column_id }.first
image = cell[:image]
image_id = image[:id]

# Automate using Alt Text as the file name
filename = image[:alt_text] || default_filename

# Step 3: Obtain a temporary image URL
response = smartsheet.sheets.list_image_urls(body: [{image_id: image_id}])
url = response[:image_urls][0][:url]

# Step 4: Download the image
image_download = open(url)
IO.copy_stream(image_download, filename)
```

Downloading a cell image is a multi-step process. This sample downloads a cell image to a local file. The cell is specified by sheet Id, row Id, and column Id.

Click the appropriate language tab in the rightmost pane to see sample code.

**Step 1. Locate the cell**

Get the desired row, then locate the desired cell based on the column Id.

**Step 2. Obtain the image Id**

Cell images are identified by an image Id, which is stored in a cell Image object. (The image Id is the key to the image and should be kept secure.)

When a user uploads an image to a cell, Smartsheet uses the original file name as the image "alt text." This example uses that alt text value as the local file name.

**Step 3. Obtain a temporary image URL**

The `POST /imageurls` command creates a temporary URL that you can use to download the image. The URL expires after a short time, which is reported in the response.

**Step 4. Download the image**

Once you have the URL, issue a standard HTTP GET to download the image and save as a local file.  

## List Image URLs

> Example request: list image URLs

```shell
curl https://api.smartsheet.com/2.0/imageurls \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"imageId": "e1znCxhuZo_soEJtUmmX_A","height":40,"width": 20},{"imageId": "g2jdKdfhQa_abKJmPnhC_B","height":100,"width": 50}]'
```

```javascript
// Set options
var options = {
  body: [{
    imageId: "jpbGklqdfZuL4Jw-kZhdZA",
    width: 256,
    height: 256
  }]
};

// List image URLs
smartsheet.images.listImageUrls(options)
  .then(function(temporaryUrls) {
    console.log(temporaryUrls);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Build list of image urls
ImageUrl[] imageUrls = new ImageUrl[] { new ImageUrl { ImageId = "jpbGklqdfZuL4Jw-kZhdZA" } };

string temporaryUrl = smartsheet.ImageUrlResources.GetImageUrls(imageUrls).ImageUrls[0].Url;
```

```java
// Build list of image urls
ImageUrl imageUrl = new ImageUrl()
  .setImageId("jpbGklqdfZuL4Jw-kZhdZA");
List<ImageUrl> imageUrls = Arrays.asList(imageUrl);

String temporaryUrl = smartsheet.imageUrlResources().getImageUrls(imageUrls).getImageUrls().get(0).getUrl();
```

```python
imageUrl = ss_client.models.ImageUrl(
  {
    "imageId": 'jpbGklqdfZuL4Jw-kZhdZA',
    "height": 256,
    "width": 256
  }
)

response = ss_client.Images.get_image_urls([imageUrl])
url = response.image_urls[0].url
```

```ruby
body = [
  {
    image_id: 'jpbGklqdfZuL4Jw-kZhdZA',
    height: 100,
    width: 100
  }
]

image_urls = smartsheet.sheets.list_image_urls(
  body: body
)
```

> Example response

```json
{
  "urlExpiresInMillis": 1800000,
  "imageUrls": [{
    "imageId": "jpbGklqdfZuL4Jw-kZhdZA",
    "url": "https://urltoimage1.com?qs1=foo"
  },
  {
    "imageId": "g2jdKdfhQa_abKJmPnhC_B",
    "error": {
      "errorCode": 5001,
      "message": "You do not have permission to view this image."
  }}]
}
```

`POST /imageurls`

Gets a list of URLs that can be used to retrieve the specified cell images.

<aside class="notice">If an error is encountered for any of the requested images, the corresponding <b>ImageUrl</b> object in the response contains an <b>error</b> attribute that describes the error. (See example response in the rightmost pane.) Certain errors are not detected until the returned URL is referenced.</aside>

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Array of [ImageUrl objects](#imageurl-object), with the following attributes:<ul><li><b>imageId</b> (required)</li><li><b>height</b> (optional)</li><li><b>width</b> (optional)</li></ul>Each image in the response is sized according to which dimensions were specified by the request:<ul><li>If neither <b>height</b> nor <b>width</b> is specified, the image is returned in its original size.</li><li>If both <b>height</b> and <b>width</b> are specified, image is sized using those measurements.</li><li>If either <b>height</b> or <b>width</b> is specified (that is, one or the other -- not both), the image is automatically scaled using that measurement.</li></ul>Additionally, the following rules apply:<ul><li>If the requested image size is less than or equal to the actual image size, the returned image size matches the requested size.</li><li>If the requested image size is larger than the actual image size, the returned image size matches the actual image size.</li></ul>
<%= RETURNS %> | [ImageUrlMap object](#imageurlmap-object)
<%= SCOPE %> | READ_SHEETS

To retrieve images, see the workflow in [Download Cell Image](#download-cell-image).

## Remove Image from Cell

To remove an image from a cell (and set cell contents to either empty or to another value), use the [Update Rows](#update-rows) operation to set **cell.value** to the new value.

## Update Cell Image

A cell image can be updated as follows:

* To change the alternate text of an image, use the [Update Rows](#update-rows) operation.
* To replace an existing image with a new image, use the [Add Image to Cell](#add-image-to-cell) operation.
* To add an image to a cell that previously contained another type of data, use the [Add Image to Cell](#add-image-to-cell) operation.

# Columns

A column is a component of a sheet or report. 

## <%= OBJECTS %>

### Column Object

> Example: Column object

```json
{
	"id": 7960873114331012,
	"index": 0,
	"symbol": "STAR",
	"title": "Favorite",
	"type": "CHECKBOX",
	"validation": false
}
```

     |     |     |
-----|-----|-----|
id | number | Column Id
autoNumberFormat | [AutoNumberFormat](#autonumberformat-object) | Present when **systemColumnType** == **AUTO_NUMBER**
contactOptions | [ContactOption](#contactoption-object)[] | Array of ContactOption objects to specify a pre-defined list of values for the column. Column **type** must be **CONTACT_LIST** 
format | string | The format descriptor (see [Formatting](#formatting))<br/>Only returned if the **include** query string parameter contains **format** and this column has a non-default format applied to it.
hidden | Boolean | Indicates whether the column is hidden
index | number | Column index or position. This number is zero-based. 
locked | Boolean | Indicates whether the column is locked. In a response, a value of **true** indicates that the column has been locked by the sheet owner or the admin.
lockedForUser | Boolean | Indicates whether the column is locked for the requesting user. This attribute may be present in a response, but cannot be specified in a request.
options | string[] | Array of the options available for the column
primary | Boolean | Returned only if the column is the Primary Column (value = **true**)
symbol | string | When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](#symbol-columns).
systemColumnType | string | When applicable, one of: **AUTO_NUMBER**, **CREATED_BY**, **CREATED_DATE**, **MODIFIED_BY**, **MODIFIED_DATE**. See [System Columns](#system-columns).
tags | string[] | Set of tags to indicate special columns. Each element in the array is set to one of the following values:<ul><li>**CALENDAR_END_DATE**</li><li>**CALENDAR_START_DATE**</li><li>**GANTT_ASSIGNED_RESOURCE**</li><li>**GANTT_DISPLAY_LABEL**</li><li>**GANTT_DURATION**</li><li>**GANTT_END_DATE**</li><li>**GANTT_PERCENT_COMPLETE**</li><li>**GANTT_PREDECESSOR**</li><li>**GANTT_START_DATE**</li></ul>
title | string | Column title
type | string | One of:<ul><li>**ABSTRACT_DATETIME**</li><li>**CHECKBOX**</li><li>**CONTACT_LIST**</li><li>**DATE**</li><li>**DATETIME**</li><li>**DURATION**</li><li>**PICKLIST**</li><li>**PREDECESSOR**</li><li>**TEXT_NUMBER**</li></ul>See [Column Types](#column-types).
validation | Boolean | Indicates whether validation has been enabled for the column (value = **true**)
width | number | Display width of the column in pixels

### ContactOption Object

     |     |     |
-----|-----|-----|
email | string | A parsable email address.
name | string | Can be a user's name, display name, or free text, such as a job class or TBD.

<aside class="notice"> Either **name* or **email** (or both) must be specified.</aside>

## Add Columns

> Example request: add columns

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"title": "New Picklist Column 1", "type": "PICKLIST", "options": ["First", "Second", "Third"], "index": 4} , {"title":"New Date Column", "type":"DATE", "validation":"true", "index":4},]'
```

```javascript
// Specify new columns
var column = [
  {
    "title": "New Picklist Column 1",
    "type": "PICKLIST",
    "options": [
      "First",
      "Second",
      "Third"
    ],
    "index": 4
  },
  {
    "title": "New Date Column",
    "type": "DATE",
    "validation": true,
    "index": 4
  }
];

// Set options
var options = {
  sheetId: 2252168947361668,
  body: column
  };

// Add columns to the sheet
smartsheet.sheets.addColumn(options)
  .then(function(newColumns) {
      console.log(newColumns);
  })
  .catch(function(error) {
      console.log(error);
  });
```

```csharp
// Create a column
Column columnA = new Column
{
  Title = "New Picklist Column 1",
  Index = 4,
  Type = ColumnType.PICKLIST,
  Options = new string[] { "First", "Second", "Third" }
};

// Create another column
Column columnB = new Column
{
  Title = "New Date Column",
  Index = 4,
  Type = ColumnType.DATE
};

// Add columns to the sheet
IList<Column> newColumns = smartsheet.SheetResources.ColumnResources.AddColumns(
  2252168947361668, // long sheetId
  new Column[] { columnA, columnB }
);
```

```java
// Create columns
Column column1 = new Column()
  .setTitle("New Picklist Column 1")
  .setType(ColumnType.PICKLIST)
  .setIndex(4)
  .setOptions(Arrays.asList("First", "Second", "Third"));

Column column2 = new Column()
  .setTitle("New Date Column")
  .setType(ColumnType.DATE)
  .setValidation(true)
  .setIndex(4);

// Add columns to the sheet
List<Column> newColumns = smartsheet.sheetResources().columnResources().addColumns(
  2252168947361668L,       // long sheetId
  Arrays.asList(column1, column2)
);
```

```python
# Create the columns
column1 = ss_client.models.Column({
  'title': 'New Picklist Column 1',
  'type': 'PICKLIST',
  'options': [
    'First',
    'Second',
    'Third'
  ],
  'index': 4
})

column2 = ss_client.models.Column({
  'title': 'New Date Column',
  'type': 'DATE',
  'validation': 'true',
  'index': 4
})

# Add columns to the sheet
new_columns = ss_client.Sheets.add_columns(
  2252168947361668,       # sheet_id
  [column1, column2])
```

```ruby
# Define options
body = {
  title: 'New Picklist Column 1',
  type: 'PICKLIST',
  options: [
    'First',
    'Second',
    'Third'
  ],
  index: 4
},
{
  title: "New Date Column",
  type: 'DATE',
  validation: true,
  index: 4
}

# Add the column
new_columns = smartsheet.sheets.columns.add(
  sheet_id: 2252168947361668,
  body: body
)
```

> Example response

```json
{
  "message": "SUCCESS",    
  "resultCode": 0,
  "result": [
    {
      "id": 9007194052434043,
      "index": 4,
      "title": "New Picklist Column 1",
      "type": "PICKLIST",
      "options": [
        "First",
        "Second",
        "Third"
      ],
      "validation": false,
      "width": 150
    },
    {
      "id": 4503594425063547,
      "index": 4,
      "title": "New Date Column",
      "type": "DATE",
      "validation": true,
      "width": 150
    }
  ]
}
```

`POST /sheets/{sheetId}/columns`

Inserts one or more columns into the sheet specified in the URL. <%= SUPPORTS_MULTIPART %>

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Column object](#column-object) or an array of Column objects, with the following attributes:<ul><li>**title**</li><li>**type**</li><li>**autoNumberFormat** (optional)</li><li>**index** (zero-based, optional)</li><li>**locked** (optional)</li><li>**options** (optional)</li><li>**symbol** (optional)</li><li>**systemColumnType** (optional)</li><li>**validation** (optional)</li><li>**width** (optional)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the newly created columns -- either a single [Column object](#column-object) or an array of Column objects, corresponding to what was specified in the request.
<%= SCOPE %> | ADMIN_SHEETS

<aside class="notice">If multiple columns are specified in the request, the <b>index</b> attribute must be set to the same value for all columns. Columns are inserted into the sheet starting at the specified position (<b>index</b>), in the sequence that the columns appear in the request.</aside>

## Delete Column

> Example request: delete column

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns/{columnId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  sheetId: 9283173393803140,
  columnId: 0123456789012345
};

// Delete column
smartsheet.sheets.deleteColumn(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.SheetResources.ColumnResources.DeleteColumn(
  9283173393803140,               // long sheetId
  0123456789012345                // long columnId
);
```

```java
smartsheet.sheetResources().columnResources().deleteColumn(
  9283173393803140L,       // long sheetId
  0123456789012345L        // long columnId
);
```

```python
ss_client.Sheets.delete_column(
  9283173393803140,       # sheet_id
  0123456789012345)       # column_id
```

```ruby
smartsheet.sheets.columns.delete(
  sheet_id: 9283173393803140,
  column_id: 0123456789012345
)
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0
}
```

`DELETE /sheets/{sheetId}/columns/{columnId}`

Deletes the column specified in the URL.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)
<%= SCOPE %> | ADMIN_SHEETS

## Get Column

> Example request: get column

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns/{columnId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 9283173393803140,
  columnId: 7960873114331012
};

// Get column
smartsheet.sheets.getColumns(options)
  .then(function(column) {
    console.log(column);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Sample 1: Omit 'include' parameter
Column column = smartsheet.SheetResources.ColumnResources.GetColumn(
  9283173393803140,               // long sheetId
  7960873114331012,               // long columnId
  null                            // IEnumerable<ColumnInclusion> includes
);

// Sample 2: Specify 'include' parameter with value of "FILTERS"
Column column = smartsheet.SheetResources.ColumnResources.GetColumn(
  9283173393803140,               // long sheetId
  7960873114331012,               // long columnId
  new ColumnInclusion[] { ColumnInclusion.FILTERS }
);
```

```java
// Sample 1: Omit 'include' parameter
Column column = smartsheet.sheetResources().columnResources().getColumn(
  9283173393803140L,       // long sheetId
  7960873114331012L,       // long columnId
  null                     // EnumSet<ColumnInclusion> includes
);

// Sample 2: Specify 'include' parameter with value of "FILTERS"
Column column = smartsheet.sheetResources().columnResources().getColumn(
  9283173393803140L,       // long sheetId
  7960873114331012L,       // long columnId
  EnumSet.of(ColumnInclusion.FILTERS)
);
```

```python
column = ss_client.Sheets.get_column(
  9283173393803140,       # sheet_id
  7960873114331012)       # column_id
```

```ruby
column = smartsheet.sheets.columns.get(
  sheet_id: 9283173393803140,
  column_id: 7960873114331012
)
```

> Example response

```json
{
	"id": 7960873114331012,
	"index": 2,
	"symbol": "STAR",
	"title": "Favorite",
	"type": "CHECKBOX",
    "validation": false
}
```

`GET /sheets/{sheetId}/columns/{columnId}`

Gets the column specified in the URL.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Column object](#column-object)
<%= SCOPE %> | READ_SHEETS

## List Columns

> Example request: list columns

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 9283173393803140
};

// List columns
smartsheet.sheets.getColumns(options)
  .then(function(columnList) {
    console.log(columnList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit 'include' parameter and pagination parameters
PaginatedResult<Column> columns = smartsheet.SheetResources.ColumnResources.ListColumns(
  9283173393803140,               // long sheetId
  null,                           // IEnumerable<ColumnInclusion> include
  null                            // PaginationParameters
);
```

```java
// Omit 'include' parameter and pagination parameters
PagedResult<Column> columns = smartsheet.sheetResources().columnResources().listColumns(
  9283173393803140L,                   // long sheetId
  null,                                // EnumSet<ColumnInclusion> includes
  null                                 // PaginationParameters
);
```

```python
response = ss_client.Sheets.get_columns(
  9283173393803140,       # sheet_id
  include_all=True)
columns = response.data
```

```ruby
response = smartsheet.sheets.columns.list(
  sheet_id: 9283173393803140
)
columns = response[:data]
```

> Example response

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 3,
	"data": [
		{
			"id": 7960873114331012,
			"index": 0,
			"symbol": "STAR",
			"title": "Favorite",
			"type": "CHECKBOX",
        "validation": false
		},
		{
			"id": 642523719853956,
			"index": 1,
			"primary": true,
			"title": "Primary Column",
			"type": "TEXT_NUMBER",
        "validation": false
		},
		{
			"id": 5146123347224452,
			"index": 2,
			"title": "Status",
			"type": "PICKLIST",
        "validation": false
		}
	]
}
```

`GET /sheets/{sheetId}/columns`

Gets a list of all columns belonging to the sheet specified in the URL.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Column objects](#column-object)
<%= SCOPE %> | READ_SHEETS

## Update Column

> Example request: update column

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns/{columnId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X PUT \
-d '{"title":"First Column","index":0, "type" : "PICKLIST", "options" :["One","Two"]}'
```

```javascript
// Specify column properties
var column = {
  "index": 0,
  "title": "First Column",
  "type": "PICKLIST",
  "options": ["One", "Two"]
};

// Set options
var options = {
  sheetId: 2252168947361668,
  columnId: 5005385858869124,
  body: column
  };

// Update column
smartsheet.sheets.updateColumn(options)
  .then(function(updatedColumn) {
    console.log(updatedColumn);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify column properties
Column columnSpecification = new Column
{
  Id = 5005385858869124,
  Title = "First Column",
  Index = 0,
  Type = ColumnType.PICKLIST,
  Options = new string[] { "One", "Two"}
};
            
// Update column
Column updatedColumn = smartsheet.SheetResources.ColumnResources.UpdateColumn(
  2252168947361668,   // sheetId
  columnSpecification
);
```

```java
// Specify column properties
Column columnSpecification = new Column(5005385858869124L)
  .setTitle("First Column")
  .setIndex(0)
  .setType(ColumnType.PICKLIST)
  .setOptions(Arrays.asList("One", "Two"));

// Update column
Column updatedColumn = smartsheet.sheetResources().columnResources().updateColumn(
  2252168947361668L,   // sheetId
  columnSpecification
);
```

```python
# Specify column properties
column_spec = ss_client.models.Column({
  'title': 'First Column',
  'type': 'PICKLIST',
  'options': ["One", "Two"],
  'index': 0
})

# Update column
response = ss_client.Sheets.update_column(
  2252168947361668,       # sheet_id
  5005385858869124,       # column_id
  column_spec)

updated_column = response.result
```

```ruby
# Specify column properties
body = {
  title: 'First Column',
  type: 'PICKLIST',
  options: [
    'One',
    'Two'
  ]
}

# Update column
response = smartsheet.sheets.columns.update(
  sheet_id: 2252168947361668,
  column_id: 5005385858869124,
  body: body
)
updated_column = response[:result]
```

> Example response

```json
{
  "message": "SUCCESS",
  "result": {
    "id": 5005385858869124,
    "index": 0,
    "options" : ["One", "Two"],
    "title": "First Column",
    "type": "PICKLIST",
    "validation": false
  },
  "resultCode": 0
}
```

`PUT /sheets/{sheetId}/columns/{columnId}`

Updates properties of the column, moves the column, and/or renames the column.

**NOTES:**

* You cannot change the type of a Primary column.
* While dependencies are enabled on a sheet, you can't change the type of any special calendar/Gantt columns.
* If the column type is changed, all cells in the column are converted to the new column type and column validation is cleared.
* Type is optional when moving or renaming, but required when changing type or dropdown values.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | A [Column object](#column-object) that contains the following attributes:<ul><li>**index**</li><li>**title** -- required when creating a column, optional after that</li><li>**autoNumberFormat** (optional)</li><li>**contactOptions** (optional) -- must have set column type to **CONTACT_LIST**</li><li>**format** (optional)</li><li>**hidden** (optional)</li><li>**locked** (optional)</li><li>**options** (optional)</li><li>**symbol** (optional)</li><li>**systemColumnType** (optional)</li><li>**type** (optional)</li><li>**validation** (optional)</li><li>**width** (optional)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the [Column object](#column-object) that was modified
<%= SCOPE %> | ADMIN_SHEETS

## <%= RELATED %>

### Column Types

Smartsheet supports the following standard column types, which are represented in a [Column object](#column-object) with a **type** attribute set to one of the following:

Column Type | Column.type Value | Notes |
------------|--------------------------|-------|
Checkbox 		| CHECKBOX		| Checkbox, star, and flag types
Contact List	| CONTACT_LIST	| List containing contacts or roles for a project. **NOTE:** You can use the [contactOptions](#contactoption-object) property to specify a pre-defined list of values for the column, which can also become lanes in card view. 
Date			| DATE			|
Date/Time 		| ABSTRACT_DATETIME | Represents a project sheet's start and end dates.<br/>**Only for dependency-enabled project sheets**<br/>The API does not support setting a column to this type. (This can only be done through the Smartsheet Web app when configuring a project sheet.) Additionally, the API does not support updating data in the "End Date" column under any circumstance, and does not support updating data in the "Start Date" column if "Predecessor" is set for that row.
Date/Time		| DATETIME		| Used only by the following system-generated columns: <ul><li>Created (Date) (**Column.systemColumnType** = **CREATED_DATE**)</li><li>Modified (Date) (**Column.systemColumnType** = **MODIFIED_DATE**)</li></ul>
Dropdown List	| PICKLIST		| Custom, RYG, Harvey ball, priority types, etc.
Duration		| DURATION		| **Only for dependency-enabled project sheets**<br/>The API does not support setting a column to this type. (This can only be done through the Smartsheet Web app when configuring a project sheet.)
Predecessor		| PREDECESSOR	| Defines what must happen first in a project flow. For more information, see the [Predecessor object](#predecessor-object). **Only for dependency-enabled project sheets** 
Text/Number		| TEXT_NUMBER	|

<aside class="notice">See the <a href="#cell-reference">Cell Reference</a> section for information on getting and setting cell values for the different column types.</aside>

#### Symbol Columns

In addition to the basic column types above, the Smartsheet app also supports columns that display symbols. These are simply specialized columns of type **CHECKBOX** or **PICKLIST**,
whose **symbol** attribute is set to one of the values below:

**Symbols for CHECKBOX columns:**

Value | Example |
-----|-----|
FLAG | <img src="images/img_pl_flagc.png" alt="A flag symbol" /> |
STAR | <img src="images/img_pl_starc.png" alt="A star symbol" /> |

**Symbols for PICKLIST columns:**

Value | Example |
-----|-----|
ARROWS_3_WAY | <img src="images/img_pl_arrows3.png" alt="An arrows_3_way symbol" /> |
ARROWS_4_WAY | <img src="images/img_pl_arrows4.png" alt="An arrows_4_way symbol" /> |
ARROWS_5_WAY | <img src="images/img_pl_arrows5.png" alt="An arrows_5_way symbol" /> |
DECISION_SHAPES | <img src="images/img_pl_decisionshapes.png" alt="A decision_shapes symbol" /> |
DECISION_SYMBOLS | <img src="images/img_pl_decisionsymbols.png" alt="A decision_symbols symbol" /> |
DIRECTIONS_3_WAY | <img src="images/img_pl_directions3.png" alt="A directions_3_way symbol" /> |
DIRECTIONS_4_WAY | <img src="images/img_pl_directions4.png" alt="A directions_4_way symbol" /> |
EFFORT | <img src="images/img_pl_effort6Three.png" alt="An effort symbol" /> |
HARVEY_BALLS | <img src="images/img_pl_harvey5.png" alt="A harvey_balls symbol" /> |
HEARTS | <img src="images/img_pl_heart6Three.png" alt="A hearts symbol" /> |
MONEY | <img src="images/img_pl_money6Three.png" alt="A money symbol" /> |
PAIN | <img src="images/img_pl_pain6.png" alt="A pain symbol" /> |
PRIORITY | <img src="images/img_pl_priority.png" alt="A priority symbol" /> |
PRIORITY_HML | <img src="images/img_pl_priorityhml.png" alt="A priority_hml symbol" /> |
PROGRESS | <img src="images/img_pl_progress5Half.png" alt="A progress symbol" /> |
RYG | <img src="images/img_pl_ryg.png" alt="An RYG symbol" /> |
RYGB | <img src="images/img_pl_rygb.png" alt="An RYGB symbol" /> |
RYGG | <img src="images/img_pl_rygg.png" alt="An RYGG symbol" /> |
SIGNAL | <img src="images/img_pl_signal5.png" alt="A signal symbol" /> |
SKI | <img src="images/img_pl_difficulty4.png" alt="A ski symbol" /> |
STAR_RATING | <img src="images/img_pl_star6Three.png" alt="A star_rating symbol" /> 
VCR | <img src="images/img_pl_decisionvcr.png" alt="A VCR symbol" /> |
WEATHER | <img src="images/img_pl_weather5.png" alt="A weather symbol" /> |
 
<aside class="notice">The Smartsheet grid user interface presents several row attributes and features visually as columns, for example, attachments, discussions, row action indicator, or row number.  The API does not consider these to be columns, and does not return or otherwise expose them as columns.  The only columns returned by the API are user data columns.</aside>

#### System Columns

In addition to the standard column types and symbols, Smartsheet has a number of system columns, which represent data that is
filled in by Smartsheet and whose values cannot be changed by the user. These columns are represented with standard
[column types](#column-types), with the **[Column.systemColumnType](#column-object)** attribute set to one of the following:

Column.systemColumnType Value | Column Type | Notes
-----|-----|-----|
AUTO_NUMBER | TEXT_NUMBER | Columns of this system column type include an [AutoNumberFormat object](#autonumberformat-object) that describes the mask used to generate the value.
CREATED_BY  | CONTACT_LIST
CREATED_DATE | DATETIME
MODIFIED_BY | CONTACT_LIST
MODIFIED_DATE | DATETIME

# Comments

A Discussion is a container for a number of individual Comments in a threaded conversation. For more details, see the [Discussion](#discussions) section.​

This section describes operations on an *individual* Comment within a Discussion thread.

* To retrieve all Discussions and Comments for an entire Sheet, use [List Discussions](#list-discussions) with the ​query parameter​ `include​=comments​`.
* To retrieve all Discussions and Comments associated with a Row, use [List Row Discussions](#list-row-discussions) ​with the​ query parameter​ `include​=comments​`.

## <%= OBJECTS %>

### Comment Object

> Example: Comment object

```json
{
  "text": "This is a comment",
  "createdBy" : {"name": "John Doe", "email" : "john.doe@smartsheet.com"},
  "createdAt" : "2013-06-24T21:07:45Z",
  "modifiedAt" : "2013-06-24T21:07:45Z",
  "discussionId" : 48569348493469348,
  "id": 48569348493401200
}
```

     |     |     |
-----|-----|-----|
id | number | Comment Id
attachments | [Attachment](#attachment-object)[] | Array of Attachment objects
createdAt | timestamp | Time of creation
createdBy | [User](#user-object) | User object containing name and email of the Comment's author
discussionId | number (optional) | Discussion Id
modifiedAt | timestamp | Time of last modification
text | string | Comment body

## Add Comment

> Example request: add comment (without attachment)

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId}/comments \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"text":"This is a new comment."}'
```

```javascript
// Specify comment
var comment = { "text": "This is a new comment." };

// Set options
var options = {
  sheetId: 2252168947361668,
  discussionId: 3962273862576004,
  body: comment
  };

// Add comment to discussion
smartsheet.sheets.addDiscussionComment(options)
  .then(function(newComment) {
    console.log(newComment);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Create comment
Comment commentSpecification = new Comment
{
  Text = "This is a new comment."
};

// Add comment to discussion
Comment newComment = smartsheet.SheetResources.DiscussionResources.CommentResources.AddComment(
  2252168947361668,               // long sheetId
  3962273862576004,               // long discussionId
  commentSpecification
);
```

```java
// Create comment
Comment commentSpecification = new Comment()
  .setText("This is a new comment.");

// Add comment to discussion
Comment newComment = smartsheet.sheetResources().discussionResources().commentResources().addComment(
  2252168947361668L,       // long sheetId
  3962273862576004L,       // long discussionId
  commentSpecification
);
```

```python
response = ss_client.Discussions.add_comment_to_discussion(
  2252168947361668,       # sheet_id
  3962273862576004,       # discussion_id
  ss_client.models.Comment({
    'text': 'This is a new comment.'
  })
)
```

```ruby
body = {
  text: 'This is a new comment.'
}

response = smartsheet.sheets.comments.add(
  sheet_id: 2252168947361668,
  discussion_id: 3962273862576004,
  body: body
)
new_comment = response[:result]
```

> Example request: add comment (with attachment)

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId}/comments \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: multipart/form-data" \
-X POST \
-F 'comment={ "text":"This is a new comment." };type=application/json' \
-F "file=@insurance_benefits.pdf;type=application/octet-stream"
```

```javascript
// Multipart operations are not supported by the Node SDK. Instead, see instructions to Add Comment, and then Attach File to Comment.
```

```csharp
// Create comment
Comment commentSpecification = new Comment
{
  Text = "This is a new comment."
};

// Add comment (with attachment) to discussion
Comment newComment = smartsheet.SheetResources.DiscussionResources.CommentResources.AddCommentWithAttachment(
  2252168947361668,                   // long sheetId
  3962273862576004,                   // long discussionId
  commentSpecification,
  filePath,
  "application/octet-stream"
);
```

```java
// Create comment
Comment commentSpecification = new Comment()
  .setText("This is a new comment.");
        
// Add comment (with attachment) to discussion
File file = new File(filePath);
smartsheet.sheetResources().discussionResources().commentResources().addCommentWithAttachment(
  2252168947361668L,       // long sheetId
  3962273862576004L,       // long discussionId
  commentSpecification,
  file,
  "application/octet-stream"
);
```

```python
# Create comment
comment = ss_client.models.Comment({
  'text': 'This is a new comment.'
})

# Add comment (with attachment) to discussion
response = ss_client.Discussions.add_comment_to_discussion_with_attachment(
  2252168947361668,           # sheet_id
  3962273862576004,           # discussion_id
  comment,
  ('image.png', open('/path/to/image.png', 'rb'), 'image/png')
)
```

```ruby
# Multipart operations are not supported by the Ruby SDK. Instead, see instructions to Add Comment, and then Attach File to Comment.
```

> Example response

```json
{
  "message": "SUCCESS",
  "result": {
    "createdAt": "2013-02-28T22:58:30-08:00",
    "createdBy": {
      "email": "john.doe@smartsheet.com",
      "name": "John Doe"
    },
    "id": 6834973207488388,
    "modifiedAt": "2013-02-28T22:58:30-08:00",
    "text": "This is a new comment."
  },
  "resultCode": 0
}
```

`POST /sheets/{sheetId}/discussions/{discussionId}/comments`

Adds a comment to a discussion.

<aside class="notice">This operation supports multipart requests. Using a multipart request allows you to create a new comment and upload a file to that comment in a single step (that is, using a single request). For more information, see <a href="#multipart-uploads">Multipart Uploads</a>.</aside>

<br/><br/>
**Creating a Comment without an Attachment:**

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Comment object](#comment-object) with the following attribute:<ul><li>text</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing [Comment object](#comment-object) that was created
<%= SCOPE %> | WRITE_SHEETS

<br/><br/>
**Creating a Comment with an Attachment:**

<%= partial "snippets/createCommentMultipart_table.md.erb" %>

## Edit Comment

> Example request: edit comment

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/comments/{commentId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X PUT \
-d '{"text":"This is the updated comment text."}'
```

```javascript
// Specify text
var body = {
  text: "This is the updated comment text."
};

// Set options
var options = {
  sheetId: 3285357287499652,
  commentId: 7144101943502724,
  body: body
};

// Edit comment
smartsheet.sheets.editComment(options)
  .then(function(updatedComment) {
    console.log(updatedComment);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify edited comment properties
Comment commentSpecification = new Comment
{
  Id = 7144101943502724,
  Text = "This is the updated comment text"
}

// Edit comment
Comment updatedComment = smartsheet.SheetResources.DiscussionResources.CommentResources.UpdateComment(
  3285357287499652,          // long sheetId
  commentSpecification
);
```
            
```java
[todo]
```

```python
comment = ss_client.Discussions.update_comment(
  3285357287499652,       # sheet_id
  7144101943502724,       # comment_id
  ss_client.models.Comment({
    'text': 'This is the updated comment text'}))
```

```ruby
body = {
  text: 'This is the updated comment text'
}

response = smartsheet.sheets.comments.update(
  sheet_id: 3285357287499652,
  comment_id: 7144101943502724,
  body: body
)
updated_comment = response[:result]
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": {
    "id": 7144101943502724,
    "discussionId": 4503677744506756,
    "text": "This is the updated comment text.",
    "createdBy": {
      "name": "John Doe",
      "email": "john.doe@smartsheet.com"
    },
  "createdAt": "2013-01-10T13:43:26Z",
  "modifiedAt": "2013-01-12T19:00:26Z"
  },
  "version": 18
}
```

`PUT /sheets/{sheetId}/comments/{commentId}`

Updates the text of a comment. Note that only the user that created the comment is permitted to update it.

**Updating a Comment:**

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Comment object](#comment-object) with the following attribute:<ul><li>text</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing [Comment object](#comment-object) that was updated
<%= SCOPE %> | WRITE_SHEETS

## Delete Comment

> Example request: delete comment

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/comments/{commentId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"\
-X 'DELETE'
```

```javascript
// Set options
var options = {
  sheetId: 2252168947361668,
  commentId: 4952999001909124
};

// Delete comment
smartsheet.sheets.deleteComment(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.SheetResources.CommentResources.DeleteComment(
  2252168947361668,           // long sheetId
  4952999001909124            // long commentId
);
```

```java
smartsheet.sheetResources().commentResources().deleteComment(
  2252168947361668L,       // long sheetId
  4952999001909124L        // long commentId
);
```

```python
ss_client.Discussions.delete_discussion_comment(
  2252168947361668,       # sheet_id
  4952999001909124)       # comment_id
```

```ruby
smartsheet.sheets.comments.delete(
  sheet_id: 2252168947361668,
  comment_id: 4952999001909124
)
```

> Example response

```json
{
  "message" : "SUCCESS",   
  "resultCode": 0,
  "version": 12
}
```

`DELETE /sheets/{sheetId}/comments/{commentId}`

Deletes the Comment specified in the URL.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)
<%= SCOPE %> | WRITE_SHEETS

## Get Comment

> Example request: get comment

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/comments/{commentId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 2252168947361668,
  commentId: 48569348493401200
};

// Get comment
smartsheet.sheets.getComment(options)
  .then(function(comment) {
    console.log(comment);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
Comment comment = smartsheet.SheetResources.CommentResources.GetComment(
  2252168947361668,               // long sheetId
  48569348493401200               // long commentId
);
```

```java
Comment comment = smartsheet.sheetResources().commentResources().getComment(
  2252168947361668L,       // long sheetId
  4856934849340120L        // long commentId
);
```

```python
comment = ss_client.Discussions.get_discussion_comment(
  2252168947361668,       # sheet_id
  4856934849340120)       # comment_id
```

```ruby
comment = smartsheet.sheets.comments.get(
  sheet_id: 2252168947361668,
  comment_id: 4856934849340120
)
```

> Example response

```json
{
  "text": "This is a comment",
  "createdBy" : {"name": "John Doe", "email" : "john.doe@smartsheet.com"},
  "createdAt" : "2013-06-24T21:07:45Z",
  "modifiedAt" : "2013-06-24T21:07:45Z",
  "discussionId" : 4503677744506756,
  "id": 48569348493401200
}
```

`GET /sheets/{sheetId}/comments/{commentId}`

Gets the Comment specified in the URL.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Comment object](#comment-object)
<%= SCOPE %> | READ_SHEETS

## <%= RELATED %>

A comment can contain one or more attachments.

### Comment Attachments

For details about working with a comment's attachments, see [Attachments](#attachments).

# Contacts

A contact is a user's personal contact in Smartsheet (as described [here](https://help.smartsheet.com/articles/796143-managing-contacts)).

## <%= OBJECTS %>

### Contact Object

> Example: Contact object

```json
{
	"id": "AAAAATYU54QAD7_fNhTnhA",
	"name": "David Davidson",
	"email": "dd@example.com"
}
```

     |     |     |
-----|-----|-----|
id | string | Contact Id
email | string | Contact's email address
name | string | Contact's full name

## Get Contact

> Example request: get contact

```shell
curl https://api.smartsheet.com/2.0/contacts/{contactId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {id: "AAAAATYU54QAD7_fNhTnhA"};

// Get contact
smartsheet.contacts.getContact(options)
  .then(function(contact) {
    console.log(contact);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
Contact contact = smartsheet.ContactResources.GetContact(
  "AAAAATYU54QAD7_fNhTnhA"      // string contactId
);
```

```java
Contact contact = smartsheet.contactResources().getContact(
  "AAAAATYU54QAD7_fNhTnhA"      // string contactId
);
```

```python
contact = ss_client.Contacts.get_contact(
  'AAAAATYU54QAD7_fNhTnhA')       # contact_id
```

```ruby
contact = smartsheet.contacts.get(
  contact_id: 'AAAAATYU54QAD7_fNhTnhA'
)
```

> Example response

```json
{
  "id": "AAAAATYU54QAD7_fNhTnhA",
  "name": "David Davidson",
  "email": "dd@example.com"
}
```

`GET /contacts/{contactId}`

Gets the specified contact.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Contact object](#contact-object)
<%= SCOPE %> | READ_CONTACTS

## List Contacts

> Example request: list contacts

```shell
curl https://api.smartsheet.com/2.0/contacts \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
smartsheet.contacts.listContacts({})
  .then(function(contactsList) {
    console.log(contactsList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Contact> contacts = smartsheet.ContactResources.ListContacts(
  null                // PaginationParameters
);
```

```java
// Omit pagination parameters
PagedResult<Contact> contacts = smartsheet.contactResources().listContacts(
  null        // PaginationParameters
);
```

```python
# Sample 1: List all
response = ss_client.Contacts.list_contacts(include_all=True)
contacts = response.data

# Sample 2: Paginate the list (100 contacts per page)
response = ss_client.Contacts.list_contacts(
  page_size=100,
  page=1)
pages = response.total_pages
contacts = response.data
```

```ruby
response = smartsheet.contacts.list
contacts = response[:data]
```

> Example response

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 2,
  "data": [
    {
      "id": "AAAAATYU54QAD7_fNhTnhA",
      "name": "David Davidson",
      "email": "dd@example.com"
    },
    {
      "id": "AAXFBiYU54QAEeWu5hTnhA",
      "name": "Ed Edwin",
      "email": "ee@example.com"
    }
  ]
}
```

`GET /contacts`

Gets a list of the user's Smartsheet Contacts.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Contact objects](#contact-object)
<%= SCOPE %> | READ_CONTACTS

# Cross-sheet References

To create a formula that references data in another sheet, you must first create a cross-sheet reference between the detail sheet and the source sheet. That reference must also define the cell range.

Once you have created the cross-sheet reference, you can use the reference name in any formula on the detail sheet. To create the formula, use [Add Rows](#add-rows) or [Update Rows](#update-rows).

Cross-sheet references that are not used by any formula are automatically deleted after two hours.

## <%= OBJECTS %>

### CrossSheetReference Object

> Example: CrossSheetReference object

```json
{
  "id": 6530408486594436,
  "status": "OK",
  "name": "Sample Reference Sheet Range 1",
  "sourceSheetId": 3285357287499652,
  "startRowId": 1646404963723140,
  "endRowId": 1646404963723140,
  "startColumnId": 6800865311909764,
  "endColumnId": 6800865311909764
}
```

     |     |     |
-----|-----|-----|
id | long | Cross-sheet reference Id, guaranteed unique within referencing sheet.
endColumnId | long  | Defines ending edge of range when specifying one or more columns. To specify an entire column, omit the `startRowId` and `endRowId` parameters.
endRowId | long  | Defines ending edge of range when specifying one or more rows. To specify an entire row, omit the `startColumnId` and `endColumnId` parameters.
name | string | Friendly name of reference. Auto-generated unless specified in [Create Cross-sheet References](#create-cross-sheet-references).
sourceSheetId | long | Sheet Id of source sheet.
startColumnId | long  | Defines beginning edge of range when specifying one or more columns. To specify an entire column, omit the `startRowId` and `endRowId` parameters.
startRowId | long  | Defines beginning edge of range when specifying one or more rows. To specify an entire row, omit the `startColumnId` and `endColumnId` parameters.
status | string | One of the following values:<ul><li>If the request succeeded:<ul><li>OK: the reference is in a good state</li></ul></li><li>If the request failed:<ul><li>BLOCKED: a reference is downstream of a circular issue</li><li>BROKEN: the data source location was deleted (either a column, row, or sheet)</li><li>CIRCULAR: the formula reference is self referencing and cannot be resolved</li><li>DISABLED: updating of the reference is temporarily disabled due to maintenance</li><li>INVALID/UNKNOWN: the reference is new and has not been validated</li><li>NOT_SHARED: no common shared users</li></ul></ul>

## Create Cross-sheet References

> Example request: create cross-sheet references

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/crosssheetreferences \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{
	"name": "Sample Time Log Sheet Range 1",
	"sourceSheetId": 154378742065028,
	"startRowId": 4089096300717956,
	"endRowId": 2681721417164676,
	"startColumnId": 824812248557444,
	"endColumnId": 824812248557444
}'
```

```javascript
// Not yet implemented
```

```csharp
// Not yet implemented
```

```java
// Not yet implemented
```

```python
# Not yet implemented
```

```ruby
smartsheet.sheets.cross_sheet_references.create(
  sheet_id: 8157685695702916,
  body: {
    name: "Sample Time Log Sheet Range 1",
    source_sheet_id: 154378742065028,
    start_row_id: 4089096300717956,
    end_row_id: 2681721417164676,
    start_column_id: 824812248557444,
    end_column_id: 824812248557444
  }
)
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": {
    "name": "Sample Time Log Sheet Range 1",
    "sourceSheetId": 154378742065028,
    "startRowId": 4089096300717956,
    "endRowId": 2681721417164676,
    "startColumnId": 824812248557444,
    "endColumnId": 824812248557444
  }
}
```

`POST /sheets/{sheetId}/crosssheetreferences`

Adds a cross-sheet reference between two sheets and defines the data range for formulas. Each distinct data range requires a new cross-sheet reference.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [CrossSheetReference object](#crosssheetreference-object) with the following attributes:<ul><li>name (optional): unique name for reference. If you omit this parameter, Smartsheet will autogenerate a name.</li><li>sourceSheetId: sheetId for data source</li><li>Either two or all of the following:<ul><li>startRowId: Defines beginning edge of range when specifying one or more rows. Must be used with endRowId.</li><li>endRowId: Defines ending edge of range when specifying one or more rows. Must be used with startRowId.</li><li>startColumnId: Defines beginning edge of range when specifying one or more columns. Must be used with endColumnId.</li><li>endColumnId: Defines ending edge of range when specifying one or more columns. Must be used with startColumnId.</li></ul></li></ul>
<%= RETURNS %> | [Result object](#result-object) containing a [CrossSheetReference object](#crosssheetreference-object), corresponding to what was specified in the request.
<%= SCOPE %> | CREATE_SHEETS

## Get Cross-sheet Reference

> Example request: get cross-sheet references

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/crosssheetreferences/{crossSheetReferenceId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" 
```

```javascript
// Not yet implemented
```

```csharp
// Not yet implemented
```

```java
// Not yet implemented
```

```python
# Not yet implemented
```

```ruby
smartsheet.sheets.cross_sheet_references.get(
  sheet_id: 9283173393803140,
  cross_sheet_reference_id: 8157685695702916
)
```

> Example response

```json
{
  "id": 8157685695702916,
  "status": "OK",
  "name": "Sample Time Log Sheet Range 1",
  "sourceSheetId": 154378742065028,
  "startRowId": 4089096300717956,
  "endRowId": 2681721417164676,
  "startColumnId": 824812248557444,
  "endColumnId": 824812248557444
}
```

`GET /sheets/{sheetId}/crosssheetreferences/{crossSheetReferenceId}`

Gets the cross-sheet reference specified in the URL.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [CrossSheetReference object](#crosssheetreference-object)
<%= SCOPE %> | READ_SHEETS

## List Cross-sheet References

> Example request: list cross-sheet references

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/crosssheetreferences \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Not yet implemented
```

```csharp
// Not yet implemented
```

```java
// Not yet implemented
```

```python
# Not yet implemented
```

```ruby
smartsheet.sheets.cross_sheet_references.list(
  sheet_id: 9283173393803140
)
```

> Example response

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 6,
  "data": [
    {
      "id": 2545778347534212,
      "status": "OK",
      "name": "Data Sheet Range 1",
      "sourceSheetId": 1244271622809476,
      "startColumnId": 6905486478993284,
      "endColumnId": 545911223936900
    },
    {
      "id": 8157685695702916,
      "status": "OK",
      "name": "Sample Time Log Sheet Range 1",
      "sourceSheetId": 154378742065028,
      "startRowId": 4089096300717956,
      "endRowId": 2681721417164676,
      "startColumnId": 824812248557444,
      "endColumnId": 824812248557444
    }
  ]
}
```

`GET /sheets/{sheetId}/crosssheetreferences`

Lists all cross-sheet references for the sheet.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [CrossSheetReference objects](#crosssheetreference-object)
<%= SCOPE %> | READ_SHEETS

# Dashboards

Dashboards and Sights are two terms for one thing. Dashboard information is managed using the Sights endpoints and properties. For more information, see the [Sights](#sights) section.

# Discussions

A Discussion is a container for a collection of individual [Comments](#comments) within a single thread. A Discussion can exist on a [Row](#rows) or a [Sheet](#sheets).

In the UI, Smartsheet creates a Discussion to contain each top-level Comment and subsequent replies into a single thread.

Using the API, you can only add a Comment to a Discussion. If the Discussion doesn't already exist, you must create it first.

## <%= OBJECTS %>

### Discussion Object

> Example: Discussion object

```json
{
  "id": 1848321770841988,
  "title": "Lincoln",
  "comments": [],
  "commentCount": 1,
  "accessLevel": "OWNER",
  "parentType": "ROW",
  "parentId": 3344087179913092,
  "readOnly": false,
  "lastCommentedAt": "2017-06-09T17:04:08Z",
  "lastCommentedUser": {
    "name": "Test User",
    "email": "tester@smartsheet.com"
  },
  "createdBy": {
    "name": "Test User",
    "email": "tester@smartsheet.com"
  }
}
```

     |     |     |
-----|-----|-----|
id | number | Discussion Id
accessLevel | string | User's permissions on the discussion
commentAttachments | [Attachment](#attachment-object)[] | Array of Attachment objects
commentCount | number | The number of comments in the discussion
comments | [Comment](#comment-object)[] | Array of Comment objects
createdBy | [User](#user-object) | User object containing name and email of the creator of the discussion
lastCommentedAt | timestamp | Time of most recent comment
lastCommentedUser | [User](#user-object) | User object containing name and email of the author of the most recent comment
parentId | number | Id of the directly associated row or sheet: present only when the direct association is not clear (see [List Discussions](#list-discussions))
parentType | string | "SHEET" or "ROW": present only when the direct association is not clear (see [List Discussions](#list-discussions))
readOnly | Boolean | Indicates whether the user can modify the discussion
title | string | Read Only. Discussion title automatically created by duplicating the first 100 characters of the top-level comment

## Create Discussion on Row

> Example request: create discussion on row (without attachment)

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/discussions \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"comment": {"text":"This text is the body of the first comment"}}'
```

```javascript
// Specify discussion
var discussion = {
  "comment": {
    "text": "This text is the body of the first comment"
  }
};

// Set options
var options = {
  sheetId: 2252168947361668,
  rowId: 4293147074291588,
  body: discussion
  };

// Add discussion to row
smartsheet.sheets.createRowDiscussion(options)
  .then(function(newDiscussion) {
    console.log(newDiscussion);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Create discussion (including the comment)
Discussion discussionSpecification = new Discussion
{
  Comment = new Comment
    {
      Text = "This text is the body of the first comment"
    },
  Comments = null         // workaround for SDK issue
};

// Add discussion to row
Discussion newDiscussion = smartsheet.SheetResources.RowResources.DiscussionResources.CreateDiscussion(
  9283173393803140,               // long sheetId
  0123456789012345,               // long rowId
  discussionSpecification
);
```

```java
// Create comment
Comment commentSpecification = new Comment()
  .setText("This text is the body of the first comment");

// Create discussion (including the comment)
Discussion discussionSpecification = new Discussion()
  .setComment(commentSpecification)
  .setComments(null);     // workaround for SDK issue

// Add discussion to row
Discussion newDiscussion = smartsheet.sheetResources().rowResources().discussionResources().createDiscussion(
  9283173393803140L,       // long sheetId
  0123456789012345L,       // long rowId
  discussionSpecification
);
```

```python
response = ss_client.Discussions.create_discussion_on_row(
  9283173393803140,           # sheet_id
  0123456789012345,           # row_id
  ss_client.models.Discussion({
    'comment': ss_client.models.Comment({
      'text': 'This text is the body of the first comment'
    })
  })
)
```

```ruby
# Set options
body = {
  comment: {
    text: 'This text is the body of the first comment'
  }
}

# Create discussion on row
response = smartsheet.sheets.discussions.create_on_row(
  sheet_id: 4583173393803140,
  row_id: 4293147074291588,
  body: body
)
new_discussion = response[:result]
```

> Example request: create discussion on row (with attachment)

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/discussions \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: multipart/form-data" \
-X POST \
-F 'discussion={ "comment": { "text": "This text is the body of the first comment" } };type=application/json' \
-F "file=@insurance_benefits.pdf;type=application/octet-stream"
```

```javascript
// Multipart operations are not supported by the Node SDK. Instead, see instructions to Create Discussion on Row, and then Attach File to Comment.
```

```csharp
// Create discussion (including the comment)
Discussion discussionSpecification = new Discussion
{
  Comment = new Comment
  {
    Text = "This text is the body of the first comment"
  },
  Comments = null         // workaround for SDK issue
};

// Add discussion to row
Discussion newDiscussion = smartsheet.SheetResources.RowResources.DiscussionResources.CreateDiscussionWithAttachment(
  9283173393803140,                   // long sheetId
  0123456789012345,                   // long rowId
  discussionSpecification,
  filePath,
  "application/octet-stream"
);
```

```java
// Create comment
Comment commentSpecification = new Comment()
  .setText("This text is the body of the first comment");

// Create discussion (including the comment)
Discussion discussionSpecification = new Discussion()
  .setComment(commentSpecification)
  .setComments(null);     // workaround for SDK issue

// Set file path
File file = new File(filePath);

// Add discussion to row
Discussion newDiscussion = smartsheet.sheetResources().rowResources().discussionResources().createDiscussionWithAttachment(
  9283173393803140L,       // long sheetId
  0123456789012345L,       // long rowId
  discussionSpecification,
  file,
  "application/octet-stream"
);
```

```python
# Add discussion to row
response = ss_client.Discussions.create_discussion_on_row_with_attachment(
  9283173393803140,       # sheet_id
  0123456789012345,       # row_id
  ss_client.models.Discussion({
    'comment': ss_client.models.Comment({
      'text': 'This text is the body of the first comment'
    })
  }),
  ('photo.jpg', open('/path/to/photo.jpg', 'rb'), 'image/jpeg')
)
```

```ruby
# Multipart operations are not supported by the Ruby SDK. Instead, see instructions to Create Discussion on Row, and then Attach File to Comment.
```

> Example response

<%= partial "snippets/createDiscussion_response.md.erb" %>

`POST /sheets/{sheetId}/rows/{rowId}/discussions`

Creates a new Discussion on a Row.

<aside class="notice">This operation supports multipart requests. Using a multipart request allows you to create a new discussion and upload a file to the first comment within that discussion in a single step (that is, using a single request). For more information, see <a href="#multipart-uploads">Multipart Uploads</a>.</aside>

<br/>
**Creating a Discussion without an Attachment:**
<%= partial "snippets/createDiscussion_table.md.erb" %>
<br/>
**Creating a Discussion with an Attachment:**
<%= partial "snippets/createDiscussionMultipart_table.md.erb" %>

## Create Discussion on Sheet

> Example request: create discussion on sheet (without attachment)

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"comment": {"text":"This text is the body of the first comment"}}'
```

```javascript
// Specify discussion
var discussion = {
  "comment": {
    "text": "This text is the body of the first comment"
  }
};

// Set options
var options = {
  sheetId: 2252168947361668,
  body: discussion
  };

// Add discussion to sheet
smartsheet.sheets.createDiscussion(options)
  .then(function(newDiscussion) {
    console.log(newDiscussion);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Create discussion (including the comment)
Discussion discussionSpecification = new Discussion
{
  Comment = new Comment
  {
    Text = "This text is the body of the first comment"
  },
  Comments = null         // workaround for SDK issue
};

// Add discussion to sheet
Discussion newDiscussion = smartsheet.SheetResources.DiscussionResources.CreateDiscussion(
  9283173393803140,                   // long sheetId
  discussionSpecification
);
```

```java
// Create comment
Comment commentSpecification = new Comment()
  .setText("This text is the body of the first comment");

// Create discussion (including the comment)
Discussion discussionSpecification = new Discussion()
  .setComment(commentSpecification)
  .setComments(null);     // workaround for SDK issue

// Add discussion to sheet
Discussion newDiscussion = smartsheet.sheetResources().discussionResources().createDiscussion(
  9283173393803140L,       // long sheetId
  discussionSpecification
);
```

```python
response = ss_client.Discussions.create_discussion_on_sheet(
  9283173393803140,           # sheet_id
  ss_client.models.Discussion({
    'comment': ss_client.models.Comment({
      'text': 'This text is the body of the first comment'
    })
  })
)
```

```ruby
# Set options
body = {
  comment: {
    text: 'This text is the body of the first comment'
  }
}

# Create discussion on sheet
response = smartsheet.sheets.discussions.create_on_sheet(
  sheet_id: 4583173393803140,
  body: body
)
new_discussion = response[:result]
```

> Example request: create discussion on sheet (with attachment)

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: multipart/form-data" \
-X POST \
-F 'discussion={ "comment": { "text": "This text is the body of the first comment" } };type=application/json' \
-F "file=@file_to_attach;type=application/octet-stream" \
```

```javascript
// Multipart operations are not supported by the Node SDK. Instead, see instructions to Create Discussion on Sheet, and then Attach File to Comment.
```

```csharp
// Create discussion (including the comment)
Discussion discussionSpecification = new Discussion
{
  Comment = new Comment
  {
    Text = "This text is the body of the first comment"
  },
  Comments = null         // workaround for SDK issue
};

// Add discussion (including comment with attachment) to sheet
Discussion newDiscussion = smartsheet.SheetResources.DiscussionResources.CreateDiscussionWithAttachment(
  9283173393803140,                   // long sheetId
  discussionSpecification,
  filePath,
  "application/octet-stream"
);
```

```java
// Create comment
Comment commentSpecification = new Comment()
  .setText("This text is the body of the first comment");

// Create discussion (including the comment)
Discussion discussionSpecification = new Discussion()
  .setComment(commentSpecification)
  .setComments(null);     // workaround for SDK issue

File file = new File(filePath);

// Add discussion (including comment with attachment) to sheet
Discussion newDiscussion = smartsheet.sheetResources().discussionResources().createDiscussionWithAttachment(
  9283173393803140L,       // long sheetId
  discussionSpecification,
  file,
  "application/octet-stream"
);
```

```python
response = ss_client.Discussions.create_discussion_on_sheet_with_attachment(
  9283173393803140,           # sheet_id
  ss_client.models.Discussion({
    'comment': ss_client.models.Comment({
      'text': 'This text is the body of the first comment'
    })
  }),
  ('photo.jpg', open('/path/to/photo.jpg', 'rb'), 'image/jpeg')
)
```

```ruby
# Multipart operations are not supported by the Ruby SDK. Instead, see instructions to Create Discussion on Sheet, and then Attach File to Comment.
```

> Example response

<%= partial "snippets/createDiscussion_response.md.erb" %>

`POST /sheets/{sheetId}/discussions`

Creates a new Discussion on a Sheet.

<aside class="notice">This operation supports multipart requests. Using a multipart request allows you to create a new Discussion and upload a file to the first Comment within that Discussion in a single step (that is, using a single request). For more information, see <a href="#multipart-uploads">Multipart Uploads</a>.</aside>

<br/>
**Creating a Discussion without an Attachment:**
<%= partial "snippets/createDiscussion_table.md.erb" %>

<br/>
**Creating a Discussion with an Attachment:**
<%= partial "snippets/createDiscussionMultipart_table.md.erb" %>

## Delete Discussion

> Example request: delete discussion

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"\
-X 'DELETE'
```

```javascript
// Set options
var options = {
  sheetId: 2252168947361668,
  discussionId: 991393444325252
};

// Delete discussion
smartsheet.sheets.deleteDiscussion(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.SheetResources.DiscussionResources.DeleteDiscussion(
  9283173393803140,               // long sheetId
  0123456789012345                // long discussionId
);
```

```java
smartsheet.sheetResources().discussionResources().deleteDiscussion(
  9283173393803140L,       // long sheetId
  0123456789012345L        // long discussionId
);
```

```python
ss_client.Discussions.delete_discussion(
  9283173393803140,       # sheet_id
  0123456789012345)       # discussion_id
```

```ruby
smartsheet.sheets.discussions.delete(
  sheet_id: 4583173393803140,
  discussion_id: 3962273862576004
)
```

> Example response

```json
{
  "message" : "SUCCESS",   
  "resultCode": 0
}
```

`DELETE /sheets/{sheetId}/discussions/{discussionId}`

Deletes the discussion specified in the URL.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)
<%= SCOPE %> | WRITE_SHEETS

## List Discussions

> Example request: list discussions

```shell
curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions?include=comments,attachments' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript 
// Set options
var options = {
  sheetId: 3138415114905476
};

// List discussions
smartsheet.sheets.getDiscussions(options)
  .then(function(discussionList) {
    console.log(discussionList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Sample 1: Omit 'include' parameter and pagination parameters
PaginatedResult<Discussion> results = smartsheet.SheetResources.DiscussionResources.ListDiscussions(
  9283173393803140,               // long sheetId
  null,                           // IEnumerable<DiscussionInclusion> include
  null                            // PaginationParameters
);

// Sample 2: Specify 'include' parameter with values of 'COMMENTS' and 'ATTACHMENTS', and 'includeAll' parameter with value of 'true'
PaginatedResult<Discussion> results = smartsheet.SheetResources.DiscussionResources.ListDiscussions(
  9283173393803140,               // long sheetId
  new DiscussionInclusion[] { DiscussionInclusion.COMMENTS, DiscussionInclusion.ATTACHMENTS },
  new PaginationParameters(
    true,                       // includeAll
    null,                       // int pageSize
    null)                       // int page
);
```

```java
// Sample 1: Omit 'include' parameter and pagination parameters
PagedResult<Discussion> results = smartsheet.sheetResources().discussionResources().listDiscussions(
  9283173393803140L,   // long sheetId
  null,                // PaginationParameters
  null                 // EnumSet<DiscussionInclusion> includes
);

// Sample 2: Specify pagination parameter 'includeAll'
PaginationParameters parameters = new PaginationParameters()
  .setIncludeAll(true);

// List discussions (specify 'include' parameter with values of 'COMMENTS' and 'ATTACHMENTS', and 'includeAll' parameter with value of 'true')
PagedResult<Discussion> results = smartsheet.sheetResources().discussionResources().listDiscussions(
  9283173393803140L,   // long sheetId
  parameters,
  EnumSet.of(DiscussionInclusion.COMMENTS, DiscussionInclusion.ATTACHMENTS)
);
```

```python
# Sample 1: List all
response = ss_client.Discussions.get_all_discussions(
  9283173393803140,       # sheet_id
  include_all=True)
discussions = response.data

# Sample 2: Paginate the list
response = ss_client.Discussions.get_all_discussions(
  9283173393803140,       # sheet_id
  page_size=10,
  page=1)
pages = response.total_pages
discussions = response.data
```

```ruby
response = smartsheet.sheets.discussions.list(
  sheet_id: 4583173393803140
)
discussions = response[:data]
```

> Example response

<%= partial "snippets/getDiscussions_response.md.erb" %>

`GET /sheets/{sheetId}/discussions`

Gets a list of *all* discussions associated with the specified sheet. Remember that discussions are containers for the conversation thread. To see the entire thread, use the **include=comments** parameter.

<%= partial "snippets/getDiscussions_table.md.erb" %>

## Get Discussion

> Example request: get discussion

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 2252168947361668,
  discussionId: 2331373580117892
};

// Get discussion
smartsheet.sheets.getDiscussions(options)
  .then(function(discussion) {
    console.log(discussion);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
Discussion discussion = smartsheet.SheetResources.DiscussionResources.GetDiscussion(
  9283173393803140,               // long sheetId
  0123456789012345                // long discussionId
);
```

```java
Discussion discussion = smartsheet.sheetResources().discussionResources().getDiscussion(
  9283173393803140L,       // long sheetId
  0123456789012345L        // long discussionId
);
```

```python
discussion = ss_client.Discussions.get_discussion(
  9283173393803140,       # sheet_id
  0123456789012345)       # discussion_id

# discussion is an instance of ss_client.models.Discussion
```

```ruby
discussion = smartsheet.sheets.discussions.get(
  sheet_id: 4583173393803140,
  discussion_id: 3962273862576004
)
```

> Example response

```json
{
  "title": "This is a new discussion",
  "id": 2331373580117892,
  "comments": [
    {
      "id": 2331373580117892,
      "text": "This text is the body of the discussion",
      "createdBy": {
        "email": "john.doe@smartsheet.com"
      },
      "modifiedAt": "2012-07-25T00:02:42-07:00"
    }
  ],
  "commentCount" : 1
}
```

`GET /sheets/{sheetId}/discussions/{discussionId}`

Gets the Discussion specified in the URL.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Discussion object](#discussion-object)
<%= SCOPE %> | READ_SHEETS

## List Row Discussions

> Example request: list row discussions

```shell
curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/discussions?include=comments,attachments' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  sheetId: 2252168947361668,
  rowId: 4293147074291588
};

// List row discussions
smartsheet.sheets.getRowDiscussions(options)
  .then(function(discussionList) {
    console.log(discussionList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Sample 1: Omit 'include' parameter and pagination parameters
PaginatedResult<Discussion> results = smartsheet.SheetResources.RowResources.DiscussionResources.ListDiscussions(
  2252168947361668,                   // long sheetId
  4293147074291588,                   // long rowId
  null,                               // IEnumerable<DiscussionInclusion> include
  null                                // PaginationParameters
);

// Sample 2: Specify 'include' parameter with values of 'COMMENTS' and 'ATTACHMENTS', and 'includeAll' parameter with value of 'true'
PaginatedResult<Discussion> results = smartsheet.SheetResources.RowResources.DiscussionResources.ListDiscussions(
  2252168947361668,                   // long sheetId
  4293147074291588,                   // long rowId
  new DiscussionInclusion[] { DiscussionInclusion.COMMENTS, DiscussionInclusion.ATTACHMENTS },
  new PaginationParameters(
    true,                           // includeAll
    null,                           // int pageSize
    null)                           // int page
);
```

```java
// Sample 1: Omit 'include' parameter and pagination parameters
PagedResult<Discussion> results = smartsheet.sheetResources().rowResources().discussionResources().listDiscussions(
  2252168947361668L,       // long sheetId
  4293147074291588L,       // long rowId
  null,                    // PaginationParameters
  null                     // EnumSet<DiscussionInclusion> includes
);

// Sample 2: Specify pagination parameter 'includeAll'
PaginationParameters parameters = new PaginationParameters()
  .setIncludeAll(true);

// Get all row discussions (specify 'include' parameter with values of 'COMMENTS' and 'ATTACHMENTS', and 'includeAll' parameter with value of 'true')
PagedResult<Discussion> results = smartsheet.sheetResources().rowResources().discussionResources().listDiscussions(
  2252168947361668L,       // long sheetId
  4293147074291588L,       // long rowId
  parameters,
  EnumSet.of(DiscussionInclusion.COMMENTS, DiscussionInclusion.ATTACHMENTS)
);
```

```python
# Sample 1: List all
response = ss_client.Discussions.get_row_discussions(
  2252168947361668,               # sheet_id
  4293147074291588,               # row_id
  include_all=True)
discussions = response.data

# Sample 2: Paginate the list
response = ss_client.Discussions.get_row_discussions(
  2252168947361668,               # sheet_id
  4293147074291588,               # row_id
  page_size=10)
pages = response.total_pages          # starts on page 1 by default
discussions = response.data
```

```ruby
response = smartsheet.sheets.discussions.list_row_discussions(
  sheet_id: 4583173393803140,
  row_id: 4293147074291588
)
discussions = response[:data]
```

> Example response

<%= partial "snippets/getDiscussions_response.md.erb" %>

`GET /sheets/{sheetId}/rows/{rowId}/discussions`

Gets a list of all Discussions associated with the specified Row. Remember that Discussions are containers for the conversation thread. To see the entire thread, use the `include=comments` parameter.

<%= partial "snippets/getDiscussions_table.md.erb" %>

## <%= RELATED %>

A Discussion is a collection of one or more Comments, each of which may contain Attachments.

### Discussion Attachments

For details about working with the attachments within a Discussion, see [Attachments](#attachments).

### Discussion Comments

For details about working with a Discussion's comments, see [Comments](#comments).

# Favorites

Smartsheet allows users to "star" sheets, reports, folders, workspaces, Sight, and other objects on their Home tab to mark them as favorites. 
These API operations allow you to access the user's favorite API-supported objects, as well as create and delete favorites.

## <%= OBJECTS %>

### Favorite Object

> Example: Favorite object

```json
{
  "type": "sheet",
  "objectId": 5897312590423940
}
```

     |     |     |
-----|-----|-----|
objectId | number | Id of the favorited item.  If **type** is "template", only private sheet-type template Id is allowed.
type | string | One of:<ul><li>workspace</li><li>folder</li><li>sheet</li><li>report</li><li>template</li><li>sight</li></ul>

## Add Favorites

> Example request: add favorites

```shell
curl https://api.smartsheet.com/2.0/favorites \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"type": "sheet", "objectId": 8400677765441412}]'
```

```javascript 
// Specify favorites
var favorites = [
  {
    "type": "sheet",
    "objectId": 8400677765441412
  }
];

// Set options
var options = {
  body: favorites
};

// Add items to favorites
smartsheet.favorites.addItemsToFavorites(options)
  .then(function(newFavorite) {
    console.log(newFavorite);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify favorites
IList<Favorite> favoritesSpecification = new Favorite[]
{
  new Favorite
  {
    Type = ObjectType.SHEET,
    ObjectId = 8400677765441412
  }
};

// Add items to favorites
IList<Favorite> newFavorite = smartsheet.FavoriteResources.AddFavorites(favoritesSpecification);
```

```java
// Specify favorites
Favorite favoritesSpecification = new Favorite()
  .setObjectId(8400677765441412L)
  .setType(FavoriteType.SHEET);

// Add items to favorites
List<Favorite> newFavorite = smartsheet.favoriteResources().addFavorites(Arrays.asList(favoritesSpecification));
```

```python
response = ss_client.Favorites.add_favorites([
  ss_client.models.Favorite({
    'type': 'sheet',
    'object_id': 8400677765441412
  })
])
```

```ruby
# Specify favorites
body = {
  type: 'sheet',
  object_id: 8400677765441412
}

# Add items to favorites
response = smartsheet.favorites.add(
  body: body
)
```

> Example response

```json
{
	"message": "SUCCESS",
	"resultCode": 0,
	"result": [{
		"type": "sheet",
		"objectId": 8400677765441412
	}]
}
```

`POST /favorites`

Adds one or more items to the user's list of Favorite items. <%= SUPPORTS_OPTIONAL_BULK %>

If called with a single [Favorite object](#favorite-object), and that favorite already exists, [error code](#complete-error-code-list) **1129** is returned.  If called with an array of [Favorite objects](#favorite-object), any objects specified in the array that are already marked as favorites are ignored and omitted from the response.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Favorite object](#favorite-object) or an array of Favorite objects, with the following attributes:<ul><li>type</li><li>objectId</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing objects that were marked as favorites -- either a single [Favorite object](#favorite-object) or an array of Favorite objects, corresponding to what was specified in the request.
<%= SCOPE %> | ADMIN_WORKSPACES

## List Favorites

> Example request: list favorites

```shell
curl https://api.smartsheet.com/2.0/favorites \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
smartsheet.favorites.listFavorites()
  .then(function(favoritesList) {
    console.log(favoritesList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Favorite> results = smartsheet.FavoriteResources.ListFavorites(
  null                // PaginationParameters
);
```

```java
// Omit pagination parameters
PagedResult<Favorite> results = smartsheet.favoriteResources().listFavorites(
  null        // PaginationParameters
);
```

```python
response = ss_client.Favorites.list_favorites(include_all=True)
faves = response.data
```

```ruby
response = smartsheet.favorites.list
list = response[:data]
```

> Example response

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 2,
	"data": [
		{
			"type": "sheet",
			"objectId": 5897312590423940
		},
		{
			"type": "folder",
			"objectId": 1493728255862660
		}
	]
}
```

`GET /favorites`

Gets a list of all of the user's Favorite items.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Favorite objects](#favorite-object)
<%= SCOPE %> | READ_SHEETS

## Remove Favorite

### Remove Favorite Folder

> Example request: remove favorite folder

```shell
curl https://api.smartsheet.com/2.0/favorites/folder/{folderId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  objectId: 2252168947361668
};

// Remove folder from list of favorites
smartsheet.favorites.removeFolderFromFavorites(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.FavoriteResources.RemoveFavorites(
  ObjectType.FOLDER,
  new long[] { 2252168947361668 }   // long folderId
);
```

```java
smartsheet.favoriteResources().removeFavorites(
  FavoriteType.FOLDER,
  new HashSet(Arrays.asList(2252168947361668L))      // long folderId
);
```

```python
ss_client.Favorites.remove_favorites(
  'folder', 
  2252168947361668        # folder_id
)
```

```ruby
smartsheet.favorites.remove_folder(
  folder_id: 2252168947361668
)
```

> Example response

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/folder/{folderId}`

Removes a single Folder from the user's list of Favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

### Remove Favorite Report

> Example request: remove favorite report

```shell
curl https://api.smartsheet.com/2.0/favorites/report/{reportId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  objectId: 2252168947361668
};

// Remove report from list of favorites
smartsheet.favorites.removeReportFromFavorites(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.FavoriteResources.RemoveFavorites(
  ObjectType.REPORT,
  new long[] { 2252168947361668 }       // long reportId
);
```

```java
smartsheet.favoriteResources().removeFavorites(
  FavoriteType.REPORT,
  new HashSet(Arrays.asList(2252168947361668L))         // long reportId
);
```

```python
ss_client.Favorites.remove_favorites(
  'report', 
  2252168947361668        # report_id
)
```

```ruby
smartsheet.favorites.remove_report(
  report_id: 2252168947361668
)
```

> Example response

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/report/{reportId}`

Removes a single Report from the user's list of Favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

### Remove Favorite Sheet

> Example request: remove favorite sheet

```shell
curl https://api.smartsheet.com/2.0/favorites/sheet/{sheetId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  objectId: 2252168947361668
};

// Remove sheet from list of favorites
smartsheet.favorites.removeSheetFromFavorites(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });	
```

```csharp
smartsheet.FavoriteResources.RemoveFavorites(
  ObjectType.SHEET,
  new long[] { 2252168947361668 }   // long sheetId
);
```

```java
smartsheet.favoriteResources().removeFavorites(
  FavoriteType.SHEET,
  new HashSet(Arrays.asList(2252168947361668L))         // long sheetId
);
```

```python
ss_client.Favorites.remove_favorites(
  'sheet', 
  2252168947361668        # sheet_id
)
```

```ruby
smartsheet.favorites.remove_sheet(
  sheet_id: 2252168947361668
)
```

> Example response

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/sheet/{sheetId}`

Removes a single sheet from the user's list of favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

### Remove Favorite Sight

> Example request: remove favorite sight

```shell
curl https://api.smartsheet.com/2.0/favorites/sight/{sightId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  objectId: 6327127650920324
};

// Remove Sight from list of favorites
smartsheet.favorites.removeSightFromFavorites(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
ss_client.Favorites.remove_favorites(
  'sight',
  6327127650920324        # sight_id
)
```

```ruby
smartsheet.favorites.remove_sight(
  sight_id: 6327127650920324
)
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0
}
```

`DELETE /favorites/sights/{sightId}`

Removes a single Sight from the user's list of Favorite items.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)
<%= SCOPE %> | ADMIN_WORKSPACES

### Remove Favorite Template

> Example request: remove favorite template

```shell
curl https://api.smartsheet.com/2.0/favorites/template/{templateId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  objectId: 2252168947361668
};

// Remove template from list of favorites
smartsheet.favorites.removeTemplateFromFavorites(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.FavoriteResources.RemoveFavorites(
  ObjectType.TEMPLATE,
  new long[] { 2252168947361668 }     // long templateId
);
```

```java
smartsheet.favoriteResources().removeFavorites(
  FavoriteType.TEMPLATE,
  new HashSet(Arrays.asList(2252168947361668L))         // long templateId
);
```

```python
ss_client.Favorites.remove_favorites(
  'template', 
  2252168947361668        # template_id
)
```

```ruby
smartsheet.favorites.remove_template(
  template_id: 2252168947361668
)
```

> Example response

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/template/{templateId}`

Removes a single template from the user's list of favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

### Remove Favorite Workspace

> Example request: remove favorite workspace

```shell
curl https://api.smartsheet.com/2.0/favorites/workspace/{workspaceId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  objectId: 2252168947361668
};

// Remove workspace from list of favorites
smartsheet.favorites.removeWorkspaceFromFavorites(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.FavoriteResources.RemoveFavorites(
  ObjectType.WORKSPACE,
  new long[] { 2252168947361668 }   // long workspaceId
);
```

```java
smartsheet.favoriteResources().removeFavorites(
  FavoriteType.WORKSPACE,
  new HashSet(Arrays.asList(2252168947361668L))       // long workspaceId
);
```

```python
ss_client.Favorites.remove_favorites(
  'workspace', 
  2252168947361668        # workspace_id
)
```

```ruby
smartsheet.favorites.remove_workspace(
  workspace_id: 2252168947361668
)
```

> Example response

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/workspace/{workspaceId}`

Removes a single workspace from the user's list of favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

## Remove Multiple Favorites

### Remove Multiple Favorite Folders

> Example request: remove multiple favorite folders

```shell
curl 'https://api.smartsheet.com/2.0/favorites/folder?objectIds=folderId1,folderId2' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  queryParameters: {
    objectIds: "2252168947361668,2252168947361669"
  }
};

// Remove folders from list of favorites
smartsheet.favorites.removeFoldersFromFavorites(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.FavoriteResources.RemoveFavorites(
  ObjectType.FOLDER,
  new long[] { 2252168947361668, 2252168947361669 }     // folderIds
);
```

```java
smartsheet.favoriteResources().removeFavorites(
  FavoriteType.FOLDER,
  new HashSet(Arrays.asList(2252168947361668L, 2252168947361669L))      // long folderIds
);
```

```python
ss_client.Favorites.remove_favorites(
  'folder', 
  [2252168947361668, 2252168947361669]        # folder_ids
)
```

```ruby
smartsheet.favorites.remove_folders(
  folder_ids: [2252168947361668, 2252168947361669]
)
```

> Example response

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/folder`

Removes multiple folders from the user's list of favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Multiple Favorite Reports

> Example request: remove multiple favorite reports

```shell
curl 'https://api.smartsheet.com/2.0/favorites/report?objectIds=reportId1,reportId2' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  queryParameters: {
    objectIds: "2252168947361668,2252168947361669"
  }
};

// Remove reports from list of favorites
smartsheet.favorites.removeReportsFromFavorites(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.FavoriteResources.RemoveFavorites(
  ObjectType.REPORT,
  new long[] { 2252168947361668, 2252168947361669 }    // reportIds
);
```

```java
smartsheet.favoriteResources().removeFavorites(
  FavoriteType.REPORT,
  new HashSet(Arrays.asList(2252168947361668L, 2252168947361669L))      // long reportIds
);
```

```python
ss_client.Favorites.remove_favorites(
  'report', 
  [2252168947361668, 2252168947361669]        # report_ids
)
```

```ruby
smartsheet.favorites.remove_reports(
  report_ids: [2252168947361668, 2252168947361669]
)
```

> Example response

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/report`

Removes multiple reports from the user's list of favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Multiple Favorite Sheets

> Example request: remove multiple favorite sheets

```shell
curl 'https://api.smartsheet.com/2.0/favorites/sheet?objectIds=sheetId1,sheetId2' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  queryParameters: {
    objectIds: "2252168947361668,2252168947361669"
  }
};

// Remove sheets from list of favorites
smartsheet.favorites.removeSheetsFromFavorites(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.FavoriteResources.RemoveFavorites(
  ObjectType.SHEET,
  new long[] { 2252168947361668, 2252168947361669 }    // sheetIds
);
```

```java
smartsheet.favoriteResources().removeFavorites(
  FavoriteType.SHEET,
  new HashSet(Arrays.asList(2252168947361668L, 2252168947361669L))     // long sheetIds
);
```

```python
ss_client.Favorites.remove_favorites(
  'sheet', 
  [2252168947361668, 2252168947361669]        # sheet_ids
)
```

```ruby
smartsheet.favorites.remove_sheets(
  sheet_ids: [2252168947361668, 2252168947361669]
)
```

> Example Response:

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/sheet`

Removes multiple Sheets from the user's list of Favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Multiple Favorite Sights

> Example request: remove multiple favorite sights

```shell
curl 'https://api.smartsheet.com/2.0/favorites/sight?objectIds=sightId1,sightId2' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  queryParameters: {
    objectIds: '970160371507588,6327427650920324'
  }
};

// Remove Sights from list of favorites
smartsheet.favorites.removeSightsFromFavorites(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
ss_client.Favorites.remove_favorites(
  'sight',
  [6327127650920324, 3404239197235076]        # sight_ids
)
```

```ruby
smartsheet.favorites.remove_sights(
  sight_ids: [6327127650920324, 2591554075418573]
)
```

> Example response

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/sights`

Removes multiple Sights from the user's list of favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Multiple Favorite Templates

> Example request: remove multiple favorite templates

```shell
curl 'https://api.smartsheet.com/2.0/favorites/template?objectIds=templateId1,templateId2' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  queryParameters: {
    objectIds: "2252168947361668,2252168947361669"
  }
};

// Remove templates from list of favorites
smartsheet.favorites.removeTemplatesFromFavorites(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.FavoriteResources.RemoveFavorites(
  ObjectType.TEMPLATE,
  new long[] { 2252168947361668, 2252168947361669 }     // templateIds
);
```

```java
smartsheet.favoriteResources().removeFavorites(
  FavoriteType.TEMPLATE,
  new HashSet(Arrays.asList(2252168947361668L, 2252168947361669L))    // long templateIds
);
```

```python
ss_client.Favorites.remove_favorites(
  'template', 
  [2252168947361668, 2252168947361669]        # template_ids
)
```

```ruby
smartsheet.favorites.remove_templates(
  template_ids: [2252168947361668, 2252168947361669]
)
```

> Example response

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/template`

Removes multiple templates from the user's list of favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Multiple Favorite Workspaces

> Example request: remove multiple favorite workspaces

```shell
curl 'https://api.smartsheet.com/2.0/favorites/workspace?objectIds=workspaceId1,workspaceId2' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  queryParameters: {
    objectIds: "2252168947361668,2252168947361669"
  }
};

// Remove workspaces from list of favorites
smartsheet.favorites.removeWorkspacesFromFavorites(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.FavoriteResources.RemoveFavorites(
  ObjectType.WORKSPACE,
  new long[] { 2252168947361668, 2252168947361669 }    // workspaceIds
);
```

```java
smartsheet.favoriteResources().removeFavorites(
  FavoriteType.WORKSPACE,
  new HashSet(Arrays.asList(2252168947361668L, 2252168947361669L))      // long workspaceIds
);
```

```python
ss_client.Favorites.remove_favorites(
  'workspace', 
  [2252168947361668, 2252168947361669]        # workspace_ids
)
```

```ruby
smartsheet.favorites.remove_workspaces(
  workspace_ids: [2252168947361668, 2252168947361669]
)
```

> Example response

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/workspace`

Removes multiple workspaces from the user's list of favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

# Folders

A folder can exist in a user's **Sheets** folder ([Home](#home)), in a [folder](#folders), or in a [workspace](#workspaces).

## <%= OBJECTS %>

### Folder Object

> Example: Folder object

```json
{
  "id": 7116448184199044,
  "name": "Projects",
  "permalink": "https://app.smartsheet.com/b/home?lx=B0_lvAtnWygeMrWr4Rfoa",
  "sheets": []
}
```

     |     |     |
-----|-----|-----|
id | number | Folder Id
favorite | Boolean | Returned only if the user has marked the folder as a favorite in their Home tab (value = 'true')
folders | [Folder](#folder-object)[] | Array of Folder objects
name | string | Folder name
permalink | string | URL that represents a direct link to the folder in Smartsheet
reports | [Report](#report-object)[] | Array of Report objects
sheets | [Sheet](#sheet-object)[] | Array of Sheet objects
sights | [Sight](#sight-object)[] | Array of Sight objects
templates | [Template](#template-object)[] | Array of Template objects

## Copy Folder

> Example request: copy folder

```shell
curl 'https://api.smartsheet.com/2.0/folders/{folderId}/copy?include=data'
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
-H "Content-Type: application/json"
-d '{
  "destinationType": "folder",
  "destinationId": 7960873114331012,
  "newName": "newFolderName"
}'
-X POST
```

```javascript
// Specify destination information
var body = {
  destinationType: "folder",
  destinationId: 7960873114331012,
  newName: "Folder Copy"
};

// Specify elements to copy
var params = {
  include: "data,discussions",
  skipRemap: "cellLinks"
};

// Set options
var options = {
  folderId: 2252168947361668,
  body: body,
  queryParameters: params
};

// Copy folder
smartsheet.folders.copyFolder(options)
  .then(function(folder) {
    console.log(folder);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify destination
ContainerDestination destination = new ContainerDestination {
  DestinationId = 7960873114331012,
  DestinationType = DestinationType.FOLDER,
  NewName = "newFolderName"
};

// Sample 1: Omit 'include' and 'skipRemap' parameters
Folder folder = smartsheet.FolderResources.CopyFolder(
  2252168947361668,               // long folderId
  destination,
  null,                           // IEnumerable<FolderCopyInclusion> include
  null                            // IEnumerable<FolderRemapExclusion> skipRemap
);

// Sample 2: Specify 'include' parameter with value of "DATA", and 'skipRemap' parameter with value of "CELL_LINKS"
Folder folder = smartsheet.FolderResources.CopyFolder(
  2252168947361668,               // long folderId
  destination,
  new FolderCopyInclusion[] {
    FolderCopyInclusion.DATA },
  new FolderRemapExclusion[] {
    FolderRemapExclusion.CELL_LINKS }
);
```

```java
// Specify destination
ContainerDestination destination = new ContainerDestination()
  .setDestinationType(DestinationType.FOLDER)
  .setDestinationId(7960873114331012L)
  .setNewName("newFolderName");

// Sample 1: Omit 'include' and 'skipRemap' parameters
Folder folder = smartsheet.folderResources().copyFolder(
  2252168947361668L,                      // long folderId
  destination,
  null,                                   // EnumSet<FolderCopyInclusion> includes
  null                                    // EnumSet<FolderRemapExclusion> skipRemap
);

// Sample 2: Specify 'include' parameter with value of "DATA", and 'skipRemap' parameter with value of "CELLLINKS"
Folder folder = smartsheet.folderResources().copyFolder(
  2252168947361668L,                      // long folderId
  destination,
  EnumSet.of(FolderCopyInclusion.DATA),
  EnumSet.of(FolderRemapExclusion.CELLLINKS)
);
```

```python
response = ss_client.Folders.copy_folder(
  2252168947361668,                           # folder_id
  ss_client.models.ContainerDestination({
    'destination_id': 7960873114331012,
    'destination_type': 'folder',
    'new_name': 'newFolderName'
  })
)
```

```ruby
# Specify destination information
body = {
  destination_type: 'folder',
  destination_id: 7960873114331012,
  new_name: 'newFolderName'
}

# Copy folder
response = smartsheet.folders.copy(
  folder_id: 2252168947361668,
  body: body
)
```

> Example response

```json
{
  "message": "SUCCESS",    
  "resultCode": 0,
  "result": {
    "id": 7116448184199044,
    "name": "newFolderName",
    "permalink": "https://{base_url}?lx=lB0JaOh6AX1wGwqxsQIMaA"
  }
}
```

`POST /folders/{folderId}/copy`

Creates a copy of the specified Folder.

     |     |    
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- comma-separated list of elements to copy:<ul><li>attachments</li><li>cellLinks</li><li>data -- includes formatting</li><li>discussions -- includes comments</li><li>filters</li><li>forms</li><li>ruleRecipients -- includes notification recipients, must also include **rules** when using this attribute</li><li>rules -- includes notifications and workflow rules</li><li>shares</li><li>all - deprecated</li></ul><i>Note</i>: Cell history is not copied, regardless of which **include** parameter values are specified.
 | **omit** (optional) -- when specified with a value of "sheetHyperlinks", excludes this category from the response
 | **skipRemap** (optional) -- comma-separated list of references to NOT re-map for the newly created folder:<ul><li>cellLinks</li><li>reports</li><li>sheetHyperlinks</li><li>Sights</li></ul>By default, all cell links, reports, sheet hyperlinks, and Sights that reference objects in the source folder are re-mapped to reference corresponding objects in the newly created folder. The **skipRemap** parameter can be specified to change that default behavior:<ul><li>If "cellLinks" is specified in the <b>skipRemap</b> parameter value, the cell links within the newly created folder continue to point to the original source sheets.</li><li>If "reports" is specified in the <b>skipRemap</b> parameter value, the reports within the newly created folder continue to point to the original source sheets.</li><li>If "sheetHyperlinks" is specified in the <b>skipRemap</b> parameter value, the sheet hyperlinks within the newly created folder continue to point to the original source sheets.</li><li>If "sights" is specified in the <b>skipRemap</b> parameter value, the widgets within Sights in the newly created folder continue to point to the original source sheets / reports.</li></ul>
<%= REQUEST %> | [ContainerDestination object](#containerdestination-object)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing a [Folder object](#folder-object) for the newly created folder
<%= SCOPE %> | ADMIN_WORKSPACES

## Create Folder

A folder can be created in the user's **Sheets** folder ([Home](#home)), in another folder, or in a workspace.

### Create Folder (Sheets Level)

> Example request: create folder (sheets level)

```shell
curl https://api.smartsheet.com/2.0/home/folders \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name": "New folder"}'
```

```javascript
// Set folder name
var folder = {
  "name": "New folder"
};

// Set options
var options = {
  body: folder
};

// Create folder in "Sheets" folder (Home)
smartsheet.home.createFolder(options)
  .then(function(newFolder) {
    console.log(newFolder);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Set folder name
Folder folderSpecification = new Folder { Name = "New folder" };

// Create folder in "Sheets" folder (Home)
Folder newFolder = smartsheet.HomeResources.FolderResources.CreateFolder(folderSpecification);
```

```java
// Set folder name
Folder folderSpecification = new Folder();
folderSpecification.setName("New Folder");

// Create folder in "Sheets" folder (Home)
Folder newFolder = smartsheet.homeResources().folderResources().createFolder(folderSpecification);
```

```python
new_folder = ss_client.Home.create_folder('New Folder')
```

```ruby
body = {
  name: 'New Folder'
}

new_folder = smartsheet.folders.create(body: body)
```

> Example response

<%= partial "snippets/createFolder_response.md.erb" %>

`POST /home/folders`

Creates a folder in the user's **Sheets** folder ([Home](#home)). 

<%= partial "snippets/createFolder_table.md.erb" %>

### Create Folder (Subfolder)

> Example request: create folder (subfolder)

```shell
curl https://api.smartsheet.com/2.0/folders/{folderid}/folders \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name": "New folder"}'
```

```javascript
// Set folder name
var folder = {
  "name": "New folder"
};

// Set options
var options = {
  folderId: 7960873114331012,
  body: folder
  };

// Create folder in another folder
smartsheet.folders.createChildFolder(options)
  .then(function(newFolder) {
    console.log(newFolder);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Set folder name
Folder folderSpecification = new Folder { Name = "New folder" };

// Create folder in another folder
Folder newFolder = smartsheet.FolderResources.CreateFolder(
  7960873114331012,               // long destinationFolderId
  folderSpecification
);
```

```java
// Set folder name
Folder folderSpecification = new Folder();
folderSpecification.setName("New Folder");

// Create folder in another folder
Folder newFolder = smartsheet.folderResources().createFolder(
  7960873114331012L,       // long destinationFolderId
  folderSpecification
);
```

```python
response = ss_client.Folders.create_folder_in_folder(
  7960873114331012,       # folder_id
  'New folder')
```

```ruby
body = {
  name: 'New Folder'
}

new_folder = smartsheet.folders.create_in_folder(
  folder_id: 7960873114331012,
  body: body
)
```

> Example response

<%= partial "snippets/createFolder_response.md.erb" %>

`POST /folders/{folderId}/folders`

Creates a folder in the specified folder. 

<%= partial "snippets/createFolder_table.md.erb" %>

### Create Folder (Workspace)

> Example request: create folder (workspace)

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceid}/folders \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name": "New folder"}'
```

```javascript
// Set folder name
var folder = {
  "name": "New folder"
};

// Set options
var options = {
  workspaceId: 1656220827314052,
  body: folder
  };

// Create folder in a workspace
smartsheet.workspaces.createFolder(options)
  .then(function(newFolder) {
    console.log(newFolder);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Set folder name
Folder folderSpecification = new Folder { Name = "New folder" };

// Create folder in a workspace
Folder newFolder = smartsheet.WorkspaceResources.FolderResources.CreateFolder(
  1656220827314052,               // long workspaceId
  folderSpecification
);
```

```java
// Set folder name
Folder folderSpecification = new Folder();
folderSpecification.setName("New Folder");

// Create folder in a workspace
Folder newFolder = smartsheet.workspaceResources().folderResources().createFolder(
  1656220827314052L,       // long workspaceId
  folderSpecification
);
```

```python
new_workspace = ss_client.Workspaces.create_folder_in_workspace(
  1656220827314052,       # workspace_id
  'New folder')
```

```ruby
body = {
  name: 'New Folder'
}

new_folder = smartsheet.folders.create_in_workspace(
  workspace_id: 1656220827314052,
  body: body
)
```

> Example response

<%= partial "snippets/createFolder_response.md.erb" %>

`POST /workspaces/{workspaceId}/folders`

Creates a folder in the specified workspace. 

<%= partial "snippets/createFolder_table.md.erb" %>

## Delete Folder

> Example request: delete folder

```shell
curl https://api.smartsheet.com/2.0/folders/{folderId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  id: 965780272637828 // Id of Folder
};

// Delete folder
smartsheet.folders.deleteFolder(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.FolderResources.DeleteFolder(
  965780272637828                 // long folderId
);
```

```java
smartsheet.folderResources().deleteFolder(
  965780272637828L         // long folderId
);
```

```python
ss_client.Folders.delete_folder(
  7960873114331012)       # folder_id
```

```ruby
smartsheet.folders.delete(
  folder_id: 2252168947361668
)
```

> Example response

```json
{
  "message": "SUCCESS",    
  "resultCode": 0
}
```

`DELETE /folders/{folderId}`

Deletes the folder (and its contents) specified in the URL.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)
<%= SCOPE %> | ADMIN_WORKSPACES

## Get Folder

> Example request: get folder

```shell
curl https://api.smartsheet.com/2.0/folders/{folderId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  id: 7116448184199044 // Id of Folder
};

// Get folder
smartsheet.folders.getFolder(options)
  .then(function(folder) {
    console.log(folder);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Sample 1: Omit 'include' parameter
Folder folder = smartsheet.FolderResources.GetFolder(
  7116448184199044,           // long folderId
  null                        // IEnumerable<FolderInclusion> include
);

// Sample 2: Specify 'include' parameter with value of "SOURCE"
Folder folder = smartsheet.FolderResources.GetFolder(
  7116448184199044,           // long folderId
  new FolderInclusion[] {
    FolderInclusion.SOURCE }
);
```

```java
// Sample 1: Omit 'include' parameter
Folder folder = smartsheet.folderResources().getFolder(
  7116448184199044L,       // long folderId
  null)                    // EnumSet<SourceInclusion> includes
);

// Sample 2: Specify 'include' parameter with value of "SOURCE"
Folder folder = smartsheet.folderResources().getFolder(
  7116448184199044L,       // long folderId
  EnumSet.of(SourceInclusion.SOURCE))
);
```

```python
folder = ss_client.Folders.get_folder(
  7116448184199044)       # folder_id
```

```ruby
folder = smartsheet.folders.get(
  folder_id: 7116448184199044
)
```

> Example response

```json
{
  "id": 7116448184199044,
  "name": "Projects",
  "permalink": "https://app.smartsheet.com/b/home?lx=B0_lvAtnWygeMrWr4Rfoa",
  "sheets": [
    {
      "id": 4509918431602564,
      "name": "Project Timeline",
      "accessLevel": "OWNER",
      "permalink": "https://app.smartsheet.com/b/home?lx=uWicCItTmkbxJwpCfQ5wiwW",
      "createdAt": "2015-06-05T20:05:29Z",
      "modifiedAt": "2015-06-05T20:05:43Z"
    }
  ],
  "reports": [
    {
      "id": 1653067851556740,
      "name": "Weekly report",
      "accessLevel": "OWNER",
      "permalink": "https://app.smartsheet.com/b/home?lx=v2DKrX6MH5zx2NEYHxbnlA"
    }
  ],
  "sights": [
    {
      "id": 6327127650920324,
      "name": "Employee Resource Center",
      "accessLevel": "VIEWER",
      "permalink": "https://app.smartsheet.com/b/home?lx=pgjANFWKnpXsljR6Nsts1SnUXphoZCJbZcV5Sw9DPzI",
      "createdAt": "2016-06-16T22:35:53Z",
      "modifiedAt": "2017-08-23T18:58:09Z"
    }
  ]
}
```

`GET /folders/{folderId}`

Gets the specified Folder (and lists its contents).

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>ownerInfo - owner's email address and user Id for each sheet</li><li>sheetVersion - current version number of each sheet, should not be combined with pagination</li><li>source - the [source](#source-object) for any sheet that was created from another sheet or template</li></ul>
<%= RETURNS %> | [Folder object](#folder-object), populated according to the **include** parameter<br/><br/>Note: If no folders, sheets, reports, templates, or Sights are present in the Folder, the corresponding attribute (for example, "folders", "sheets") is not present in the response.
<%= SCOPE %> | READ_SHEETS

## List Folders

Gets a list of top-level child folders from the user's **Sheets** folder ([Home](#home)), from another folder, or from a workspace.

### List Folders (Sheet Level)

> Example request: list folders (sheet level)

```shell
curl https://api.smartsheet.com/2.0/home/folders \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json"
```

```javascript
smartsheet.home.listFolders()
  .then(function(folderList) {
    console.log(folderList);
  })
  .catch(function(error) {
    console.log(error);
  })
```

```csharp
// Omit pagination parameters
PaginatedResult<Folder> folders = smartsheet.HomeResources.FolderResources.ListFolders(
  null                    // PaginationParameters
);
```

```java
// Omit pagination parameters
PagedResult<Folder> folders = smartsheet.homeResources().folderResources().listFolders(
  null            // PaginationParameters
);
```

```python
# Sample 1: List all
response = ss_client.Home.list_folders(include_all=True)
home_sheets_folders = response.data

# Sample 2: Paginate the list
response = ss_client.Home.list_folders(
  page_size=5,
  page=1)
pages = response.total_pages
folders = response.data
```

```ruby
response = smartsheet.folders.list
folders = response[:data]
```

> Example response

<%= partial "snippets/listFolders_response.md.erb" %>

`GET /home/folders`

Gets a list of the top-level child folders within the user's **Sheets** folder ([Home](#home)).

<%= partial "snippets/listFolders_table.md.erb" %>

### List Folders (Subfolder)

> Example request: list folders (subfolder)

```shell
curl https://api.smartsheet.com/2.0/folders/{folderId}/folders \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json"
```

```javascript
// Set options
var options = {
  folderId: 5107651446105988
};

// List folders in another folder
smartsheet.folders.listChildFolders(options)
  .then(function(folderList) {
    console.log(folderList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Folder> folders = smartsheet.FolderResources.ListFolders(
  5107651446105988,           // long folderId
  null                        // PaginationParameters
);
```

```java
// Omit pagination parameters
PagedResult<Folder> folders = smartsheet.folderResources().listFolders(
  510765144610598L,               // long parentFolderId
  null                             // PaginationParameters
);
```

```python
# Sample 1: List all
response = ss_client.Folders.list_folders(
  5107651446105988,       # folder_id
  include_all=True)
folders = response.data

# Sample 2: Paginate the list
response = ss_client.Folders.list_folders(
  5107651446105988,       # folder_id
  page_size=5,
  page=1)
pages = response.total_pages
folders = response.data
```

```ruby
response = smartsheet.folders.list_in_folder(
  folder_id: 5107651446105988
)
folders = response[:data]
```

> Example response

<%= partial "snippets/listFolders_response.md.erb" %>

`GET /folders/{folderId}/folders`

Gets a list of the top-level child Folders within the specified Folder.

<%= partial "snippets/listFolders_table.md.erb" %>

### List Folders (Workspace)

> Example request: list folders (workspace)

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/folders \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json"
```

```javascript
// Set options
var options = {
  workspaceId: 1656220827314052
};

// List folders in workspace
smartsheet.workspaces.listWorkspaceFolders(options)
  .then(function(folderList) {
    console.log(folderList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Folder> folders = smartsheet.WorkspaceResources.FolderResources.ListFolders(
  1656220827314052,               // long workspaceId
  null                            // PaginationParameters
);
```

```java
// Omit pagination parameters
PagedResult<Folder> folders = smartsheet.workspaceResources().folderResources().listFolders(
  1656220827314052L,                   // long workspaceId
  null                                 // PaginationParameters
);
```

```python
# Sample 1: List all
response = ss_client.Workspaces.list_folders(
  1656220827314052,       # workspace_id
  include_all=True)
folders = response.data

# Sample 2: Paginate the list
response = ss_client.Workspaces.list_folders(
  1656220827314052,       # workspace_id
  page_size=5,
  page=1)
pages = response.total_pages
folders = response.data
```

```ruby
response = smartsheet.folders.list_in_workspace(
  workspace_id: 1656220827314052
)
folders = response[:data]
```

> Example response

<%= partial "snippets/listFolders_response.md.erb" %>

`GET /workspaces/{workspaceId}/folders`

Gets a list of the top-level child Folders within the specified Workspace.

<%= partial "snippets/listFolders_table.md.erb" %>

## Move Folder

> Example request: move folder

```shell
curl https://api.smartsheet.com/2.0/folders/{folderId}/move \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-d '{ 
  "destinationType": "folder", 
  "destinationId": 7960873114331012 
}' \
-X POST
```

```javascript
// Set destination information
var body = {
  destinationType: "folder",
  destinationId: 7960873114331012
};

// Set options
var options = {
  folderId: 4509918431602564,
  body: body
};

// Move folder
smartsheet.folders.moveFolder(options)
  .then(function(folder) {
    console.log(folder);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify destination
ContainerDestination destination = new ContainerDestination {
  DestinationId = 7960873114331012,       // long destinationFolderId
  DestinationType = DestinationType.FOLDER,
};

// Move folder
Folder folder = smartsheet.FolderResources.MoveFolder(
  4509918431602564,               // long folderId
  destination
);
```

```java
// Specify destination
ContainerDestination destination = new ContainerDestination()
  .setDestinationType(DestinationType.FOLDER)
  .setDestinationId(7960873114331012L);

// Move folder
Folder folder = smartsheet.folderResources().moveFolder(
  4509918431602564L,                         // long folderId
  destination
);
```

```python
folder = ss_client.Folders.move_folder(
  4509918431602564,                           # folder_id to be moved
  ss_client.models.Destination({
    'destination_id': 7960873114331012,     # destination folder_id
    'destination_type': 'folder'
  })
)
```

```ruby
# Specify destination information
body = {
  destination_type: 'workspace',
  destination_id: 7960873114331012
}

# Move folder
response = smartsheet.folders.move(
  folder_id: 4509918431602564,
  body: body
)
```

> Example response

```json
{
  "message": "SUCCESS",    
  "resultCode": 0,
  "result": {
    "id": 4509918431602564,
    "name": "moved_folder_name",
    "permalink": "https://{base_url}?lx=lB0JaOh6AX1wGwqxsQIMaA"
  }
}
```

`POST /folders/{folderId}/move`

Moves the specified folder to another location.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [ContainerDestination object](#containerdestination-object), limited to the following required attributes:<ul><li>destinationType</li><li>destinationId</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing a [Folder object](#folder-object) for the moved Folder
<%= SCOPE %> | ADMIN_WORKSPACES

## Update Folder

> Example request: update folder

```shell
curl https://api.smartsheet.com/2.0/folders/{folderId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"name": "New name for folder"}'
```

```javascript
// Set folder name
var folder = {
  "name": "New name for folder"
};

// Set options
var options = {
  id: 7960873114331012, // Id of Folder
  body: folder
};

// Update folder
smartsheet.folders.updateFolder(options)
  .then(function(updatedFolder) {
    console.log(updatedFolder);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Set folder name
Folder folderSpecification = new Folder
{
  Id = 7960873114331012,
  Name = "New name for folder"
};

// Update folder
Folder updatedFolder = smartsheet.FolderResources.UpdateFolder(folderSpecification);
```

```java
// Set folder name and id of the folder to be updated
Folder folderSpecification = new Folder(7960873114331012L);
folderSpecification.setName("New name for folder");

// Update folder
Folder updatedFolder = smartsheet.folderResources().updateFolder(folderSpecification);
```

```python
updated_folder = ss_client.Folders.update_folder(
  7960873114331012,       # folder_id
  'New name for folder')
```

```ruby
# Set options
body = {
  name: 'New name for folder'
}

# Update folder
response = smartsheet.folders.update(
  folder_id: 7960873114331012,
  body: body
)
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": {
    "id": 7960873114331012,
    "name": "New name for folder"
  }
}
```

`PUT /folders/{folderId}`

Updates the folder specified in the URL.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Folder object](#folder-object), limited to the following required attribute:<ul><li>name (string)</li></ul>Name does not have to be unique.
<%= RETURNS %> | [Result object](#result-object) containing the updated [Folder object](#folder-object)
<%= SCOPE %> | ADMIN_WORKSPACES
