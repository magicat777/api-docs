# Templates

A template can be used to create a sheet, as described in [Create Sheet from Template](#create-sheet-from-template).

## <%= OBJECTS %>

### Template Object

> Example: Template object

```json
{
	"id": 3457273486960516,
	"name": "template 1",
	"accessLevel": "OWNER",
	"description": "This is template 1"
}
```

     |     |     |
-----|-----|-----|
**id** | number | Template Id
**type** | string | Type of the template. One of **sheet** or **report**<br/>*Only applicable to public templates*
**accessLevel** | string | User's permissions on the template
**blank** | Boolean | Indicates whether the template is blank<br/>*Only applicable to public templates*
**categories** | string[] | List of categories this template belongs to<br/>*Only applicable to public templates*
**description** | string | Template description
**globalTemplate** | string | Type of global template. One of: **BLANK_SHEET**, **PROJECT_SHEET**, or **TASK_LIST**<br/>*Only applicable to blank public templates*
**image** | string | URL to the small preview image for this template<br/>*Only applicable to non-blank public templates*
**largeImage** | string | URL to the large preview image for this template<br/>*Only applicable to non-blank public templates*
**locale** | string | Locale of the template<br/>*Only applicable to public templates*
**name** | string | Template name
**tags** | string[] | List of search tags for this template<br/>*Only applicable to non-blank public templates*

## List Public Templates

> Example request: list public templates

```shell
curl https://api.smartsheet.com/2.0/templates/public \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
smartsheet.templates.listPublicTemplates()
  .then(function(templateList) {
    console.log(templateList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Template> templates = smartsheet.TemplateResources.ListPublicTemplates(
  null            // PaginationParameters
);
```

```java
// Omit pagination parameters
PagedResult<Template> templates = smartsheet.templateResources().listPublicTemplates(
  null        // PaginationParameters
);
```

```python
response = smartsheet_client.Templates.list_public_templates(
  page_size=10,
  page=1)
pages = response.total_pages
templates = response.data
```

```ruby
response = smartsheet.templates.list_public
templates = response[:data]
```

> Example response

<%= partial "snippets/listTemplates_response.md.erb" %>

`GET /templates/public`

Gets a list of public templates that the user has access to.

<%= partial "snippets/listTemplates_table.md.erb" %>

## List User-created Templates

> Example request: list user-created templates

```shell
curl https://api.smartsheet.com/2.0/templates \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
smartsheet.templates.listUserCreatedTemplates()
  .then(function(templateList) {
    console.log(templateList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit pagination parameters
PaginatedResult<Template> templates = smartsheet.TemplateResources.ListUserCreatedTemplates(
  null                // PaginationParameters
);
```

```java
// Omit pagination parameters
PagedResult<Template> templates = smartsheet.templateResources().listUserCreatedTemplates(
  null        // PaginationParameters
);
```

```python
response = smartsheet_client.Templates.list_user_created_templates(
  page_size=10,
  page=1)
pages = response.total_pages
templates = response.data
```

```ruby
response = smartsheet.templates.list
templates = response[:data]
```

> Example response

<%= partial "snippets/listTemplates_response.md.erb" %>

`GET /templates`

Gets a list of user-created templates that the user has access to.

<%= partial "snippets/listTemplates_table.md.erb" %>

# Token

The Smartsheet API utilizes OAuth 2.0 for authentication and authorization. An **Authorization** HTTP header containing an access token is required to authenticate all API requests except for the requests to GET Access Token or Refresh Access Token.  For more information, see [Authentication](#authentication-and-access-tokens).

## <%= OBJECTS %>

### Token Object

> Example: Token object

```json
{
  "access_token": "ll352u9jujauoqz4gstvsae05",
  "token_type": "bearer",
  "refresh_token": "e9x352a9mp4151le2505",
  "expires_in": 604799
}
```

     |     |     |
-----|-----|-----|
**access_token** | string | A credential that can be used by a client to access the Smartsheet API.
**token_type** | enum | How an access token will be generated and presented. Smartsheet uses the bearer parameter, which means essentially give access to the bearer of this token.
**expires_in** | number | Number of seconds token is valid once issued; this is currently 604799 seconds, or approx. 7 days.
**refresh_token** | string | A credential tied to the access token that can be used to obtain a fresh access token with the same permissions, without further involvement from a user.

## Get Access Token

> Example request: get access token

```shell
curl https://api.smartsheet.com/2.0/token \
-d 'grant_type=authorization_code&code={your_code}&client_id={your_client_id}&hash={SHA_256(app_secret|code)}' \
-X POST
```

```javascript
// Create hash
var hash =
  crypto.createHash('sha256')
    .update('9samp7le3for71you' + '|' + 'sample6p9qisx6a')
        // ('Your App Secret' + '|' + 'Received Authorization Code')
    .digest('hex');
 
// Set options
var options = {
  queryParameters: {
    client_id: '1samp48lel5for68you',   // Your App Client ID
    code: 'sample6p9qisx6a',            // Received Authorization Code
    hash: hash
  },
  contentType: 'application/x-www-form-urlencoded'
};

// Get access token
smartsheet.tokens.getAccessToken(options)
  .then(function(token) {
  console.log(token);
})
.catch(function(error) {
    console.log(error);
  });
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

```ruby
hash = Digest::SHA256.hexdigest '9samp7le3for71you|sample6p9qisx6a'
                                # your_app_secret|your_code
smartsheet.token.get(
  client_id: '1samp48lel5for68you',
  code: 'sample6p9qisx6a',
  hash: hash
)
```

> Example response

```json
{
	"token": {
		"access_token": "ll352u9jujauoqz4gstvsae05",
		"token_type": "bearer",
		"refresh_token": "e9x352a9mp4151le2505",
		"expires_in": 604799
	}
}
```

`POST /token`

Gets an access token, as part of the OAuth process. For more information, see [OAuth Flow](#oauth-flow).

     |     |
-----|-----|
<%= HEADERS %> | **Content-Type**: application/x-www-form-urlencoded
<%= PARAMETERS %> | **client_id** (required) -- client id for your app
 | **code** (required) -- authorization code returned during the OAuth flow.
 | **grant_type** (required) -- must be set to "authorization_code"
 | **hash** (required) -- [SHA-256](https://en.wikipedia.org/wiki/SHA-2) hash of your app secret concatenated with a pipe and the authorization code.  The **app_secret** is never sent with the request.
 <%= RETURNS %> | [Token object](#token-object) containing an access token and a refresh token.

## Refresh Access Token

> Example request: refresh access token

```shell
curl https://api.smartsheet.com/2.0/token \
-d 'grant_type=refresh_token&refresh_token={your_refresh_token}
&client_id={your_client_id}
&hash={SHA_256(app_secret|refresh_token)}' \
-X POST
```

```javascript
// Create hash
var hash =
  crypto.createHash('sha256')
    .update('9samp7le3for71you' + '|' + 'sample6p9qisx6a')
        // ('Your App Secret' + '|' + 'Your App Refresh Token')
    .digest('hex');
 
// Set options
var options = {
  queryParameters: {
    client_id: '1samp48lel5for68you',   // Your App Client ID
    refresh_token: 'e9x352a9mp4151le2505',
    hash: hash
  },
  contentType: 'application/x-www-form-urlencoded'    
};
 
// Refresh access token
smartsheet.tokens.refreshAccessToken(options)
  .then(function(updatedToken) {
      console.log(updatedToken);
  })
  .catch(function(error) {
      console.log(error);
  });
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

```ruby
hash = Digest::SHA256.hexdigest '9samp7le3for71you|e9x352a9mp4151le2505'
                              # 'your_app_secret|refresh_token
smartsheet.token.refresh(
  client_id: '1samp48lel5for68you',
  refresh_token: 'e9x352a9mp4151le2505',
  hash: hash
)
```

> Example response

```json
{
	"token": {
		"access_token": "new52u9jujauoqz4gstvsae05",
		"token_type": "bearer",
		"refresh_token": "new352a9mp4151le2505",
		"expires_in": 604799
	}
}
```

`POST /token`

Refreshes an access token, as part of the OAuth process. For more information, see [OAuth Flow](#oauth-flow).

     |     |
-----|-----|
<%= HEADERS %> | **Content-Type**: application/x-www-form-urlencoded
<%= PARAMETERS %> | **client_id** (required) -- client id for your app
 | **grant_type** (required) -- must be set to "refresh_token"
 | **hash** (required) -- [SHA-256](https://en.wikipedia.org/wiki/SHA-2) hash of your app secret concatenated with a pipe and the refresh token value
 | **refresh_token** (required) -- **refresh_token** value that came with the access token
 <%= RETURNS %> | [Token object](#token-object) containing an access token and a refresh token.

## Revoke Access Token

> Example request: revoke access token

```shell
curl https://api.smartsheet.com/2.0/token \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
smartsheet.tokens.revokeAccessToken({})
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.TokenResources.RevokeAccessToken();
```

```java
smartsheet.tokenResources().revokeAccessToken();
```

```python
smartsheet_client.Token.revoke_access_token()
```

```ruby
smartsheet.token.revoke
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0
}
```

`DELETE /token`

Revokes the access token used to make this request.  The access token is no longer valid, and subsequent API calls made using the token fail.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **deleteAllForApiClient** (optional): The client Id and user Id is fetched based on the token that is used to make this API call. A value of **true** deletes all tokens associated to the given client Id and user Id. Defaults to **false**.
<%= RETURNS %> | [Result object](#result-object)

# Update Requests

## <%= OBJECTS %>

<%= partial "snippets/updateRequest_object.md.erb" %>

<%= partial "snippets/sentUpdateRequest_object.md.erb" %>

<%= partial "snippets/schedule_object.md.erb" %>

## Create Update Request

<%= partial "snippets/createUpdateRequest.md.erb" %>

## Delete Update Request

<%= partial "snippets/deleteUpdateRequest.md.erb" %>

## Get Update Request

<%= partial "snippets/getUpdateRequest.md.erb" %>

## Get All Update Requests

<%= partial "snippets/listUpdateRequests.md.erb" %>

## Change Update Request

<%= partial "snippets/changeUpdateRequest.md.erb" %>

## Delete Sent Update Request

<%= partial "snippets/deleteSentUpdateRequest.md.erb" %>

## Get Sent Update Request

<%= partial "snippets/getSentUpdateRequest.md.erb" %>

## Get All Sent Update Requests

<%= partial "snippets/listSentUpdateRequests.md.erb" %>

# Users

## <%= OBJECTS %>

### User Object

> Example: User object

```json
{
  "email": "john.doe@smartsheet.com",
  "name": "John Doe",
  "firstName": "John",
  "lastName": "Doe",
  "profileImage": {},
  "id": 48569348493401200,
  "status": "ACTIVE",
  "admin": true,
  "licensedSheetCreator": true,
  "groupAdmin": true,
  "resourceViewer": true, 
  "sheetCount": 3,
  "lastLogin": "2016-08-15T18:32:47Z",
  "customWelcomeScreenViewed": "2016-08-12T12:15:47Z"
}
```

     |     |     |
-----|-----|-----|
**id** | number | User Id
**admin** | Boolean | Indicates whether the user is a system admin (can manage user accounts and organization account)
**customWelcomeScreenViewed** | timestamp | Timestamp of viewing an Enterprise [Custom Welcome Screen](<%= CUSTOM_WELCOME_SCREEN_URL %>) by the current user
**email** | string | User's primary email address
**firstName** | string | User's first name
**groupAdmin** | Boolean | Indicates whether the user is a group admin (can create and edit groups)
**lastLogin** | timestamp | Last login time of the current user
**lastName** | string | User's last name
**licensedSheetCreator** | Boolean | Indicates whether the user is a licensed user (can create and own sheets)
**name** | string | User's full name (read-only)
**profileImage** | [Image](#image-object) | An [Image object](#image-object) representing the profile image associated with the user account
**resourceViewer** | Boolean | Indicates whether the user is a resource viewer (can access resource views)
**sheetCount** | number | The number of sheets owned by the current user within the organization account
**status** | string |  User status, set to one of the following values: **ACTIVE**, **DECLINED**, or **PENDING**

### UserProfile Object

     |     |     |
-----|-----|-----|
**id** | number | Current user's Id
**account** | [Account](#account-object) | Account object representing the current user's customer account
**admin** | Boolean | Indicates whether the user is a system admin (can manage user accounts and organization account)
**alternateEmails** | [AlternateEmail](#alternateemail-object)[] | An array of [AlternateEmail objects](#alternateemail-object) representing the alternate email addresses associated with the user account
**company** | string | User's company
**customWelcomeScreenViewed** | timestamp | Timestamp of viewing an Enterprise [Custom Welcome Screen](<%= CUSTOM_WELCOME_SCREEN_URL %>) by the current user
**department** | string | User's department
**email** | string | Current user's primary email address
**firstName** | string | Current user's first name
**groupAdmin** | Boolean | Indicates whether the user is a group admin (can create and edit groups)
**jiraAdmin** | Boolean | Indicates whether the user is a JIRA admin
**lastLogin** | timestamp | Last login time of the current user
**lastName** | string | Current user's last name
**licensedSheetCreator** | Boolean | Indicates whether the user is a licensed user (can create and own sheets)
**locale** | string | Current user's locale (see [Server Information](#server-information))
**mobilePhone** | string | User's mobile phone number
**profileImage** | [Image](#image-object) | An [Image object](#image-object) representing the profile image associated with the user account
**resourceViewer** | Boolean | Indicates whether the user is a resource viewer (can access resource views)
**role** | string | User's role
**salesforceAdmin** | Boolean | Indicates whether the user is a Salesforce admin
**salesforceUser** | Boolean | Indicates whether the user is a registered Salesforce user
**sheetCount** | number | The number of sheets owned by the current user within the organization account
**timeZone** | string | Current user's time zone Id
**title** | string | User's title
**workPhone** | string | User's work phone number

### Account Object

     |     |     |
-----|-----|-----|
**id** | number | Account Id
**name** | string | Account name

### AlternateEmail Object

     |     |     |
-----|-----|-----|
**id** | number | AlternateEmail Id
**confirmed** | Boolean | Indicates whether the alternate email address has been confirmed
**email** | string | User's alternate email address

## Add User

> Example request: add user

```shell
curl 'https://api.smartsheet.com/2.0/users?sendEmail=true' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"firstName": "John", "lastName": "Doe", "email": "john.doe@smartsheet.com", "admin": false, "licensedSheetCreator": true}'
```

```javascript
// Specify user properties
var user = {
	"firstName": "John",
	"lastName": "Doe",
	"email": "john.doe@smartsheet.com",
	"admin": false,
	"licensedSheetCreator": true
};

// Set options
var options = {
	body: user
};

// Add user
smartsheet.users.addUser(options)
	.then(function(newUser) {
		console.log(newUser)
	}).catch(function(error) {
		console.log(error);
	});
```

```csharp
// Set user properties
User userSpecification = new User
{
  Email = "john.doe@smartsheet.com",
  Admin = false,
  LicensedSheetCreator = true,
  FirstName = "John",
  LastName = "Doe"
};

// Add user
User newUser = smartsheet.UserResources.AddUser(
  userSpecification,
  true,                   // Nullable<bool> sendEmail
  null                    // Nullable<bool> allowInviteAccountAdmin
);
```

```java
// Set user properties
User userSpecification = new User();
userSpecification.setAdmin(false)
  .setEmail("john.doe@smartsheet.com")
  .setFirstName("John")
  .setLastName("Doe")
  .setLicensedSheetCreator(true);

// Add user
User newUser = smartsheet.userResources().addUser(userSpecification);
```

```python
new_user = smartsheet_client.Users.add_user(
  smartsheet.models.User({
    'first_name': 'John',
    'last_name': 'Doe',
    'email': 'john.doe@smartsheet.com',
    'admin': False,
    'licensed_sheet_creator': True
  })
)
```

```ruby
# Set user properties
body = {
  email: 'john.doe@smartsheet.com',
  admin: false,
  licensed_sheet_creator: false,
  first_name: 'John',
  last_name: 'Doe',
  resource_viewer: false
}

# Add user
response = smartsheet.users.add(
  body: body
)
new_user = response[:result]
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": {
    "id": 94094820842,
    "email": "john.doe@smartsheet.com",
    "name": "John Doe",
    "firstName": "John",
    "lastName": "Doe",
    "profileImage": {
      "imageId": "u!1!8ljad7w9-aY!AsDeH0wWv1Y!y9VvAgUOFdg",
      "height": 1050,
      "width": 1050
    },
    "status": "ACTIVE",
    "admin": true,
    "licensedSheetCreator": true,
    "groupAdmin": true,
    "resourceViewer": true
  }
}
```

`POST /users`

Adds a user to the organization account.

<aside class="notice">This operation is only available to system administrators.</aside>

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **sendEmail** (optional): A Boolean that indicates whether to send a welcome email. Defaults to **false**.
<%= REQUEST %> | [User object](#user-object) with the following attributes:<ul><li>**admin** (required)</li><li>**email** (required)</li><li>**licensedSheetCreator** (required)</li><li>**firstName** (optional)</li><li>**lastName** (optional)</li><li>**groupAdmin** (optional)</li><li>**resourceViewer** (optional)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the newly created [User object](#user-object).
<%= ERRORS %>  | If an error occurs because the request specified the [alternate email address](#alternate-email-addresses) (that is, not the primary email address) of an existing Smartsheet user (to invite the user into the org), the [Error object](#error-object) returned contains a **detail** attribute set to an array of objects, each object in the array having the following attributes:<ul><li>**alternateEmailAddress**: User's alternate email address that was specified in the request</li><li>**primaryEmailAddress**: User's primary email address that must instead be specified for the operation</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 5xxx,<br/>&#160;&#160;"message": "The specified email address (u1+1@smartsheet.com) is an alternate address for a user with the primary email address of u1@smartsheet.com. Please retry using their primary address."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"alternateEmailAddress": "u1+1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"primaryEmailAddress": "u1@smartsheet.com"<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}
<%= SCOPE %> | ADMIN_USERS

<aside class="notice">If successful, and user auto provisioning (UAP) is on, and user matches the auto provisioning rules, user is added to the org.  If UAP is off, or user does not match UAP rules, user is invited to the org and must explicitly accept the invitation to join.</aside>

<aside class="notice">In some specific scenarios, supplied attributes such as <b>firstName</b> and <b>lastName</b> may be ignored.  For example, if you are inviting an existing Smartsheet user to join your organization account, and the invited user has not yet accepted your invitation, any supplied <b>firstName</b> and <b>lastName</b> are ignored.</aside>

## Alternate Email Addresses

A [User](#user-object) in Smartsheet must have a *primary* email address associated with their user account (**User.email**) and may optionally have one or more alternate email addresses associated with their account (**User.alternateEmails**). 

<aside class="notice">The following operations must be performed using an user's primary email address:<ul><li><a href="#add-group-members">Add Group Members</a></li><li><a href="#add-user">Add User</a></li><li><a href="#create-update-request">Create Update Request</a></li><li><a href="#report-sharing">Share Report</a></li><li><a href="#share-sheet">Share Sheet</a></li><li><a href="#workspace-sharing">Share Workspace</a></li></ul>Attempting to specify a user's alternate email address for any of the above operations results in an error.</aside>

### Add Alternate Emails

> Example request: add alternate emails

```shell
curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '[{"email": "John.Doe@smartsheet.com"}]'
```

```javascript
// Specify email addresses to add
var body = [
  {
    email: "John.Doe@smartsheet.com"
  }
];

// Set options
var options = {
  userId: 4495214342629252,
  body: body
};

// Add alternate email address
smartsheet.users.addAlternateEmail(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
AlternateEmail altEmail1 = new AlternateEmail.AlternateEmailBuilder("jack@email.com").Build();
AlternateEmail altEmail2 = new AlternateEmail.AlternateEmailBuilder("jack@anotherEmail.com").Build();
List<AlternateEmail> alternateEmails = smartsheet.UserResources.AddAlternateEmail(
  4495214342629252,                              // long userId
  new AlternateEmail[] { altEmail1, altEmail2 }  // Array of AlternateEmail
);
```

```java
// [todo]
```

```python
response = smartsheet_client.Users.add_alternate_email(
  4495214342629252,          # user_id
  [
    smartsheet.models.AlternateEmail({
        'email': 'John.Doe@smartsheet.com'
    })
  ]
)
```

```ruby
# Set options
body = [
  {
    email: 'John.Doe@smartsheet.com'
  }
]

# Add alternate email addresses
response = smartsheet.users.alternate_emails.add(
  user_id: 4495214342629252,
  body: body
)
```

> Example response

```json
{
	"message": "SUCCESS",
	"resultCode": 0,
	"result": [{
		"id": 4495214342629252,
		"email": "John.Doe@smartsheet.com",
		"confirmed": false
	}]
}
```

`POST /users/{userId}/alternateemails`

Adds one or more alternate email addresses for the specified user.

<aside class="notice">This operation is only available to system administrators.</aside>

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Array of [AlternateEmail objects](#alternateemail-object), each limited to only the **email** attribute
<%= RETURNS %> | [Result object](#result-object) containing an array of the newly created [AlternateEmail objects](#alternateemail-object).
<%= ERRORS %>  | If a single email address is specified in the request and an error occurs, the response contains an [Error object](#error-object).<br/><br/>If multiple email addresses are specified in the request and an error occurs, the Error object returned contains a **detail** attribute set to an array of objects, each object in the array having the following attributes:<ul><li>**email**: Problematic email address specified in the request</li><li>**errorCode**: Smartsheet [error code](#complete-error-code-list)</li><li>**message**: Message that describes the problem with the specified email address</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 1160,<br/>&#160;&#160;"message": "Invalid bulk request. See detail for more information."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"email": "altEmail1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"errorCode": 1157,<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"message": "This address is already associated with another Smartsheet account, so it cannot be added as an alternate address for this account."<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}
<%= SCOPE %> | ADMIN_USERS

<aside class="notice">If the API request is submitted by a system administrator of an Enterprise account and the alternate email address <a href="<%= USER_AUTO_PROVISIONING_URL %>">domain is validated</a>, the added email address is automatically confirmed.</aside>

### Make Alternate Email Primary

> Example request: make alternate email primary

```shell
curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails/{alternatEmailId}/makeprimary \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST
```

```javascript
// Set options
var options = {
  userId: 401090454808452,
  alternateEmailId: 123456789012345
};

// Make alternate email primary
smartsheet.users.makeAlternateEmailPrimary(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
AlternateEmail primaryEmail = smartsheet.UserResources.PromoteAlternateEmail(
  401090454808452,        // long userId
  123456789012345         // long altEmailId
);
```

```java
// [todo]
```

```python
response = smartsheet_client.Users.promote_alternate_email(
  401090454808452,        # user_id
  123456789012345)        # alt_id
```

```ruby
response = smartsheet.users.alternate_emails.make_primary(
  user_id: 401090454808452,
  alternate_email_id: 123456789012345
)
```

> Example response

```json
{
	"message": "SUCCESS",
	"resultCode": 0,
	"result": {
		"id": 123456789012345,
		"email": "John.Doe@smartsheet.com",
		"confirmed": true
	}
}
```

`POST /users/{userId}/alternateemails/{alternateEmailId}/makeprimary`

Makes the specified alternate email address to become the primary email address for the specified user.

<aside class="notice">This operation is only available to system administrators of an Enterprise account. <a href="https://www.smartsheet.com/product/enterprise-deployment">Learn more</a> about the Enterprise platform.</aside>

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= RETURNS %> | [Result object](#result-object) containing the [AlternateEmail object](#alternateemail-object) that is now the primary email address
<%= ERRORS %> | If an error occurs because the special permission is not granted to change primary email address, contact Smartsheet (<a href="mailto:api@smartsheet.com">api@smartsheet.com</a>) for assistance to enable this feature.<br/><br/>If an error occurs because the specified user has a personal email address as the primary email address (that is. the email address domain cannot be [validated](<%= USER_AUTO_PROVISIONING_URL %>), the specified user needs to manually change the primary email address in the [Personal Settings](<%= PERSONAL_SETTINGS_MANAGE_EMAIL_URL %>).
<%= SCOPE %> | ADMIN_USERS

<aside class="notice">The alternate email address can only be made primary if both conditions are met:<ul><li>The primary email address <a href="<%= USER_AUTO_PROVISIONING_URL %>">domain is validated</a></li><li>The alternate email address is confirmed or the alternate email address <a href="<%= USER_AUTO_PROVISIONING_URL %>">domain is validated</a></li></ul></aside>

### Delete Alternate Email

> Example request: delete alternate email

```shell
curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails/{alternatEmailId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  userId: 401090454808452,
  alternateEmailId: 123456789012345
};

// Delete alternate email address
smartsheet.users.deleteAlternateEmail(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.UserResources.DeleteAlternateEmail(
  401090454808452,        // long userId
  123456789012345         // long altEmailId
);
```

```java
smartsheet.userResources().deleteAlternateEmail(
  401090454808452L,        // long userId
  123456789012345L         // long altEmailId
);
```

```python
smartsheet_client.Users.delete_alternate_email(
  401090454808452,        # user_id
  123456789012345)        # alternate_email_id
```

```ruby
smartsheet.users.alternate_emails.delete(
  user_id: 401090454808452,
  alternate_email_id: 123456789012345
)
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0
}
```

`DELETE /users/{userId}/alternateemails/{alternateEmailId}`

Deletes the specified alternate email address for the specified user.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)
<%= SCOPE %> | ADMIN_USERS

### Get Alternate Email

> Example request: get alternate email

```shell
curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails/{alternateEmailId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  userId: 401090454808452,
  alternateEmailId: 123456789012345
};

// Get alternate email address
smartsheet.users.getAlternateEmail(options)
  .then(function(email) {
    console.log(email);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.UserResources.GetAlternateEmail(
  401090454808452,        // long userId
  123456789012345         // long altEmailId
);
```

```java
smartsheet.userResources().getAlternateEmail(
  401090454808452L,        // long userId
  123456789012345L         // long altEmailId
);
```

```python
alt_email = smartsheet_client.Users.get_alternate_email(
  401090454808452,        # user_id
  123456789012345)        # alternate_email_id
```

```ruby
alt_email = smartsheet.users.alternate_emails.get(
  user_id: 401090454808452,
  alternate_email_id: 123456789012345
)
```

> Example response

```json
{
	"id": 123456789012345,
	"email": "John.Doe@smartsheet.com",
	"confirmed": true
}
```

`GET /users/{userId}/alternateemails/{alternateEmailId}`

Gets the specified alternate email. 

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [AlternateEmail object](#alternateemail-object)<br/><br/>
<%= SCOPE %> | READ_USERS

### List Alternate Emails

> Example request: list alternate emails

```shell
curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  userId: 123456789012345
};

// List alternate email addresses
smartsheet.users.listAlternateEmails(options)
  .then(function(emailList) {
    console.log(emailList);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Omit 'email' parameter and pagination parameters
PaginatedResult<AlternateEmail> results = smartsheet.UserResources.ListAlternateEmails(
  123456789012345,        // long userId
  null                    // PaginationParameters
);
```

```java
// Omit 'email' parameter and pagination parameters
PagedResult<AlternateEmail> results = smartsheet.userResources().listAlternateEmails(
  123456789012345L,        // long userId
  null                    // PaginationParameters
);
```

```python
response = smartsheet_client.Users.list_alternate_emails(
  123456789012345)        # user_id
emails = response.data
```

```ruby
response = smartsheet.users.alternate_emails.list(
  user_id: 123456789012345
)
emails = response[:data]
```

> Example response

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 1,
  "data": 
  [{
    "id": 123456789012345,
    "email": "John.Doe@smartsheet.com",
    "confirmed": true
  }]
}
```

`GET /users/{userId}/alternateemails`

Gets a list of the alternate emails for the specified user. 

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [AlternateEmail objects](#alternateemail-object)<br/><br/>
<%= SCOPE %> | READ_USERS

## Get Current User

> Example request: get current user

```shell
curl https://api.smartsheet.com/2.0/users/me \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
smartsheet.users.getCurrentUser()
  .then(function(userProfile) {
    console.log(userProfile);
  })
  .catch(function(error) {
      console.log(error);
    });
```

```csharp
UserProfile userProfile = smartsheet.UserResources.GetCurrentUser();
```

```java
UserProfile userProfile = smartsheet.userResources().getCurrentUser();
```

```python
user_profile = smartsheet_client.Users.get_current_user()
```

```ruby
user_profile = smartsheet.users.get_current
```

> Example response

```json
{
  "id": 48569348493401200,
  "email": "john.doe@smartsheet.com",
  "firstName": "John",
  "lastName": "Doe",
  "locale": "en_US",
  "timeZone": "US/Pacific",
  "account": {
    "name": "Team Smartsheet",
    "id": 942513719853956
  },
  "admin": true,
  "licensedSheetCreator": true,
  "groupAdmin": true,
  "resourceViewer": true,
  "jiraAdmin": false,
  "salesforceAdmin": false,
  "salesforceUser": false,
  "alternateEmails": [
    {
      "id": 12345,
      "email": "altEmail1@smartsheet.com",
      "confirmed": true                
    }
  ],
  "title": "Senior Sales Representative",
  "department": "Marketing",
  "company": "Smartsheet",
  "workPhone": "",
  "mobilePhone": "206 123-4567",
  "role": "Sales",
  "profileImage": {
    "imageId": "u!1!8ljad7w9-aY!AsDeH0wWv1Y!y9VvAgUOFdg",
    "height": 1050,
    "width": 1050
  },
  "sheetCount": 3,
  "lastLogin": "2016-08-15T18:32:47Z",
  "customWelcomeScreenViewed": "2016-08-12T12:15:47Z"
}
```

`GET /users/me`

Gets the current user.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional): When specified with a value of **groups**, response includes an array of groups (groupId, name, and description only) that the user is a member of. **NOTE:** use [assume user](#assume-user) if querying about a user other than the current user.
<%= RETURNS %> | [UserProfile object](#userprofile-object)<br/><br/><b>NOTE:</b> For system administrators, the following UserProfile attributes are included in the response:<ul><li>**customWelcomeScreenViewed** (only returned when an Enterprise user has viewed the [Custom Welcome Screen](<%= CUSTOM_WELCOME_SCREEN_URL %>))</li><li>**lastLogin** (only returned if the user has logged in)</li><li>**sheetCount** (only returned if the **status** attribute is **ACTIVE**)</li></ul>
<%= SCOPE %> | all scopes

## Get User

> Example request: get user

```shell
curl https://api.smartsheet.com/2.0/users/{userId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
	id: 48569348493401200	// Id of user
};

// Get user
smartsheet.users.getUser(options)
  .then(function(userProfile) {
    console.log(userProfile)
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
UserProfile userProfile = smartsheet.UserResources.GetUser(
  48569348493401200           // long userId
);
```

```java
UserProfile userProfile = smartsheet.userResources().getUser(
  48569348493401200L           // long userId
);
```

```python
user_profile = smartsheet_client.Users.get_user(
  48569348493401200)          # user_id
```

```ruby
user_profile = smartsheet.users.get(
  user_id: 48569348493401200
)
```

> Example response

```json
{
  "id": 48569348493401200,
  "email": "john.doe@smartsheet.com",
  "firstName": "John",
  "lastName": "Doe",
  "locale": "en_US",
  "timeZone": "US/Pacific",
  "account": {
    "name": "Team Smartsheet",
    "id": 942513719853956
  },
  "admin": true,
  "licensedSheetCreator": true,
  "groupAdmin": true,
  "resourceViewer": true,
  "jiraAdmin": false,
  "salesforceAdmin": false,
  "salesforceUser": false,
  "alternateEmails": [
    {
      "id": 12345,
      "email": "altEmail1@smartsheet.com",
      "confirmed": true                
    }
  ],
  "title": "Senior Sales Representative",
  "department": "Marketing",
  "company": "Smartsheet",
  "workPhone": "",
  "mobilePhone": "206 123-4567",
  "role": "Sales",
  "profileImage": {
    "imageId": "u!1!8ljad7w9-aY!AsDeH0wWv1Y!y9VvAgUOFdg",
    "height": 1050,
    "width": 1050
  },
  "sheetCount": 3,
  "lastLogin": "2016-08-15T18:32:47Z",
  "customWelcomeScreenViewed": "2016-08-12T12:15:47Z"
}
```

`GET /users/{userId}`

Gets the user specified in the URL. 

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [UserProfile object](#userprofile-object)<br/><br/><b>NOTE:</b> For system administrators, the following UserProfile attributes are included in the response):<ul><li>**admin**</li><li>**customWelcomeScreenViewed** (only returned when an Enterprise user has viewed the [Custom Welcome Screen](<%= CUSTOM_WELCOME_SCREEN_URL %>))</li><li>**groupAdmin**</li><li>**lastLogin** (only returned if the user has logged in)</li><li>**licensedSheetCreator**</li><li>**resourceViewer**</li><li>**sheetCount** (only returned if the **status** attribute is **ACTIVE**)</li><li>**status**</li></ul>
<%= SCOPE %> | READ_USERS

## List Users

> Example request: list users

```shell
curl 'https://api.smartsheet.com/2.0/users?email=john.doe@smartsheet.com&include=lastLogin' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript 
smartsheet.users.listAllUsers()
	.then(function(userList) {
		console.log(userList)
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Sample 1: Omit 'email' parameter and pagination parameters
PaginatedResult<User> users = smartsheet.UserResources.ListUsers(
  null,               // IEnumerable<string> emails
  null                // PaginationParameters
);

// Sample 2: Specify 'email' parameter with value of "john.doe@smartsheet.com" and 'includeAll' parameter with value of 'true'
PaginatedResult<User> users = smartsheet.UserResources.ListUsers(
  new string[] { "john.doe@smartsheet.com" },
  new PaginationParameters(
    true, // includeAll
    null, // int pageSize
    null) // int page
);
```

```java
// Sample 1: Omit 'email' parameter and pagination parameters
PagedResult<User> users = smartsheet.userResources().listUsers(
  null,       // Set<String> email
  null        // PaginationParameters
);

// Sample 2: Specify pagination parameter 'includeAll' 
PaginationParameters parameters = new PaginationParameters()
  .setIncludeAll(true);

// Specify 'email' parameter with value of "john.doe@smartsheet.com" and 'includeAll' parameter with value of 'true'
PagedResult<User> users = smartsheet.userResources().listUsers( new HashSet(Arrays.asList("john.doe@smartsheet.com")), parameters);
```

```python
# Sample 1; List all
response = smartsheet_client.Users.list_users(include_all=True)
users = response.data

# Sample 2: Paginate the list
response = smartsheet_client.Users.list_users(
  page_size=100,
  page=1)
pages = response.total_pages
users = response.data
```

```ruby
response = smartsheet.users.list
users = response[:data]
```

> Example response

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 1,
  "data": [
    {
      "id": 94094820842,
      "email": "john.doe@smartsheet.com",
      "name": "John Doe",
      "firstName": "John",
      "lastName": "Doe",
      "profileImage": {
        "imageId": "u!1!8ljad7w9-aY!AsDeH0wWv1Y!y9VvAgUOFdg",
        "height": 1050,
        "width": 1050
      },
      "status": "ACTIVE",
      "admin": true,
      "licensedSheetCreator": true,
      "groupAdmin": true,
      "resourceViewer": true,
      "sheetCount": 3,
      "lastLogin": "2016-08-15T18:32:47Z",
      "customWelcomeScreenViewed": "2016-08-12T12:15:47Z"
    }
  ]
}
```

`GET /users`

Gets a list of users in the organization account. To filter by email, use the optional **email** query string parameter to specify a list of users' email addresses.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **email** (optional): Comma-separated list of email addresses on which to filter the results.
 | **include** (optional): When specified with a value of **lastLogin**, response includes the **lastLogin** attribute for each [User object](#user-object) if:<br/><ul><li>the request is submitted by a system administrator, and</li><li>the returned [IndexResult object](#indexresult-object) that contains a maximum of 100 [User objects](#user-object).</li></ul>
 | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [User objects](#user-object)<br/><br/><b>NOTE:</b> If the API request is submitted by a system administrator, the following User object attributes are included in the response (else, they are omitted from the response):<ul><li>**admin**</li><li>**groupAdmin**</li><li>**licensedSheetCreator**</li><li>**resourceViewer**</li><li>**sheetCount** (omitted if the **status** attribute is not **ACTIVE**)</li><li>**status**</li></ul><br/><b>NOTE:</b> If the API request is submitted by a system administrator of an Enterprise account, and [Custom Welcome Screen](<%= CUSTOM_WELCOME_SCREEN_URL %>) is enabled, the following User object attributes are included in the response (else, they are omitted from the response):<ul><li>**customWelcomeScreenViewed** (omitted if the user has never viewed the Custom Welcome Screen)</li></ul>
<%= SCOPE %> | READ_USERS

## Remove User

> Example request: remove user

```shell
curl 'https://api.smartsheet.com/2.0/users/{userId}?transferTo=USER_Id&removeFromSharing=true' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
	id: 94094820842 // Id of User
};

// Remove user
smartsheet.users.removeUser(options)
	.then(function(results) {
		console.log(results)
	})	
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Transfer ownership of groups and sheets to another user and remove the user from sharing
smartsheet.UserResources.RemoveUser(
  94094820842,                // long userId
  transferToUserId,           // Nullable<long> transferTo
  true,                       // Nullable<bool> transferSheets
  true                        // Nullable<bool> removeFromSharing
);
```

```java
// Transfer ownership of groups and sheets to another user and remove the user from sharing
DeleteUserParameters parameters = new DeleteUserParameters(
  62123820842L,       // long transferToUserId
  true,               // Boolean transferSheets
  true                // Boolean removeFromSharing
);
smartsheet.userResources().deleteUser(
  94094820842L,        // long userId
  parameters
);
```

```python
smartsheet_client.Users.remove_user(
  94094820842,                # user_id
  transfer_to=62123820842,    # ownership of groups and sheets transfer to user_id
  remove_from_sharing=True)
```

```ruby
smartsheet.users.remove(
  user_id: 94094820842
)
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0
}
```

`DELETE /users/{userId}`

Removes a user from an organization account. User is transitioned to a free collaborator with read-only access to owned reports, sheets, Sights, workspaces, and any shared templates (unless those are optionally transferred to another user). 

<aside class="notice">This operation is only available to system administrators.</aside>

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **removeFromSharing** (optional): Set to **true** to remove the user from sharing for all sheets/workspaces in the organization account. If not specified, user is not removed from sharing.
  | **transferSheets** (optional): If **true**, and **transferTo** is specified, the removed user's sheets are transferred.  Else, sheets are not transferred.  Defaults to **false**.
  | **transferTo** (required if user owns groups): The Id of the user to transfer ownership to.  If the user being removed owns groups, they are transferred to this user.  If the user owns sheets, *and* **transferSheets** is true, the removed user's sheets are transferred to this user.
<%= RETURNS %> | [Result object](#result-object)
<%= SCOPE %> | ADMIN_USERS

<aside class="notice">If the <b>transferTo</b> parameter is specified and the removed user owns groups, the user specified via the <b>transferTo</b> parameter must have group admin rights.</aside>

<aside class="notice">The <b>transferTo</b> and <b>transferSheets</b> parameters cannot be specified for a user who has not yet accepted an invitation to join the organization account (that is, if user <b>status=PENDING</b>).</aside>

## Update User

> Example request: update user

```shell
curl https://api.smartsheet.com/2.0/users/{userId} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"admin": true, "licensedSheetCreator": true}'
```

```javascript
// Specify updated user properties
var user = {
	"admin": true,
	"licensedSheetCreator": true
};

// Set options
var options = {
  id: 82349925918590, // Id of User
  body: user
	};

// Update user
smartsheet.users.updateUser(options)
	.then(function(updatedUser) {
		console.log(updatedUser)
	}).catch(function(error) {
		console.log(error);
	});
```

```csharp
// Specify updated user properties
User userSpecification = new User
{
  Id = 82349925918590,
  Admin = true,
  LicensedSheetCreator = true
};

// Update user
User updatedUser = smartsheet.UserResources.UpdateUser(
  userSpecification
);
```

```java
// Specify updated user properties
User userSpecification = new User();
userSpecification.setLicensedSheetCreator(true)
  .setAdmin(true)
  .setId(82349925918590L);        // long userId

// Update user
User updatedUser = smartsheet.userResources().updateUser(userSpecification);
```

```python
updated_user = smartsheet_client.Users.update_user(
  82349925918590,     # user_id
  smartsheet.models.User({
    'licensed_sheet_creator': True,
    'admin': True
  })
)
```

```ruby
# Specify updated user properties
body = {
  admin: false,
  licensed_sheet_creator: true,
  first_name: 'Johnny',
  last_name: 'Doeford',
  resource_viewer: true
}

# Update user
response = smartsheet.users.update(
  user_id: 48569348493401200,
  body: body
)
updated_user = response[:result]
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": {
    "admin": true,
    "licensedSheetCreator": true
  }
}
```

`PUT /users/{userId}`

Updates the user specified in the URL.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [User object](#user-object) containing at least one of the following attributes:<ul><li>**admin** (required)</li><li>**licensedSheetCreator** (required)</li><li>**firstName** (optional)</li><li>**groupAdmin** (optional)</li><li>**lastName** (optional)</li><li>**resourceViewer** (optional)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the [User object](#user-object) for the updated user
<%= SCOPE %> | ADMIN_USERS

## Update User Profile Image

> Example request: update user profile image

```shell
curl 'https://api.smartsheet.com/2.0/users/{userId}/profileimage' \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: image/jpeg" \
-H 'Content-Disposition: attachment; filename=janeroe.jpg' \
-X POST \
--data-binary @janeroe.jpg
```

```javascript
// Not yet implemented
```

```csharp
User myUser = smartsheet.UserResources.AddProfileImage(
  3173821341106052,                // long userId
  "../path/to/mrgoodlookin.jpg",   // string file
  "image/jpeg"                     // string fileType
);
```

```java
// Not yet implemented
```

```python
# Not yet implemented
```

```ruby
# Not yet implemented
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": {
    "email": "jane.roe@smartsheet.com",
    "name": "Jane Roe",
    "firstName": "Jane",
    "lastName": "Row",
    "profileImage": {
      "imageId": "u!1!nAtdn5RJB_o!k6_e_3h2R3w!wmYXPek-yVD",
      "height": 1050,
      "width": 1050
    },
    "id": 3173821341106052
  }
}
```

`POST /users/{userId}/profileimage`

Uploads an image to the user profile. 

     |     |
-----|-----|
<%= HEADERS %> | See [Simple Uploads](#simple-uploads) for information about required headers.
<%= REQUEST %> | Binary content for the file
<%= RETURNS %> | [Result object](#result-object) containing the [User object](#user-object) for the updated user.
<%= SCOPE %> | WRITE_SHEETS

<aside class="notice">Uploading a profile image differs from <a href="#add-image-to-cell">Adding an Image to a Cell</a> in the following ways:<ul><li>A <b>Content-Length</b> header is not required</li><li>Allowable file types are limited to: gif, jpg, and png</li><li>Maximum file size is determined by the following rules:<ul><li>If you have not defined a custom size and the image is larger than 1050 x 1050 pixels, Smartsheet scales the image down to 1050 x 1050</li><li>If you have defined a custom size, Smartsheet uses that as the file size max</li></ul></li><li>If the image is not square, Smartsheet uses a solid color to pad the image</li></ul></aside>

# Workspaces

## <%= OBJECTS %>

### Workspace Object

> Example: Workspace object

```json
{
  "sheets": [],
  "accessLevel": "OWNER",
  "id": 7116448184199044,
  "name": "New workspace",
  "permalink": "https://app.smartsheet.com/b/home?lx=8Z0XuFUEAkxmHCSsMw4Zgg"
}
```

     |     |     |
-----|-----|-----|
**id** | number | Workspace Id
**accessLevel** | string | User's permissions on the workspace
**favorite** | Boolean | Returned only if the user has marked the workspace as a favorite in their "Home" tab (value = **true**)
**folders** | [Folder](#folder-object)[] | Array of Folder objects
**name** | string | Workspace name
**permalink** | string | URL that represents a direct link to the workspace in Smartsheet
**reports** | [Report](#report-object)[] | Array of Report objects
**sheets** | [Sheet](#sheet-object)[] | Array of Sheet objects
**sights** | [Sight](#sight-object)[] | Array of Sight objects
**templates** | [Template](#template-object)[] | Array of Template objects

## Copy Workspace

> Example request: copy workspace

```shell
curl 'https://api.smartsheet.com/2.0/workspaces/{workspaceId}/copy?include=data'
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
-H "Content-Type: application/json"
-d '{"newName": "newWorkspaceName"}'
-X POST
```

```javascript
// Specify new workspace name
var body = {
  newName: "newWorkspaceName"
};

// Set elements to copy
var params = {
  include: "data,discussions",
  skipRemap: "cellLinks"
};

// Set options
var options = {
  workspaceId: 7116448184199044,
  body: body,
  queryParameters: params
};

// Copy workspace
smartsheet.workspaces.copyWorkspace(options)
  .then(function(copiedWorkspace) {
    console.log(copiedWorkspace);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify name for the new workspace
ContainerDestination destination = new ContainerDestination {
  NewName = "newWorkspaceName"
};

// Sample 1: Omit 'include' and 'skipRemap' parameters
Workspace workspace = smartsheet.WorkspaceResources.CopyWorkspace(
  7116448184199044,          // long workspaceId
  destination,
  null,                      // IEnumerable<WorkspaceCopyInclusion> include
  null                       // IEnumerable<WorkspaceRemapExclusion> skipRemap
);

// Sample 2: Specify 'include' parameter with value of "DATA", and 'skipRemap' parameter with value of "CELL_LINKS"
Workspace workspace = smartsheet.WorkspaceResources.CopyWorkspace(
  7116448184199044,           // long workspaceId
  destination,
  new WorkspaceCopyInclusion[] { WorkspaceCopyInclusion.DATA },
  new WorkspaceRemapExclusion[] { WorkspaceRemapExclusion.CELL_LINKS }
);
```

```java
// Specify name for the new workspace
ContainerDestination destination = new ContainerDestination();
destination.setNewName("newWorkspaceName");

// Sample 1: Omit 'include' and 'skipRemap' parameters
Workspace workspace = smartsheet.workspaceResources().copyWorkspace(
  7116448184199044L,          // long workspaceId
  destination,
  null,                       // EnumSet<WorkspaceCopyInclusion> includes
  null                        // EnumSet<WorkspaceRemapExclusion> skipRemap
);

// Sample 2: Specify 'include' parameter with value of "DATA", and 'skipRemap' parameter with value of "CELLLINKS"
Workspace workspace = smartsheet.workspaceResources().copyWorkspace(
  7116448184199044L,          // long workspaceId
  destination,
  EnumSet.of(WorkspaceCopyInclusion.DATA),
  EnumSet.of(WorkspaceRemapExclusion.CELLLINKS)
);
```

```python
new_workspace = smartsheet_client.Workspaces.copy_workspace(
  7116448184199044,           # workspace_id
  smartsheet.models.ContainerDestination({
    'new_name': 'newWorkspaceName'
  })
)
```

```ruby
# Specify details
body = {
  new_name: 'newWorkspaceName'
}

# Copy workspace
response = smartsheet.workspaces.copy(
  workspace_id: 7116448184199044,
  body: body
)
new_workspace = response[:result]
```

> Example response

```json
{
  "message": "SUCCESS",    
  "resultCode": 0,
  "result": {
    "id": 6282479888820100,
    "name": "newWorkspaceName",
    "accessLevel": "OWNER",
    "permalink": "https://{url}?lx=VL4YlIUnyYgASeX02grbLQ"
  }
}
```

`POST /workspaces/{workspaceId}/copy`

Creates a copy of the specified workspace.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- comma-separated list of elements to copy:<ul><li>**attachments**</li><li>**cellLinks**</li><li>**data** -- includes formatting</li><li>**discussions** -- includes comments</li><li>**filters**</li><li>**forms**</li><li>**ruleRecipients** -- includes notification recipients, must also include **rules** when using this attribute</li><li>**rules** -- includes notifications and workflow rules</li><li>**shares**</li><li>**all** - deprecated</li></ul><b>NOTE:</b> Cell history is not copied, regardless of which **include** parameter values are specified.
 | **skipRemap** (optional) -- comma-separated list of references to NOT re-map for the newly created workspace:<ul><li>**cellLinks**</li><li>**reports**</li><li>**sheetHyperlinks**</li><li>**sights**</li></ul>By default, all cell links, reports, sheet hyperlinks, and Sights that reference objects in the source workspace are re-mapped to reference corresponding objects in the newly created workspace. The **skipRemap** parameter can be specified to change that default behavior:<ul><li>If **cellLinks** is specified in the <b>skipRemap</b> parameter value, the cell links within the newly created workspace continue to point to the original source sheets.</li><li>If **reports** is specified in the <b>skipRemap</b> parameter value, the reports within the newly created workspace continue to point to the original source sheets.</li><li>If **sheetHyperlinks** is specified in the <b>skipRemap</b> parameter value, the sheet hyperlinks within the newly created workspace continue to point to the original source sheets.</li><li>If **sights** is specified in the <b>skipRemap</b> parameter value, the widgets within Sights in the newly created workspace continue to point to the original source sheets / reports.</li></ul>
<%= REQUEST %> | [ContainerDestination object](#containerdestination-object), limited to the following attribute:<ul><li>**newName** (string) - required</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing a [Workspace object](#workspace-object) for the newly created workspace
<%= SCOPE %> | ADMIN_WORKSPACES

## Create Workspace

> Example request: create workspace

```shell
curl https://api.smartsheet.com/2.0/workspaces \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{"name": "New workspace"}'
```

```javascript
// Specify workspace name
var workspace = {"name": "New workspace"};

// Set options
var options = {
  body: workspace
};

// Create workspace
smartsheet.workspaces.createWorkspace(options)
  .then(function(newWorkspace) {
    console.log(newWorkspace);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify workspace name
Workspace workspaceSpecification = new Workspace { Name = "New workspace" };

// Create workspace
Workspace newWorkspace = smartsheet.WorkspaceResources.CreateWorkspace(workspaceSpecification);
```

```java
// Specify workspace name
Workspace workspaceSpecification = new Workspace();
workspaceSpecification.setName("New workspace");

// Create workspace
Workspace newWorkspace = smartsheet.workspaceResources().createWorkspace(workspaceSpecification);
```

```python
workspace = smartsheet_client.Workspaces.create_workspace(
  smartsheet.models.Workspace({
    'name': 'New workspace'
  })
)
```

```ruby
# Specify details
body = {
  name: 'New workspace'
}

# Create the workspace
response = smartsheet.workspaces.create(
  body: body
)
workspace = response[:result]
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": {
    "accessLevel": "OWNER",
    "id": 7960873114331012,
    "name": "New workspace",
    "permalink": "https://app.smartsheet.com/b/home?lx=rBU8QqUVPCJ3geRgl7L8yQ"
  }
}
```

`POST /workspaces`

Creates a workspace.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Workspace object](#workspace-object), limited to the following attribute:<ul><li>**name** (string) - required</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing a [Workspace object](#workspace-object) for the newly created workspace
<%= SCOPE %> | ADMIN_WORKSPACES

## Delete Workspace

> Example request: delete workspace

```shell
curl https://api.smartsheet.com/2.0/workspaces/7960873114331012 \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-X DELETE
```

```javascript
// Set options
var options = {
  workspaceId: 6621332407379844
};

// Delete workspace
smartsheet.workspaces.deleteWorkspace(options)
  .then(function(results) {
    console.log(results);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
smartsheet.WorkspaceResources.DeleteWorkspace(
  6621332407379844                // long workspaceId
);
```

```java
smartsheet.workspaceResources().deleteWorkspace(
  6621332407379844L        // long workspaceId
);
```

```python
smartsheet_client.Workspaces.delete_workspace(
  6621332407379844)       # workspace_id
```

```ruby
smartsheet.workspaces.delete(
  workspace_id: 7116448184199044
)
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0
}
```

`DELETE /workspaces/{workspaceId}`

Deletes the specified workspace (and its contents).

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | [Result object](#result-object)
<%= SCOPE %> | ADMIN_WORKSPACES

## Get Workspace

> Example request: get workspace

```shell
curl https://api.smartsheet.com/2.0/workspaces/{workspaceid} \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set options
var options = {
  workspaceId: 7116448184199044
};

// Get workspace
smartsheet.workspaces.getWorkspace(options)
  .then(function(workspace) {
    console.log(workspace);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Sample 1: Omit 'loadAll' and 'include' parameters
Workspace workspace = smartsheet.WorkspaceResources.GetWorkspace(
  6621332407379844,           // long workspaceId
  null,                       // Nullable<bool> loadAll,
  null                        // IEnumerable<WorkspaceInclusion> include
);

// Sample 2: Specify 'loadAll' parameter with value of "false", and 'include' parameter with value of "source"
Workspace workspace = smartsheet.WorkspaceResources.GetWorkspace(
  6621332407379844,           // long workspaceId
  false,                      // Nullable<bool> loadAll,
  new WorkspaceInclusion[] { WorkspaceInclusion.SOURCE }
);
```

```java
// Sample 1: Omit 'loadAll' and 'include' parameters
Workspace workspace = smartsheet.workspaceResources().getWorkspace(
  6621332407379844L,      // long workspaceId
  null,                   // Boolean loadAll
  null                    // EnumSet<SourceInclusion> includes
);

// Sample 2: Specify 'loadAll' parameter with value of "false", and 'include' parameter with value of "source"
Workspace workspace = smartsheet.workspaceResources().getWorkspace(
  6621332407379844L,      // long workspaceId
  false,                  // Boolean loadAll
  EnumSet.of(SourceInclusion.SOURCE)
);
```

```python
workspace = smartsheet_client.Workspaces.get_workspace(
  6621332407379844)       # workspace_id
```

```ruby
response = smartsheet.workspaces.get(
  workspace_id: 7116448184199044
)
```

> Example response

```json
{
  "sheets": [
    {
      "id": 4583173393803140,
      "name": "sheet 1",
      "accessLevel": "OWNER",
      "permalink": "https://app.smartsheet.com/b/home?lx=8Z0XuFUEAkxmHCSsMw4Zg1",
      "createdAt": "2015-06-05T20:05:29Z",
      "modifiedAt": "2015-06-05T20:05:43Z"
    }
  ],
  "accessLevel": "OWNER",
  "id": 7116448184199044,
  "name": "New workspace",
  "permalink": "https://app.smartsheet.com/b/home?lx=8Z0XuFUEAkxmHCSsMw4Zgg"
}
```

`GET /workspaces/{workspaceid}`

Gets the specified workspace (and lists its contents).

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **loadAll** (optional) -- **true** or **false** (defaults to **false**)
	| **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>**ownerInfo** - owner's email address and user Id for each sheet</li><li>**source** - the [Source object](#source-object) for any sheet that was created from another report, sheet, Sight (aka dashboard), or template, if any</li><li>**sheetVersion** - current version number of each sheet</li></ul>
<%= RETURNS %> | [Workspace object](#workspace-object), populated according to the **include** parameter
<%= SCOPE %> | READ_SHEETS

<aside class="notice">By default, this operation only returns the top-level items in the workspace. To load all of the contents, including nested folders, include the <b>loadAll</b> query string parameter with a value of <b>true</b>.</aside>

<aside class="notice">If no folders, reports, sheets, Sights, or templates are present in the workspace, the corresponding attribute (for example, <b>folders</b>, <b>sheets</b>) is not present in the response.</aside>

## List Workspaces

> Example request: list workspaces

```shell
curl https://api.smartsheet.com/2.0/workspaces \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
smartsheet.workspaces.listWorkspaces()
	.then(function(workspaceList) {
		console.log(workspaceList);
	})
	.catch(function(error) {
		console.log(error);
	});
```

```csharp
// Omit pagination parameters
PaginatedResult<Workspace> workspaces = smartsheet.WorkspaceResources.ListWorkspaces(
  null                // PaginationParameters
);
```

```java
// Omit pagination parameters
PagedResult<Workspace> workspaces = smartsheet.workspaceResources().listWorkspaces(
  null        // PaginationParameters
);
```

```python
# Sample 1: List all
response = smartsheet_client.Workspaces.list_workspaces(include_all=True)
workspaces = response.data

# Sample 2: Paginate the list
response = smartsheet_client.Workspaces.list_workspaces(
  page_size=20,
  page=1)
pages = response.total_pages
workspaces = response.data
```

```ruby
response = smartsheet.workspaces.list
workspaces = response[:data]
```

> Example response

```json
{
  "pageNumber": 1,
  "pageSize": 100,
  "totalPages": 1,
  "totalCount": 2,
	"data": [
		{
			"accessLevel": "OWNER",
			"id": 3457273486960516,
			"name": "workspace 1",
			"permalink": "https://app.smartsheet.com/b/home?lx=JNL0bgXtXc0pzni9tzAc4g"
		},
		{
			"accessLevel": "OWNER",
			"id": 7960873114331012,
			"name": "workspace 2",
			"permalink": "https://app.smartsheet.com/b/home?lx=JLiJbgXtXc0pzni9tzAKiR"
		}
	]
}
```

`GET /workspaces`

Gets a list of workspaces that the user has access to. The list contains an abbreviated Workspace object for each workspace.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | [IndexResult object](#indexresult-object) containing an array of [Workspace objects](#workspace-object)
<%= SCOPE %> | READ_SHEETS

## Share Workspace

For details about workspace sharing, see [Workspace Sharing](#workspace-sharing).

## Update Workspace

> Example request: update workspace

```shell
curl https://api.smartsheet.com/2.0/workspaces/7960873114331012 \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X PUT \
-d '{"name": "Updated workspace"}'
```

```javascript
// Specify updated workspace properties
var workspace = {"name": "Updated workspace"};

// Set options
var options = {
  workspaceId: 7960873114331012,
  body: workspace
  };

// Update workspace
smartsheet.workspaces.updateWorkspace(options)
  .then(function(updatedWorkspace) {
    console.log(updatedWorkspace);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```csharp
// Specify updated workspace name
Workspace workspaceSpecification = new Workspace
{
  Id = 7960873114331012,
  Name = "Updated Workspace"
};

// Update workspace
Workspace updatedWorkspace = smartsheet.WorkspaceResources.UpdateWorkspace(
  workspaceSpecification
);
```

```java
// Specify updated workspace properties
Workspace workspaceSpecification = new Workspace();
workspaceSpecification.setName("Updated workspace")
  .setId(7960873114331012L);

// Update workspace
Workspace updatedWorkspace = smartsheet.workspaceResources().updateWorkspace(workspaceSpecification);
```

```python
updated_workspace = smartsheet_client.Workspaces.update_workspace(
  7960873114331012,       # workspace_id
  smartsheet.models.Workspace({
    'name': 'Updated workspace'
  })
)
```

```ruby
# Specify updated workspace properties
body = {
  name: 'Updated workspace'
}

# Update workspace
response = smartsheet.workspaces.update(
  workspace_id: 7960873114331012,
  body: body
)
```

> Example response

```json
{
  "message": "SUCCESS",
  "resultCode": 0,
  "result": {
    "accessLevel": "OWNER",
    "id": 7960873114331012,
    "name": "Updated workspace",
    "permalink": "https://app.smartsheet.com/b/home?lx=rBU8QqUVPCJ3geRgl7L8yQ"
  }
}
```

`PUT /workspaces/{workspaceId}`

Updates the workspace specified in the URL.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [Workspace object](#workspace-object) limited to the following attribute:<ul><li>**name** (string)</li></ul>
<%= RETURNS %> | [Result object](#result-object) containing the updated [Workspace object](#workspace-object)
<%= SCOPE %> | ADMIN_WORKSPACES

## <%= RELATED %>

### Workspace Folders

For details about working with folders in a workspace, see [Folders](#folders).

### Workspace Sheets

For details about working with sheets in a workspace, see [Sheets](#sheets).</br>
