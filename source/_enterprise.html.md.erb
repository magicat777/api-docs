# <span class="customTOCSectionHeading">Event Reporting</span>

The following section describes the specific event types and payloads returned from the Smartsheet Events API.

With Event Reporting, you can programmatically retrieve events that are occurring in your Smartsheet organization account. Examples of events are create, update, load, and delete of sheets, reports, dashboards, attachments, and users. Note: while the current list of events covers most of Smartsheet functionality, new events will be added to the list as Smartsheet introduces new functionality.

Some actions in Smartsheet are performed by system components. Therefore, the userId property in some response payloads refers to a system userId and not to a regular user. For example, the Smartsheet Events API shows 5629504736520068 as the userId when an anonymous user accesses a sheet that is published for anyone. 

The list of system users is displayed below. New system userIds may be incorporated to this list as new features and subsystems are incorporated to Smartsheet:

     |     |
-----|-----|
1688855062570884 | Data accessed/modified by Skype action (only possible if Smartsheet account is connected to Skype) |
2814754969413508 | Data accessed/modified by Trello import action (only possible if Smartsheet account is connected to Trello) |
3377704922834820 | Data accessed/modified due to Smartsheet cell-link |
3940654876256132 | Data accessed/modified by the Smartsheet Automation system |
5066554783098756 | Access to object published to any user in the Smartsheet organization account |
5629504736520068 | Access to Smartsheet object published to anyone |
6192454689941380 | Data accessed/modified by the Smartsheet Notification system |
7881304550205316 | Data accessed/modified by Smartsheet Form submission |

See <a href="https://smartsheet-platform.github.io/event-reporting-docs/" target="_blank">Event Reporting reference documentation</a> for details on each event type.

See [Authentication and Access Tokens](#authentication-and-access-tokens) for more information.

<aside class="notice">Event Reporting is a premium add-on for Enterprise and Premier plans only. For details on the Enterprise and Premier plans, see our <a href="https://www.smartsheet.com/pricing">Pricing</a> page.</aside>

# <%= OBJECTS %>

## Event Object

> Example: Event object

```json
{
  "eventId" : "4b12345abc444def333g149he2b15b3j",
  "objectType" : "SHEET",
  "action" : "CREATE",
  "objectId" : 345678901234,
  "eventTimestamp" : "2019-04-29T08:28:33Z",
  "userId" : 123457654321,
  "requestUserId" : 133445566778,
  "source" : "WEB_APP",
  "additionalDetails" : {
    "sheetName" : "Test Sheet"
  }
}
```

     |     |     |
-----|-----|-----|
**eventId** | string | Unique event identifier.
**objectType** | string | The Smartsheet resource impacted by the event, such as, SHEET or WORKSPACE.
**action** | string |  The action applied to the specified object, such as CREATE or DELETE.
**objectId** | string or long | The identifier of the object impacted by the event.
**eventTimestamp** | string | Date and time of the event. Defaults to ISO-8601 format. See [dates and times](#dates-and-times) for more information.
**userId** | long | User assumed as the one who initiated the event. Usually the `userId` property and the `requestUserId` property (below) have the same value. However, if the request is an API call with [`Assume-User` header](#assume-user) then the `userId` property identifies the user whose email matches the value in the `Assume-User` header.
**requestUserId** | long | User whose authentication credential is embedded in the request that initiated the event. For example, if the request is an API call with an [access token](#authentication-and-access-tokens) then `requestUserId` identifies the user whose data can be accessed via the access token (i.e., the user who authorized the creation of the access token). On the other hand, if the request comes from a UI session, then `requestUserId` identifies the user logged-in to the UI.
**accessTokenName** | string | Name of the access token embedded in the request. This property is omitted if there is no [access token](#authentication-and-access-tokens) in the request (i.e., it isn't an API call) or if the access token wasn't given a name when created (only access tokens generated via the Smartsheet desktop UI can be given a name at creation time).
**source** | string | Identifies the type of action that triggered the event.
**additionalDetails** | object | Container object for additional event-specific properties. Properties depend upon the event type. See <a href="https://smartsheet-platform.github.io/event-reporting-docs/" target="_blank">Event Reporting reference documentation</a> for details on each event type.

## StreamResult Object

> Example: StreamResult object

```json
{
  "nextStreamPosition": "XyzAb1234cdefghijklmnofpq",
  "moreAvailable": "false",
  "data": []
}
```

     |     |     |
-----|-----|-----|
**nextStreamPosition** | string | This string should be passed back to the next GET events call to obtain subsequent events
**moreAvailable** | Boolean | True if more results are available. This is typically due to event counts exceeding the `maxCount` parameter passed in
**data** | [Event](#event-object)[] | Array of event information.

# Get Events

> Example request: get events

```shell
// Example 1: Return events starting from the oldest event available
curl https://api.smartsheet.com/2.0/events?since=2010-01-01T00:00:00Z \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Accept-Encoding: gzip"

// Example 2: Return events from a given stream position on
curl https://api.smartsheet.com/2.0/events?streamPosition=XyzAb1234cdefghijklmnofpq \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Accept-Encoding: gzip"
```

```javascript
// Initialize the client
var client = require('smartsheet');
var smartsheet = client.createClient({
  accessToken: '1234',
  logLevel: 'info'
});

const currentDate = new Date();
const dateWeekAgo = currentDate.setDate(currentDate.getDate() - 7);
// The first call to the events reporting API
// requires the since query parameter.
// If you pass in an UNIX epoch date, numericDates must be true
let options = {
  queryParameters: {
    since: dateWeekAgo,
    maxCount: 10,
    numericDates: true
  }
}

function getEvents(options) {
  smartsheet.events.getEvents(options)
  .then((result) => {
    printNewSheetEvents(result);
    getNextStreamOfEvents(result.moreAvailable, result.nextStreamPosition);
  })
  .catch((error) => console.log(JSON.stringify(error)));
}

function getNextStreamOfEvents(moreEventsAvailable, nextStreamPosition) {
  // Subsequent calls require the streamPosition property
  options = {
    queryParameters: {
      streamPosition: nextStreamPosition,
      maxCount: 10
    }
  }

  if (moreEventsAvailable) {
    getEvents(options);
  } 
}

// This example is looking specifically for new sheet events
function printNewSheetEvents(result) {
  // Find all created sheets
  result.data.forEach(function (item) {
    if (item.objectType === "SHEET" && item.action === "CREATE") {
      console.log(item.additionalDetails.sheetName)
    }
  })
}

getEvents(options);
```

```csharp
class Program
{
  // This example is looking specifically for new sheet events
  private static void PrintNewSheetEventsInList(IList<Event> events)
  {
    //  enumerate all events in the list of returned events
    foreach (Event _event in events)
    {
      // find all created sheets
      if (_event.ObjectType == EventObjectType.SHEET && _event.Action == EventAction.CREATE)
      {
        // additional details are available for some events, they can be accessed as a Dictionary
        // in the AdditionalDetails property
        if (_event.AdditionalDetails.ContainsKey("sheetName"))
        {
          Console.WriteLine(_event.AdditionalDetails["sheetName"]);
        }
      }
    }
  }

  static void Main(string[] args)
  {
    // Initialize client
    SmartsheetClient smartsheet = new SmartsheetBuilder().Build();

    // Begin listing events in the stream starting with the `since` parameter
    DateTime lastWeek = DateTime.Today.AddDays(-7);
    // This example looks at the previous 7 days of events by providing a since argument set to last week's date 
    EventResult eventResult = smartsheet.EventResources.ListEvents(lastWeek, null, 1000, false);
    PrintNewSheetEventsInList(eventResult.Data);

    // Continue listing events in the stream by using the `StreamPosition`, if the previous response indicates 
    // that more data is available.
    while(eventResult.MoreAvailable == true)
    {
      eventResult = smartsheet.EventResources.ListEvents(null, eventResult.NextStreamPosition, 10000, true);
      PrintNewSheetEventsInList(eventResult.Data);
    }
  }
}
```

```java
public class Sample {
    
  public static void main(String[] args) throws SmartsheetException {
    SampleProgram();
  }
  
  // This example is looking specifically for new sheet events
  private static void printNewSheetEventsInList(List<Event> events)
  {
    //  Enumerate all events in the list of returned events
    for(Event event: events) {
      // find all created sheets
      if(event.getObjectType() == EventObjectType.SHEET && event.getAction() == EventAction.CREATE) {
        // additional details are available for some events, they can be accessed as a HashMap
        // in the additionalDetails property
        System.out.println(event.getAdditionalDetails().get("sheetName"));
      }
    }
  }

  public static void SampleProgram() throws SmartsheetException{

    Smartsheet smartsheet = SmartsheetFactory.createDefaultClient();

    // Begin listing events in the stream starting with the `since` parameter
    Date lastWeek = new Date(System.currentTimeMillis() - TimeUnit.DAYS.toMillis(7));
    // this example looks at the previous 7 days of events by providing a since argument set to last week's date 
    EventResult eventResult = smartsheet.eventResources().listEvents(lastWeek, null, 1000, false);
    printNewSheetEventsInList(eventResult.getData());

    // Continue listing events in the stream by using the `streamPosition`, if the previous response indicates 
    // that more data is available.
    while(eventResult.getMoreAvailable()) {
      eventResult = smartsheet.eventResources().listEvents(null, eventResult.getNextStreamPosition(), 10000, true);
      printNewSheetEventsInList(eventResult.getData());
    }
  }
}
```

```python
# This example is looking specifically for new sheet events
def print_new_sheet_events_in_list(events_list):
  # Enumerate all events in the list of returned events
  for event in events_list.data:
    # Find all created sheets
    if event.object_type == smartsheet.models.enums.EventObjectType.SHEET and event.action == smartsheet.models.enums.EventAction.CREATE:
        # Additional details are available for some events, they can be accessed as a Python dictionary
        # in the additional_details attribute
        print(event.additional_details['sheetName'])

smartsheet_client = smartsheet.Smartsheet()
smartsheet_client.errors_as_exceptions()

# Begin listing events in the stream starting with the `since` parameter
last_week = datetime.now() - timedelta(days=7)
# This example looks at the previous 7 days of events by providing a `since` argument set to last week's date in ISO format
events_list = smartsheet_client.Events.list_events(since=last_week.isoformat(), max_count=1000)
print_new_sheet_events_in_list(events_list)

# Continue listing events in the stream by using the stream_position, if the previous response indicates that more 
# data is available.
while events_list.more_available:
  events_list = smartsheet_client.Events.list_events(stream_position=events_list.next_stream_position, max_count=10000,
                                      numeric_dates=True)
  print_new_sheet_events_in_list(events_list)
```

```ruby
require 'smartsheet'
require 'time'
require 'date'
require 'pp'

# Initialize the client - use your access token here
$smartsheet_client = Smartsheet::Client.new(token: '1234')
# The `client` variable now contains access to all of the APIs

today = (DateTime.now)
date_week_ago = (today - 7).to_time.utc.iso8601 


def get_events(params)
  result = $smartsheet_client.events.get(params: params)
  # pp result
  print_new_sheet_events(result[:data])

  more_events_available = result[:more_available]
  next_stream_position = result[:next_stream_position]
  get_next_stream_of_events(more_events_available, next_stream_position)
end 

# Subsequent calls require the streamPosition property
def get_next_stream_of_events(more_events_available, next_stream_position)
  params = {
    stream_position: next_stream_position,
    max_count: 1
  }

  if more_events_available 
    get_events(params);
  end
end 

# This example is looking specifically for new sheet events
def print_new_sheet_events(data)
  data.each do |value|
    # Find all created sheets
    if value[:object_type] == "SHEET" && value[:action] == "CREATE"
        pp value
    end    
  end
end 


begin
  params = {
    since: date_week_ago,
    max_count: 1
  }

  # The first call to the events reporting API
  # requires the since query parameter.
  # If you pass in an UNIX epoch date, numericDates must be true
  get_events(params)

rescue Smartsheet::ApiError => e
  puts "Error Code: #{e.error_code}"
  puts "Message: #{e.message}"
  puts "Ref Id: #{e.ref_id}"
end
```

> Example response

```json
{
    "nextStreamPosition": "XyzAb1234cdefghijklmnofpq",
    "moreAvailable": "false",
    "data": [{
        "eventId" : "4b12345abc444def333g149he2b15b3j",
        "objectType" : "SHEET",
        "action" : "LOAD",
        "objectId" : 345678901234,
        "eventTimestamp" : 2019-04-29T08:28:33Z,
        "userId" : 123457654321,
        "requestUserId" : 133445566778,
        "source" : "WEB_APP",
        "additionalDetails" : { }
    }]
}
```

`GET /events`

Gets events that are occurring in your Smartsheet organization account. Examples of events are creation, update, load, and delete of sheets, reports, dashboards, attachments, users, etc.

Each event type has a distinct combination of `objectType` and `action`. Many event types have additional information returned under an `additionalDetails` object. See the <a href="https://smartsheet-platform.github.io/event-reporting-docs/" target="_blank">Event Reporting reference documentation</a> for a complete list of all currently supported events, including their respective objectType, action, and additionalDetails properties.

<aside class="notice">Event Reporting is a premium add-on for Enterprise and Premier plans only. For details on the Enterprise and Premier plans, see our <a href="https://www.smartsheet.com/pricing">Pricing</a> page.</aside>

<aside class="notice">This operation is only available to system administrators.</aside>

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
 | Accept-Encoding -- Strongly recommended to make sure payload is compressed. Must be set to one of the following values:<ul><li>**deflate**</li><li>**gzip**</li></ul>
<%= PARAMETERS %> | **since**: Starting time for events to return. Intended for use only at client startup or recovery. <br/>This is intended for backfilling data and not for fine-grained date-based queries. Therefore, resolution is limited to the nearest hour. Interpreted as ISO-8601 format, unless `numericDates` is specified (see details about numericDates below) <br/>You must pass in a value for either `since` or `streamPosition` and never both.
  | **streamPosition**: Indicates next set of events to return. Use value of `nextStreamPosition` returned from the previous call.<br/>You must pass in a value for either `since` or `streamPosition` and never both.
  | **maxCount** (optional): Maximum number of events to return as response to this call. <br/>Must be between 1 through 10,000 (inclusive).<br/>Defaults to 1,000 if not specified.
  | **numericDates** (optional): If true, dates are accepted and returned in Unix epoch time (milliseconds since midnight on January 1, 1970 in UTC time). <br/>Default is false, which means ISO-8601 format.
<%= RETURNS %> | [StreamResult object](#streamresult-object), populated according to the specified parameters
<%= SCOPE %> | READ_EVENTS

