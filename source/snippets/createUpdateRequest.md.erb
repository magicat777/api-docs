> Example request: create update request

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/updaterequests \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{ 
  "sendTo": [ 
    {"email": "recipient1@smartsheet.com"}, 
    {"email": "recipient2@smartsheet.com"} 
  ], 
  "subject": "Sample Monthly Update Request", 
  "message": "Please update my online sheet.", 
  "ccMe": false, 
  "rowIds": [4508292249610116, 2256492435924868], 
  "columnIds": [4508284196546436, 2256484382861188], 
  "includeAttachments": false, 
  "includeDiscussions": false 
}' 
```

```csharp
// Specify recipients
Recipient[] recipientSpecification = new Recipient[] {
  new Recipient { Email = "recipient1@smartsheet.com"}
};

// Configure update request
UpdateRequest updateRequestSpecification = new UpdateRequest
{
  SendTo = recipientSpecification,
  Subject = "Sample Monthly Update Request",
  Message = "Please update my online sheet.",
  CcMe = true,
  RowIds = new long[] { 1123834706323332, 5627434333693828 },
  ColumnIds = new long[] { 4549065498224516, 2297265684539268 },
  IncludeAttachments = true,
  IncludeDiscussions = true
};

// Send update request via email
UpdateRequest newUpdateRequest = smartsheet.SheetResources.UpdateRequestResources.CreateUpdateRequest(
  3285357287499652,       // sheetId
  updateRequestSpecification
);
```

```javascript
// Set body
var body = {
  rowIds: [
    1049041315358596,
    5552640942729092
  ],
  includeAttachments: true,
  includeDiscussions: false,
  sendTo: [
    {
      email: "jane.roe@smartsheet.com"    
    }
  ],
  subject: "Sample Monthly Update Request",
  message: "Please update my online sheet.",
  schedule: {
    type: "DAILY",
    startAt: "2016-04-01T00:00:00Z",
    endAt: "2018-12-31T00:00:00Z",
    dayDescriptors: [
      "WEEKDAY"
    ]
  }
};

// Set options
var options = {
  sheetId: 1696801624483716,
  body: body
};

// Create update request
smartsheet.sheets.createUpdateRequest(options)
  .then(function(updatedRequest) {
    console.log(updatedRequest);
  })
  .catch(function(error) {
    console.log(error);
  });
```

```java
// Specify recipients
RecipientEmail recipientA = new RecipientEmail()
  .setEmail("recipient1@smartsheet.com");

RecipientEmail recipientB = new RecipientEmail()
  .setEmail("recipient2@smartsheet.com");

List<Recipient> recipients = Arrays.asList(recipientA, recipientB);

// Specify parameters for update request
UpdateRequest updateRequest = new UpdateRequest();
updateRequest.setRowIds((Arrays.asList(3344087179913092L, 7847686807283588L));
updateRequest.setSendTo(recipients)
  .setSubject("Sample Monthly Update Request")
  .setMessage("Please update my online sheet.")
  .setColumnIds(Arrays.asList(1735559124150148L, 1735559124150148L))
  .setIncludeAttachments(false)
  .setIncludeDiscussions(false);

// Create update request
smartsheet.sheetResources().updateRequestResources().createUpdateRequest(
  1639534409607044L,      // long sheetId
  updateRequest
);
```

```python
# Configure email
email_spec = ss_client.models.MultiRowEmail()
email_spec.send_to = [
  ss_client.models.Recipient({'email': 'recipient1@smartsheet.com'}),
  ss_client.models.Recipient({'email': 'recipient2@smartsheet.com'})]
email_spec.subject = 'Please update based on meeting'
email_spec.message = 'some message'
email_spec.cc_me = False
email_spec.row_ids = [6809535313667972]
email_spec.column_ids = [7036894123976580]

# Send update request
new_update_request = ss_client.Sheets.create_update_request(
  5190835902932868,           # sheet_id
  email_spec
)
```

```ruby
body = {
  send_to: [
    {
      email: 'jane.roe@smartsheet.com'
    }
  ],
  row_ids: [
    7886095586224004,
    2661640373069700
  ],
  column_ids: [
    6962516556310404,
    3584816835782532
  ],
  include_attachments: true,
  include_discussions: true,
  layout: 'VERTICAL',
  subject: 'Sample Monthly Update Request',
  message: 'Please update my online sheet.',
  cc_me: false,
  schedule: {
    type: 'MONTHLY',
    start_at: '2016-04-01T19:00:00Z',
    end_at: '2016-12-31T07:00:00Z',
    day_descriptors: [
      'WEEKDAY'
    ]
  }
}

new_update_request = smartsheet.update_requests.create(
  sheet_id: 7820135625975684,
  body: body
)
```

> Example response

<%= partial "snippets/createScheduledUpdateRequest_response.md.erb" %>

> Example request: create immediate update request

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/updaterequests \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{ 
  "sendTo": [ 
    {"email": "recipient1@smartsheet.com"} 
  ], 
  "subject": "Sample Monthly Update Request", 
  "message": "Please update my online sheet.", 
  "ccMe": false, 
  "rowIds": [7886095586224004], 
  "columnIds": [6962516556310404, 3584816835782532], 
  "includeAttachments": true, 
  "includeDiscussions": true, 
  "schedule": { 
  "type": "MONTHLY", 
  "startAt": "2016-04-01T19:00:00Z", 
  "endAt": "2016-12-31T07:00:00Z", 
  "dayOfMonth": 1, 
  "repeatEvery": 1 
	} 
}'
```

```javascript
// Not yet implemented
```

```csharp
// Example schedules
Schedule the28thOfEachMonth = new Schedule
{
  Type = ScheduleType.MONTHLY,
  DayOfMonth = 28,
  StartAt = new DateTime(2020, 1, 1, 11, 59, 00),
  EndAt = new DateTime(2025, 1, 31, 11, 59, 00),
};

Schedule everyThreeDaysStartingToday = new Schedule
{
  Type = ScheduleType.DAILY,
  RepeatEvery = 3,
  StartAt = DateTime.Today
};

Schedule tuesdaysAndThursdaysWeekly = new Schedule()
{
  Type = ScheduleType.DAILY,
  DayDescriptors = new List<DayDescriptor>() {
    DayDescriptor.TUESDAY, DayDescriptor.THURSDAY
  },
  StartAt = DateTime.Today
};

Schedule independenceDay = new Schedule()
{
  Type = ScheduleType.YEARLY,
  RepeatEvery = 1,
  StartAt = new DateTime(2020, 7, 4, 12, 30, 00)
};

// Specify recipients
Recipient[] recipientSpecification = new Recipient[] {
  new Recipient { Email = "recipient1@smartsheet.com"}
};

// Create update schedule
Schedule secondMondayOfEachMonth = new Schedule
{
  Type = ScheduleType.MONTHLY,
  DayDescriptors = new List<DayDescriptor>() {
    DayDescriptor.MONDAY
  },
  DayOrdinal = DayOrdinal.SECOND,
  StartAt = new DateTime(2020, 1, 1, 11, 59, 00),
  EndAt = new DateTime(2025, 1, 31, 11, 59, 00),
};

// Configure update request
UpdateRequest updateRequestSpecification = new UpdateRequest
{
  SendTo = recipientSpecification,
  Subject = "Sample Monthly Update Request",
  Message = "Please update my online sheet.",
  CcMe = true,
  RowIds = new long[] { 1123834706323332, 5627434333693828 },
  ColumnIds = new long[] { 4549065498224516, 2297265684539268 },
  IncludeAttachments = true,
  IncludeDiscussions = true,
  Schedule = secondMondayOfEachMonth
};

// Send update request via email
UpdateRequest newUpdateRequest = smartsheet.SheetResources.UpdateRequestResources.CreateUpdateRequest(
  3285357287499652,       // sheetId
  updateRequestSpecification
);
```

```java
RecipientEmail recipientA = new RecipientEmail()
  .setEmail("recipient1@smartsheet.com");

RecipientEmail recipientB = new RecipientEmail()
  .setEmail("recipient2@smartsheet.com");

List<Recipient> recipients = Arrays.asList(recipientA, recipientB);

Schedule everySecondMondayOftheMonth = new Schedule()
  .setType(ScheduleType.MONTHLY)
  .setDayDescriptors(Arrays.asList(DayDescriptor.MONDAY))
  .setDayOrdinal(DayOrdinal.SECOND)
  .setStartAt(new Date(1605278593000L))
  .setEndAt(new Date(1636814593000L));

// Specify parameters for update request
UpdateRequest updateRequest = new UpdateRequest();
updateRequest.setRowIds((Arrays.asList(3349987179913092L, 7847699807283588L));
updateRequest.setSendTo(recipients)
  .setSubject("Sample Monthly Update Request")
  .setMessage("Please update my online sheet.")
  .setColumnIds(Arrays.asList(1735559994150148L, 1735559924150148L))
  .setIncludeAttachments(false)
  .setIncludeDiscussions(false)
  .setSchedule(everySecondMondayOftheMonth);

// Create update request
smartsheet.sheetResources().updateRequestResources().createUpdateRequest(
  1639539909607044L,      // long sheetId
  updateRequest
);
```

```python
# Not yet implemented
```

```ruby
# Not yet implemented
```

> Example response

<%= partial "snippets/createImmediateUpdateRequest_response.md.erb" %>

`POST /sheets/{sheetId}/updaterequests`

Creates an update request for the specified rows within the sheet. An email notification (containing a link to the update request) is sent to the specified recipients according to the specified schedule.

<aside class="notice">The recipients of an update request must be specified by using email addresses only. Sending an update request to a <a href="#groups">group</a> is not supported.</aside>

<%= partial "snippets/createUpdateRequest_table.md.erb" %>