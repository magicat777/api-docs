> Example Request: Send Rows

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/emails \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{ 
  "sendTo": [ 
    {"email": "recipient@smartsheet.com"} 
  ], 
  "subject": "Check these rows out!", 
  "message": "Here are the rows I mentioned in our meeting", 
  "ccMe": false, 
  "rowIds": [ 
    6327127650920324, 3404239197235076 
  ], 
  "columnIds": [ 
    5190835902932868, 3791509922310020 
  ], 
  "includeAttachments": false, 
  "includeDiscussions": false 
} 
```

```javascript
// Configure email
var email = {
  "sendTo": [
    {
      "email": "john.doe@smartsheet.com"
    },
    {
      "groupId": 2258118617917316
    }
  ],
  "subject": "Check these rows out!",
  "message": "Here are the rows I mentioned in our meeting",
  "ccMe": false,
  "includeDiscussions": false,
  "includeAttachments": true
};

// Set options
var options = {
  body: email,
  sheetId: 2252168947361668,
  rowId: 4293147074291588
};

// Send row via email
smartsheet.sheets.sendRows(options)
  .then(function (data) {
    console.log(data);
  })
  .catch(function (error) {
    console.log(error);
  });
```

```csharp
// Specify recipients
Recipient[] recipients = new Recipient[] {
  new Recipient { Email = "recipient@smartsheet.com" }
};

// Configure email
MultiRowEmail multiRowEmail = new MultiRowEmail {
  SendTo = recipients,
  Subject = "some subject",
  Message = "some message",
  CcMe = false,
  RowIds = new long[] { 6327127650920324, 3404239197235076 },
  ColumnIds = new long[] { 5190835902932868, 3791509922310020 },
  IncludeAttachments = false,
  IncludeDiscussions = false
};

// Send rows via email
smartsheet.SheetResources.RowResources.SendRows(4293147074291588, multiRowEmail);       // sheetId
```

```java
// Specify recipients
RecipientEmail recipientEmail = new RecipientEmail.AddRecipientEmailBuilder()
  .setEmail("recipient@smartsheet.com")
  .build();

List<Recipient> recipients = new ArrayList<Recipient>();
recipients.add(recipientEmail);

// Configure email
MultiRowEmail multiRowEmail = new MultiRowEmail.AddMultiRowEmailBuilder()
  .setSendTo(recipients)
  .setSubject("some subject")
  .setMessage("some message")
  .setCcMe(false)
  .setRowIds(Arrays.asList(6327127650920324L, 3404239197235076L)
  .setColumnIds(Arrays.asList(5190835902932868L, 3791509922310020L)
  .setIncludeAttachments(false)
  .setIncludeDiscussions(false)
  .build();

// Send rows via email
smartsheet.sheetResources().rowResources().sendRows(4293147074291588L, multiRowEmail);   // sheetId
```

```python
# Configure email
email = ss_client.models.MultiRowEmail()
email.send_to = ss_client.models.Recipient({
  'email': 'john.doe@smartsheet.com'
})
email.row_ids = [6327127650920324, 3404239197235076]
email.column_ids = [5190835902932868, 3791509922310020]

# Send rows via email
response = ss_client.Sheets.send_rows(
  4293147074291588,       # sheet_id
  email)
```

```ruby
# Configure email
body = {
  row_ids: [
    409840559384452,
    2661640373069700
  ],
  column_ids: [
    495660408563588,
    2747460222248836
  ],
  send_to: [
    {
      email: 'john.doe@smartsheet.com'
    },
    {
      group_id: 3051008235464580
    }
  ],
  subject: 'Check these rows out!',
  message: 'Here are the rows I mentioned in our meeting',
  cc_me: false,
  include_attachments: false,
  include_discussions: true,
  layout: 'VERTICAL'
}

# Send rows
response = smartsheet.sheets.rows.send_via_email(
  sheet_id: 4583173393803140,
  body: body
)
```

> Example Response:

```json
{
  "message": "SUCCESS",    
  "resultCode": 0
}
```

`POST /sheets/{sheetId}/rows/emails`

Sends one or more Rows via email.

     |     |
-----|-----|
<%= SCOPE %> | SHARE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [MultiRowEmail Object](#multirowemail-object). <br/><br/>The columns included for each row in the email are populated according to the following rules:<ul><li>If the **columnIds** attribute of the MultiRowEmail Object is specified as an array of column Ids, those specific columns are included.</li><li>If the **columnIds** attribute of the MultiRowEmail Object is omitted, all columns except hidden columns shall be included.</li><li>If the **columnIds** attribute of the MultiRowEmail Object is specified as *empty*, no columns shall be included. (Note: In this case, either **includeAttachments**:true or **includeDiscussions**:true must be specified.)
<%= RETURNS %> | [Result Object](#result-object)
