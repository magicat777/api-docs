# Overview

## Introduction

> Click the corresponding tab above to see sample code in the language of your choice. For more detail, see [SDKs and Sample Code](#sdks-and-sample-code))

```shell
# The cURL code samples included in this API documentation demonstrate
# how to execute operations using the command line data transfer
# tool cURL: https://curl.haxx.se/.
```

```javascript
// The Node.js code samples included in this API documentation demonstrate
// how to execute operations using the Smartsheet JavaScript
// SDK: https://github.com/smartsheet-platform/smartsheet-javascript-sdk.
```

```csharp
// The C# code samples included in this API documentation demonstrate
// how to execute operations using the Smartsheet
// C# SDK: https://github.com/smartsheet-platform/smartsheet-csharp-sdk.
```

```java
// The Java code samples included in this API documentation demonstrate
// how to execute operations using the Smartsheet
// Java SDK: https://github.com/smartsheet-platform/smartsheet-java-sdk.
```

```python
# The Python code samples included in this API documentation demonstrate
# how to execute operations using the Smartsheet Python SDK:
# https://github.com/smartsheet-platform/smartsheet-python-sdk.
```

```ruby
# The Ruby code samples included in this API documentation demonstrate
# how to execute operations using the Smartsheet
# Ruby SDK: https://github.com/smartsheet-platform/smartsheet-ruby-sdk.
```

[Smartsheet](https://www.smartsheet.com/) API 2.0 allows you to programmatically access and manage your organization's Smartsheet data and account information. The API allows you to do the following:

* Read and update sheets
* Manage folders and workspaces
* Administer users and accounts

You can view code examples in the programming language of your choice by clicking the corresponding tab in the dark-blue area in the rightmost pane.

## How Do I Start?

This documentation provides two [Getting Started](#getting-started) tutorials that walk you through making your first API call and interpreting the response to a GET sheet request. You may also want to bookmark or note the following resources:

* [Smartsheet Developer Portal:](http://developers.smartsheet.com) If registering, use a different email address from your paid Smartsheet account so you can test the API and make API calls
* Developer Newsletter (subscribe while at the Developer Portal using the *Get Developer Updates* form)
* [StackOverflow](https://stackoverflow.com/questions/tagged/smartsheet-api) using the "smartsheet-api" tag
* Additional [Getting Started documentation on GitHub](https://github.com/smartsheet-platform/getting-started)
* Contact us at [api@smartsheet.com](mailto:api@smartsheet.com)

## HTTP and REST

### RESTful Architecture

The REST URL structure follows typical resource-oriented conventions.

To get a list of sheets, use the following:

 `GET https://api.smartsheet.com/2.0/sheets`
 
This returns a list of Sheet Objects, where each Sheet has an “id” attribute.

To get details on the sheet with id 123456, use the following:
 
 `GET https://api.smartsheet.com/2.0/sheets/123456`

This Id pattern is repeated throughout the API. Columns, rows, cells, comments, attachments, or any other data element have a unique Id.

If you don't want to make raw HTTP calls, Smartsheet also has several software development kits (SDKs) that provide a higher level interface for popular programming languages. For more information, see [SDKs and Sample Code.](#sdks-and-sample-code)

### HTTP Verbs

Call the API using the following [standard HTTP methods](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html):

* GET (to retrieve an object or multiple objects in a specific category)
* POST (to create)
* PUT (to modify)
* DELETE

### HTTP Status Codes

<%= partial "snippets/errorHandling.md.erb" %>

<aside class="notice">Smartsheet has custom error codes to help you troubleshoot issues. See the <a href="#complete-error-code-list">Complete Error Code List.</a></aside>

### HTTP Headers

Unless otherwise specified, all API endpoints expect request body data to be in [JSON](https://en.wikipedia.org/wiki/JSON), and the response body data is returned as JSON.

The following HTTP request headers may be required, depending on the operation and endpoint being invoked:

Header | Definition | Example |
-----|-----|-----|
*Authorization* | Required for all endpoints, except for POST /token. The access token. | Bearer ll352u9jujauoqz4gstvsae05
*Content-Type* | Required for POST and PUT requests. Defines the structure for the response. | application/json
*Assume-User* | Optional. Allows an admin to act on behalf of, or impersonate, the user to make API calls. The email address used to identify the user must be URI-encoded. | jane.doe%40smartsheet.com

### Query Strings

Many API calls can be modified by including one or more of these common query strings: 

Query Parameter | Type | Description | More Info |
-----|-----|-----|-----|
pageSize | Number | Specifies the maximum number of items to return per page, for example, pageSize=25. | [Paging](#paging)
page | String | Specifies which page to return, for example, page=4. | [Paging](#paging)
includeAll | Boolean | If true, includes all results, for example, includeAll=true. | [Paging](#paging)
allowPartialSuccess | Boolean | If true, allows bulk operations to process even if one or more operations are invalid for some reason, for example, allowPartialSuccess=true. | [Bulk Operations](#bulk-operations)
numericDates | Boolean | If true, allows you to input or receive dates in numeric format, for example, numericDates=true. | [Dates and Times](#dates-and-times)
include/exclude | String | When applicable for a specific object, various include or exclude parameters are available, for example, include=formatting. | Object reference or [Formatting](#formatting)

<aside class="notice">Query strings are case sensitive. If you do not see the expected response, confirm that your query is formatted correctly.</aside>

## Authentication and Access Tokens

> Example Request: Authentication and Access Tokens

```shell
curl https://api.smartsheet.com/2.0/users/me \
`-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```

```javascript
// Set the access token
var client = require('smartsheet');
var smartsheet = client.createClient({accessToken:'ll352u9jujauoqz4gstvsae05'});

// Get current user
smartsheet.users.getCurrentUser()
	.then(function(userProfile) {
		console.log(userProfile);
	})
	.catch(function(error) {
    	console.log(error);
  	});
```

```csharp
// Set the access token
String accessToken = "ll352u9jujauoqz4gstvsae05";

SmartsheetClient smartsheet = new SmartsheetBuilder().SetAccessToken(accessToken).Build();

// Get current user
UserProfile userProfile = smartsheet.UserResources.GetCurrentUser();
```

```java
// Set the access token
Token token = new Token();
token.setAccessToken("ll352u9jujauoqz4gstvsae05");
Smartsheet smartsheet = new SmartsheetBuilder().setAccessToken(token.getAccessToken()).build();

// Get current user
UserProfile userProfile = smartsheet.userResources().getCurrentUser();
```

```python
# Create base client object and set the access token
ss_client = ss_client.Smartsheet('ll352u9jujauoqz4gstvsae05')

# Get current user
user_profile = ss_client.Users.get_current_user()
```

```ruby
require 'smartsheet'

# Add your token to the config.json file
{
  "token": "ll352u9jujauoqz4gstvsae05",
  "sheet_id": "5091283781476228"
}
```

> Example Response:

```json
{
  "email": "john.doe@smartsheet.com",
  "firstName": "John",
  "lastName": "Doe",
  "id": 48569348493401200
}
```

The Smartsheet API uses OAuth 2.0 for Authentication and Authorization. An HTTP header containing an Access Token is required to authenticate each request. 

If you want to get started quickly, or are developing a standalone application that can run with your credentials, follow these instructions:

1. Click the Account button in the upper-right corner of your Smartsheet screen and click Personal Settings. Click the "API Access" tab.
2. Click the "Generate new access token" button to obtain an access token.

The access token must be sent with every API call in an HTTP authorization header (except for the requests to Get Access Token or Refresh Access Token). Once you have an Access Token, include it in the **Authorization** header for every request you make:

`Authorization: Bearer ll352u9jujauoqz4gstvsae05`

The header name is **Authorization** and the value of the header is **Bearer ll352u9jujauoqz4gstvsae05**. Since the access token is being transmitted in clear text, all API calls are done over HTTPS.

<aside class="warning">The token generated runs with your credentials. Be sure to secure your tokens and do not share tokens with anyone.</aside>

<aside class="notice">If your application requires users to be able to login with their own account, you must implement the full OAuth flow. See the documentation for <a href="#third-party-app-development">Third-party App Development</a> and <a href="http://developers.smartsheet.com/register">Developer Registration</a>.</aside>

## Dates and Times

The Smartsheet API returns all dates and times in the [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) time zone in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, that is, YYYY-MM-DDTHH:MM:SSZ.  If a date/time needs to be
displayed to an end-user in their local time zone, you must do the conversion using the user's time zone, which you can obtain by [getting the current user](#get-current-user).

You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter **numericDates** with a value of `true`. This query parameter works for any API request. 

<aside class="notice">Note that some SDK methods use language-specific Date objects, which require different date formats.</aside>

## Sheets/Columns/Rows/Cells

Sheets are composed of rows, columns, and cells. A cell is identified by the Id of its row and column. The following table defines these terms and points you to places in this documentation where you can find more information:

UI Element | Description | More Info
-----|-----|-----|
Sheet | A Sheet can exist in a user's **Sheets** folder ([Home](#home)), in a [Folder](#folders), or in a [Workspace](#workspaces). It is comprised of Columns, Rows, and Cells, and may optionally contain Attachments and/or Discussions. | [Sheet Object](#sheet-object)
Column | A Column Object *defines* the type of the column, but does not actually contain cells. The Column Id identifies the cells in a row. | [Column Object,](#column-object) [Column types](#column-types)
Row | A Row is a component of a Sheet or Report. Each Row is composed of a collection of Cells, and may optionally contain Attachments and/or Discussions. | [Row Object](#row-object)
Cell | A Cell is a location within a Sheet that may contain a value. A collection of Cells comprises each Row in a Sheet. | [Cell Object,](#cell-object) [Cell reference](#cell-reference)

## Object Details vs List Summaries

Many of the List All commands, for example, GET /sheets, return only an abbreviated object for each object returned. For full details, read a single item, such as GET /sheets/{sheetId}. In many cases, you can refine the exact object properties to be returned by using include= and exclude= query parameters.

The JSON representation of the objects returned from the List All REST endpoints will only include a subset of the properties documented here. However, the objects returned from the Java and C# SDKs will represent the omitted properties with NULLs.

## Versioning and Changes

Smartsheet will add new functionality and bug fixes to the API over time. Make sure that your code can handle new JSON properties gracefully. 
Also, make sure your code does not depend on the order in which JSON objects are returned, unless it is explicitly stated in this documentation. 

# Getting Started

## Make Your First API Call

Before you write any code, try executing API requests using a tool like [cURL](https://curl.haxx.se/) or [Postman](https://www.getpostman.com/). By taking your code out of the equation, you can isolate troubleshooting to the raw Request and Response.

You must use an access token. See instructions at [Authentication and Access Tokens](#authentication-and-access-tokens). In the examples below, replace this sample token, "ll352u9jujauoqz4gstvsae05", with your actual token value.

To get a list of all your sheets, try the following command:

`curl -X GET -H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" "https://api.smartsheet.com/2.0/sheets"`

In Postman, the request looks like this:

<img src="images/postman-sampleb.png" alt="Postman screen shot">

The JSON result should look something like this (after formatting):
<pre class="center-column">
{
	"pageNumber": 1,
	"pageSize": 100,
	"totalPages": 1,
	"totalCount": 2,
	"data": [{
    "id": 6141831453927300,
    "name": "My first sheet",
    "accessLevel": "ADMIN",
    "permalink": "https://app.smartsheet.com/b/home?lx=8enlO7GkdYSz-cHHVus33A",
    "createdAt": "2016-01-28T22:02:35Z",
    "modifiedAt": "2016-08-09T17:50:06Z"
  },
  {
    "id": 6141831453927300,
    "name": "Sheet shared to me",
    "accessLevel": "VIEWER",
    "permalink": "https://app.smartsheet.com/b/home?lx=8enlO7GkdYSz-cHHVus33A",
    "createdAt": "2016-01-28T22:02:35Z",
    "modifiedAt": "2016-08-09T17:50:06Z"
  }
	]
}
</pre>

## How to Read a Sheet Response

Many Smartsheet API operations handle sheets, rows, columns, and cells. Each is identified by an Id and it is important to understand the relationship between these objects. Typically you loop through the columns to determine the Id of the columns you are interested in. Then you loop through the rows and contained cells to find actual values. The annotated sample response below illustrates these concepts by calling a very simple sheet called Employee Roster.

<img src="images/Employee_roster.png" alt="Basic sheet with 2 rows and 2 columns" />

Before you begin, you should already have an access token, which you used in the exercise above. Use the same access token for this walkthrough.

1. The first thing you must have is a sheetId. To find a sheetId through the UI, with the sheet open, click Sheet Actions in the left toolbar and select Properties. Note: use [List Sheets](#list-sheets) if you want to do this programmatically.

  <img src="images/sheet-properties.png" alt="Image of the Sheet Properties window" />

2. Copy the sheetId into the API call, GET Sheets, as below:

  `curl -X GET -H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" "https://api.smartsheet.com/2.0/sheets/6141831453927300"`

3. The sample request and response are displayed below. NOTE: while JSON doesn't have a comment feature, this sample uses comments to help you identify the objects in the response.

<pre class="center-column">
{
  "id": 6141831453927300,                 // This is the Id of the entire sheet
  "name": "My first sheet",
    "columns": [{                         // Each Column Object associates column
                                          // Id to title and defines the
                                          // column details

      "id": 2517104256673668,             // Column Id identifies cells on a row
      "index": 0,
        "title": "Name",                  // This is the column name as seen
                                          // in the UI
      "type": "TEXT_NUMBER",
      "primary": true,
      "width": 150
    },
    {
      "id": 7020703884044164,
      "index": 1,
      "title": "EmployeeId",
      "type": "TEXT_NUMBER",
      "width": 150
    }
  ],
  "rows": [{                              // A Row Object
    "id": 564480076736388,                // Use the row Id to make updates
    "rowNumber": 1,
    "expanded": true,
    "createdAt": "2017-05-12T16:52:38Z",
    "modifiedAt": "2017-05-22T20:40:14Z",
      "cells": [{                         // Each row contains an array of Cells,
                                          // which have the actual content

        "columnId": 2517104256673668,     // The column Id can be interpreted by
                                          // looking at the array of column
                                          // definitions above. That tells you
                                          // this is the "Name" column

      "value": "John Doe",            
        "displayValue": "John Doe"      
    },
    {
      "columnId": 7020703884044164,
      "value": 12345,                     // Actual cell value
      "displayValue": "12,345"            // How the cell value is displayed
                                          // in the UI
    }
    ]},
    {
      "id": 5068079704106884,
      "rowNumber": 2,
      "siblingId": 564480076736388,
      "expanded": true,
      "createdAt": "2017-05-12T16:52:38Z",
      "modifiedAt": "2017-05-22T20:40:14Z",
      "cells": [{
        "columnId": 2517104256673668,
        "value": "Jane Roe",
        "displayValue": "Jane Roe"
      },
      {
        "columnId": 7020703884044164,
        "value": 67890,
        "displayValue": "67890"
      }
      ]
    }
  ]
}
</pre>
<br/>

This core hierarchy of Sheet > Column > Row > Cell is essential to working with the Smartsheet API. As your user's sheets grow in complexity, the responses do too. This walkthrough has given you some navigational aid in finding the right value to plug into your API calls. Use the API Reference and the example language tabs to learn more.

# SDKs and Sample Code

> Install the SDK

```javascript
npm install smartsheet
```

```csharp
// In the Visual Studio Package Manager Console
Install-Package smartsheet-csharp-sdk
```

```java
// Add the SDK as a dependency in your project
<dependency>
  <groupId>com.smartsheet</groupId>
  <artifactId>smartsheet-sdk-java</artifactId>
  <version>2.2.0</version>
</dependency>
```

```python
$ pip install smartsheet-python-sdk
```

```ruby
# Add this line to your application's Gemfile
gem 'smartsheet', '>= 1.0.0'

# And then execute
$ bundle
```

> Load the client

```javascript
// Initialize client SDK
var smartsheet = client.createClient({ accessToken: ll352u9jujauoqz4gstvsae05 });
```

```csharp
using Smartsheet.Api;
using Smartsheet.Api.Models;

// Initialize client
String accessToken = "ll352u9jujauoqz4gstvsae05";

SmartsheetClient smartsheet = new SmartsheetBuilder()
  .SetAccessToken(accessToken)
  .Build();
```

```java
import com.smartsheet.api.*;
import com.smartsheet.api.models.*;
import com.smartsheet.api.oauth.*;

// Initialize client
String accessToken = "ll352u9jujauoqz4gstvsae05";

Smartsheet smartsheet = new SmartsheetBuilder()
  .setAccessToken(accessToken)
  .build();
```

```python
import smartsheet

# Initialize client
ss_client = smartsheet.Smartsheet(access_token)

# Make sure we don't miss any errors
ss_client.errors_as_exceptions(True)
```

```ruby
require 'smartsheet'
require 'logger'

logger = Logger.new(STDOUT)
logger.level = Logger::INFO

# Initialize client
smartsheet = Smartsheet::Client.new(token: 'll352u9jujauoqz4gstvsae05', logger: logger)

# Example call
response = smartsheet.sheets.list
sheets = response[:data]

# Return is a Ruby Hash as below, though this document
# displays a JSON example to accommodate the multiple tabs
{
  :id=>0123456789012345,
  :name=>"Expense Report May 2017",
  :access_level=>"VIEWER",
  :permalink=>"https://app.company.com",
  :created_at=>"2016-12-08T21:14:43Z",
  :modified_at=>"2017-08-20T02:47:41Z"
}
```

Smartsheet has SDKs providing a higher level interface for several languages.

Language | SDK | Sample application
-----|-----|-----|
| C# | [smartsheet-csharp-sdk](https://github.com/smartsheet-platform/smartsheet-csharp-sdk) | [csharp-read-write-sheet](https://github.com/smartsheet-samples/csharp-read-write-sheet)
| Java | [smartsheet-java-sdk](https://github.com/smartsheet-platform/smartsheet-java-sdk) | [java-read-write-sheet](https://github.com/smartsheet-samples/java-read-write-sheet)
| Node.js | [smartsheet-javascript-sdk](https://github.com/smartsheet-platform/smartsheet-javascript-sdk) | [node-read-write-sheet](https://github.com/smartsheet-samples/node-read-write-sheet)
| Python | [smartsheet-python-sdk](https://github.com/smartsheet-platform/smartsheet-python-sdk) | [python-read-write-sheet](https://github.com/smartsheet-samples/python-read-write-sheet)
| Ruby | [smartsheet-ruby-sdk](https://github.com/smartsheet-platform/smartsheet-ruby-sdk) | [ruby-read-write-sheet](https://github.com/smartsheet-samples/ruby-read-write-sheet)

# Other Topics

## Access Levels

Sheets, Workspaces, and Templates have an **accessLevel** attribute that describes the current user's access level to that object. 
This corresponds directly to the sharing and access controls of Smartsheet that are available through the Smartsheet UI. 
The **accessLevel** attribute has one of the following values:

Value | Description |
-----|-----|
ADMIN | The user can edit and share the resource, and can alter the structure of the resource as well.
EDITOR | The user can edit the resource, but cannot alter the structure of, delete or share the resource.
EDITOR_SHARE | The same as EDITOR, but with the ability to share the resource to other users.
OWNER | The user has complete control over the resource.
VIEWER | The user has read-only access to the resource.

# Third-party App Development

Apps connect to Smartsheet using [OAuth 2.0](https://oauth.net/2/) to authenticate and authorize users. If you are building an app, this documentation will walk you through the steps you need to authenticate your users. The Smartsheet [SDKs](#sdks-and-sample-code) contain APIs for OAuth 2.0.

## First Steps

Before you can start using OAuth 2.0 with your app, Smartsheet needs the following information:

1. You must [register](http://developers.smartsheet.com/register) with Smartsheet to get a developer account. The developer account gives you access to Developer Tools, which is where you manage your app.
2. In Developer Tools, complete your developer profile. This profile is public and anyone can access it to learn about you and your apps.
3. In Developer Tools, register your app so Smartsheet can assign a client Id and a client secret to the app.
4. Review the list of Access Scopes. You'll need to choose which ones your app needs to get to a user's Smartsheet data, and then ask the user to consent to that access.

After you've worked through these steps, you'll be ready to implement the [OAuth Flow](#oauth-flow).

### Open Developer Tools

1. Log in to Smartsheet with your developer account.
2. Click the **Account** button in the upper-right corner of your Smartsheet screen, and then click **Developer Tools**.
3. Do one of the following:
  * If you need to register an app, click **Create New App**.
  * If you need to manage an app, click **view/edit** for the app.

### Register Your App Using Developer Tools

1. Log in to Smartsheet with your developer account.
2. Click the **Account** button in the upper-right corner of your Smartsheet screen, and then click **Developer Tools**.
3. In the Create New App form, provide the following information:
  * Name: the name the user sees to identify your app
  * Description: a brief description intended for the user
  * URL: the URL to launch your app, or the landing page if not a web app
  * Contact/support: support information for the user
  * Redirect URL: also known as a callback URL. The URL within your application that will receive the OAuth 2.0 credentials
 
After you click **Save**, Smartsheet assigns a client Id and secret to your app. Make a note of these Ids for the next steps; however, you can always look them up again in Developer Tools.

### Access Scopes

To access a user's Smartsheet data, your application must explicitly ask the user for permission. You do this by using Access Scopes, which enable your app to communicate to the user what type of operations it is performing. 
Access Scopes do not override existing [access level restrictions](#access-levels). 
For example, having the Access Scope of WRITE_SHEETS does not allow your app to update a sheet on which the user has VIEWER access level.
 
The Access Scopes are as follows:

Access Scope | Description |
-----|-----|
ADMIN_SHEETS | Modify sheet structure, including column definition, publish state, etc.
ADMIN_SIGHTS | Modify Sight structure.
ADMIN_USERS | Add and remove users from your Smartsheet organization; create groups and manage membership.
ADMIN_WEBHOOKS | Create, delete, and update webhooks; get all webhooks; reset shared secret. 
ADMIN_WORKSPACES | Create and manage workspaces and folders, including sharing.
CREATE_SHEETS | Create new sheets.
CREATE_SIGHTS | Create new Sights.
DELETE_SHEETS | Delete sheets.
DELETE_SIGHTS | Delete Sight.
READ_CONTACTS | Retrieve contacts.
READ_SHEETS | Read all sheet data, including attachments, discussions, and cell data.
READ_SIGHTS | Read all Sight data.
READ_USERS | Retrieve users and groups for your Smartsheet organization.
SHARE_SHEETS | Share sheets, including sending sheets as attachments.
SHARE_SIGHTS | Share Sight.
WRITE_SHEETS | Insert and modify sheet data, including attachments, discussions, and cell data.

<aside class="notice"><b>Additional Info:</b><ul><li>When you request an authorization code, you specify all of the Access Scopes you need for your app. Smartsheet encodes those permissions into the auth code and subsequent access token.</li><li>Your app must request at least one Access Scope, but should only request the scopes necessary.</li><li>Once your app attains a valid access token, it can execute a <a href="#get-current-user">Get Current User</a> operation, regardless of which Access Scopes were requested.</li></ul></aside>

## OAuth Flow

Your app must implement a 3-legged OAuth flow to retrieve an access token it can use to access Smartsheet data on behalf of an end user. 
The following diagram has an overview of the OAuth flow:

<img src="images/OAuth_flow.png" alt="Simplified graphic showing what data is passed back and forth during OAuth flow">

<aside class="notice">App registration and OAuth flow require HTTPS.</aside>

### Request an Authorization Code

> Request an authorization code:

```shell
curl 'https://app.smartsheet.com/b/authorize?response_type=code&client_id=dheu3dmkd32fhxme&scope=READ_SHEETS%20WRITE_SHEETS&state=MY_STATE' \
-X GET
```

```javascript
const qs = require('querystring');

function authorizeURL(params) {
    const authUrl = 'https://app.smartsheet.com/b/authorize';
    return `${authUrl}?${qs.stringify(params)}`;
}

const authorizationUri = authorizeURL({
    response_type: 'code',
    client_id: '1samp48lel5for68you',
    redirect_uri: 'http://localhost:3000/callback',
    scope: 'CREATE_SHEETS WRITE_SHEETS',
});

// Initial page redirecting to Smartsheet
app.get('/auth', (req, res) => {
    console.log(authorizationUri);
    res.redirect(authorizationUri);
});
``

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

```ruby
# [todo]
```

> Successful Response:

```json
// The user sees your app's consent page
```

`GET https://app.smartsheet.com/b/authorize`

`POST https://app.smartsheet.com/b/authorize`

Initiates the process to get authorization from the user.
Smartsheet will redirect this URL to display your app's consent page with an explanation of the data the app will need access to. This consent page is autogenerated by Smartsheet based on a combination of the information you registered for your app and the parameters you send with the request.

Value | Description |
-----|-----|
response_type<br/>(required) | Whether the endpoint returns an authorization code. Must be set to "code".
client_id<br/>(required) | The client Id you obtained when you registered your app.
scope<br/>(required) | Space-delimited list of [access scopes](#access-scopes) to which you are asking the user to grant access.
state<br/>(optional) | An arbitrary string of your choosing that is returned to your app; a successful roundtrip of this string helps ensure that your app initiated the request.

You can view code examples by clicking the corresponding tab in the dark-blue area in the rightmost pane. The cURL example shows a `GET`.

<aside class="Notice">If the user has not yet logged into Smartsheet, the redirect will first take them to a login page, and then display the consent page.</aside>

At this point, the user can authorize your app to access their Smartsheet account, as in the following example:

<img src="images/developer_tools3.png" alt="Dialog box to allow or deny scopes">

After the user clicks **Allow** or **Deny**, you'll receive a response from Smartsheet outlined in the next sections.

### If the User Clicks Allow

> Successful Response:

```shell
'http://localhost:3000/callback?code=sample6p9qisx6a&expires_in=599080&state=MY_STATE'
```

```javascript
'http://localhost:3000/callback?code=sample6p9qisx6a&expires_in=599080&state=MY_STATE'
```

```csharp
'http://localhost:3000/callback?code=sample6p9qisx6a&expires_in=599080&state=MY_STATE'
```

```java
'http://localhost:3000/callback?code=sample6p9qisx6a&expires_in=599080&state=MY_STATE'
```

```python
'http://localhost:3000/callback?code=sample6p9qisx6a&expires_in=599080&state=MY_STATE'
```

```ruby
'http://localhost:3000/callback?code=sample6p9qisx6a&expires_in=599080&state=MY_STATE'
```

If the user clicks **Allow**, Smartsheet redirects the user to the callback URL with the following parameters:

Value | Description |
-----|-----|
code | Authorization code required to obtain access token, such as 'sample6p9qisx6a'.
expires_in | Number of milliseconds code is valid once issued; this is currently 599135 milliseconds, or approx. 10 minutes--you must obtain an access token within that time.
state | The same value for `state` that you sent when you requested the authorization code.

At this point, you should verify the `state` value matches what you sent to the user when you requested the authorization code. This helps you determine that the response came from the user and not a malicious script. If the values do not match, you should reject the response.

For other error conditions, see the list of [OAuth Error Types](#oauth-error-types).

### If the User Clicks Deny

If the user clicks **Deny**, Smartsheet redirects the user to the callback URL with the following parameters:

Value | Description |
-----|-----|
error | "access_denied".
state | The same value for `state` that you sent when you requested the authorization code.

For other error conditions, see the list of [OAuth Error Types](#oauth-error-types).

### Request an Access Token

> Request an access token:

```shell
curl https://api.smartsheet.com/2.0/token \
-d 'grant_type=authorization_code&code={your_code}&client_id={your_client_id}&hash={SHA_256(app_secret|code)}' \
-X POST
```

```javascript
// Create hash
var hash =
  crypto.createHash('sha256')
    .update('9samp7le3for71you' + '|' + 'sample6p9qisx6a')
        // ('Your App Secret' + '|' + 'Received Authorization Code')
    .digest('hex');
 
// Set options
var options = {
  queryParameters: {
    client_id: '1samp48lel5for68you',   // Your App Client ID
    code: 'sample6p9qisx6a',            // Received Authorization Code
    hash: hash
  },
  contentType: 'application/x-www-form-urlencoded'
};

// Get access token
smartsheet.tokens.getAccessToken(options)
  .then(function(token) {
  console.log(token);
})
.catch(function(error) {
    console.log(error);
  });
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

```ruby
hash = Digest::SHA256.hexdigest '9samp7le3for71you|sample6p9qisx6a'
                              # your_app_secret|your_code
smartsheet.token.get(
  client_id: '1samp48lel5for68you',
  code: 'sample6p9qisx6a',
  hash: hash
)
```


> Successful Response:

```json
{
	"token": {
		"access_token": "ll352u9jujauoqz4gstvsae05",
		"token_type": "bearer",
		"refresh_token": "e9x352a9mp4151le2505",
		"expires_in": 604799,
		"expires_at": "2017-11-21T23:32:22.180Z"
	}
}
```

> Error Response:

```json
{
  "errorCode": "Smartsheet error number",
  "error": "OAuth error type",
  "error_description": "Error description"
}
```

`POST /token`

Once you’ve successfully obtained an authorization code, the next step is to exchange the code for an access token. (Remember, the authorization code expires after 599135 milliseconds.) 

Value | Description |
-----|-----|
grant_type<br/>(required) | Must be set to "authorization_code".
client_id<br/>(required) | The client Id you obtained when you registered your app.
code<br/>(required) | Authorization code returned in the [previous step](#request-an-authorization-code).
hash<br/>(required) | [SHA-256](https://en.wikipedia.org/wiki/SHA-2) hash of your app secret concatenated with a pipe and the authorization code.  The app_secret is never sent with the request. This is the `app_secret` you obtained when you [registered your app](#register-your-app-using-developer-tools).

<aside class="notice">The "Get Access Token" request must have the <b>Content-Type</b> header set to 'application/x-www-form-urlencoded'.</aside>

If your request is successful, the response will contain a [Token Object](#token-object). You can see an example of the Token Object in the dark-blue area in the rightmost pane. 

For possible error conditions, see the list of [OAuth Error Types](#oauth-error-types).

### Refresh an Access Token

> Refresh an access token:

```shell
curl https://api.smartsheet.com/2.0/token \
-d 'grant_type=refresh_token&refresh_token={your_refresh_token}&client_id={your_client_id}&hash={SHA_256(app_secret|refresh_token)}' \
-X POST
```

```javascript
// Create hash
var hash =
  crypto.createHash('sha256')
    .update('9samp7le3for71you' + '|' + 'sample6p9qisx6a')
        // ('Your App Secret' + '|' + 'Your App Refresh Token')
    .digest('hex');
 
// Set options
var options = {
  queryParameters: {
    client_id: '1samp48lel5for68you',   // Your App Client ID
    refresh_token: 'e9x352a9mp4151le2505',
    hash: hash
  },
  contentType: 'application/x-www-form-urlencoded'    
};
 
// Refresh access token
smartsheet.tokens.refreshAccessToken(options)
  .then(function(updatedToken) {
      console.log(updatedToken);
  })
  .catch(function(error) {
      console.log(error);
  });
```

```csharp
// [todo]
```

```java
// [todo]
```

```python
# [todo]
```

```ruby
hash = Digest::SHA256.hexdigest '9samp7le3for71you|e9x352a9mp4151le2505'
                                # your_app_secret|refresh_token
smartsheet.token.refresh(
  client_id: '1samp48lel5for68you',
  refresh_token: 'e9x352a9mp4151le2505',
  hash: hash
)
```

> Successful Response:

```json
{
	"token": {
		"access_token": "new52u9jujauoqz4gstvsae05",
		"token_type": "bearer",
		"refresh_token": "new352a9mp4151le2505",
		"expires_in": 604799,
		"expires_at": "2017-11-21T23:32:22.180Z"
	}
}
```

`POST /token`

Access tokens expire after 604799 seconds, which is approx 7 days. Use the refresh token to obtain a new access token and a new refresh token. 
Once you obtain the new tokens, you must use them in place of the old ones, which are no longer valid.

Value | Description |
-----|-----|
grant_type<br/>(required)| Must be set to "refresh_token".
client_id<br/>(required)| Client Id for your app.
refresh_token<br/>(required)| refresh_token value that came with the access token.
hash<br/>(required)| [SHA-256](https://en.wikipedia.org/wiki/SHA-2) hash of your app secret concatenated with a pipe and the refresh token value. To obtain an app_secret, see [Register Your App Using Developer Tools](#register-your-app-using-developer-tools).
redirect_uri<br/>(deprecated)| If supplied, must match the redirect URL you [registered](#register-your-app-using-developer-tools) for your app.

<aside class="notice">The "Refresh Token" request must have the <b>Content-Type</b> header set to 'application/x-www-form-urlencoded'.</aside>

If your request is successful, the response will contain a [Token Object](#token-object). You can see an example of the Token Object in the dark-blue area in the rightmost pane. 

### OAuth Error Types

Value | Description |
-----|-----|
invalid_client | The client information is invalid. Ensure your client id is correct.
invalid_grant | The authorization code or refresh token is invalid or expired or the hash value does not match the app secret and/or code.
invalid_request | The request parameters are invalid or missing.
invalid_scope | One or more of the requested access scopes are invalid. Please check the list of [access scopes](#access-scopes).
unsupported_grant_type | grant_type must equal "authorization_code" or "refresh_token".
unsupported_response_type | response_type must be set to "code".

# Work at Scale 

## Bulk Operations

The Smartsheet API supports a number of bulk operations that can operate on multiple objects.  Unlike single-object operations, bulk operations allow you to create, update, or delete
multiple objects in a single request. For example, if you want to update 10 rows within a sheet, do so using a single [Update Rows](#update-rows) request, rather than executing 10 separate requests - one for each row.

### Optional Bulk Operations

Several endpoints support *optional* bulk `POST` operations which exist alongside the standard single-object `POST`.  For these endpoints, you may pass in either a single object or an array of objects.
Depending on what was passed in, the [Result Object](#result-object) returned contains either a single object or an array.  An example optional bulk operation is [POST /favorites](#add-favorites): you can
pass in a single [Favorite Object](#favorite-object) to create a single favorite, or an array of Favorite objects to create multiple favorites in a single request.  Endpoints which support bulk operations are
noted as such in the API reference documentation.

**NOTE**: Most `POST` operations fail when attempting to create a single object which already exists (for example, favorites, shares, group members).  However, for the corresponding bulk operations, these endpoints do *not*
return an error if one or more items in the array already exist.  Existing items are simply ignored, and the [Result Object](#result-object) returned omits them.

### Partial Success

In general, the default behavior for bulk operations is to fail outright if any of the objects in the request are invalid for some reason.  If successful, Smartsheet creates/updates/deletes all objects in the request;
if not, no objects are changed.

However, there are some operations that support *partial success*, which means the operation still succeeds even if one or more of the objects in the request fails for some reason (for example, an object is invalid).  Partial success is 
*not* the default mode for an operation and you must explicitly enable it by using a query string parameter.  This is noted in the documentation for operations that support partial success.

<%= PARTIAL_SUCCESS %>

## Paging

The Smartsheet API contains a number of *index endpoints* (typically denoted in the documentation with titles beginning with "Get All" or "List") which return arrays of objects.
Examples include `GET` [/users](#list-users), [/sheets](#list-sheets), [/sheets/{sheetId}/columns](#list-columns), and many others.  These endpoints all support pagination, meaning
you can retrieve paged subsets of results, enabling you to process potentially large result sets in smaller chunks.

### Paging Query String Parameters
Index endpoints all support pagination via the following optional query string parameters:

Value | Type | Description |
-----|-----|-----|
**pageSize** 	| number  | The maximum number of items to return per page.  Unless otherwise stated for a specific endpoint, defaults to **100** if not specified.
**page**		| number  | Which page to return.  Defaults to **1** if not specified.  If you specify a value greater than the total number of pages, the last page of results is returned.
**includeAll**  | Boolean | If true, include all results, that is, do not paginate.  Mutually exclusive with **pageSize** and **page** (they are ignored if **includeAll**=true is specified).

<aside class="notice">Most index endpoints default to a page size of 100 results.  If you want all results at once, you must specify the <code class="prettyprint">includeAll=true</code> query string parameter.</aside>

### Paged Responses

Index endpoints all return paged responses via an **IndexResult** Object which provides paging metadata that can be used to navigate the full set of pages in the result set:

<%= partial "snippets/indexResult_object.md.erb" %>

## Rate Limiting

<%= partial "snippets/rateLimiting.md.erb" %>
